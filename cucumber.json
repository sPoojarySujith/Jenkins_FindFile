[
  {
    "line": 4,
    "name": "account link - negative scenarios for account linking with Spotify",
    "description": "",
    "id": "account-link---negative-scenarios-for-account-linking-with-spotify",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_spotify_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@spotify"
      },
      {
        "line": 3,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 3,
    "name": "account link - positive scenarios for account linking with Twitch",
    "description": "",
    "id": "account-link---positive-scenarios-for-account-linking-with-twitch",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_twitch.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@twitch"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 23,
        "name": "Get partner authorize url with state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-with-state;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1662,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 8
              },
              {
                "cells": [
                  "format",
                  "opaque"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 11
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 17
              },
              {
                "cells": [
                  "state\u003d1234567890"
                ],
                "line": 18
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that body.state in response contains:",
            "rows": [
              {
                "cells": [
                  "1234567890"
                ],
                "line": 20
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 24,
        "name": "Get partner authorize url with state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-with-state;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1418,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 8
              },
              {
                "cells": [
                  "format",
                  "jwt"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 11
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 17
              },
              {
                "cells": [
                  "state\u003d1234567890"
                ],
                "line": 18
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that body.state in response contains:",
            "rows": [
              {
                "cells": [
                  "1234567890"
                ],
                "line": 20
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 26,
        "name": "Get partner authorize url with redirect url overwrite",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-with-redirect-url-overwrite",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1689,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 29
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 30,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 31
              },
              {
                "cells": [
                  "redirectUri",
                  "https://example.com"
                ],
                "line": 32
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fexample.com"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 55,
        "name": "Get partner authorize url with console tokens",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-with-console-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1382,
              "status": "passed"
            },
            "line": 40,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save eyJhbGciOiJSUzI1NiJ9.eyJhIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFFQT09IiwidmVyIjoxLCJiIjoicTJxMWhHRVpRc1wvNzFDQXUydjdWZEU2VGljQjdsRGgySE1IR3pPaVJ0NVk9Iiwic3YiOiIwLjgwMC4wMDAiLCJhdCI6MSwiYyI6Ikk3OTZSdlBMM01FRG5tSityWHpvRVRJNHZWTTRDMndnckNrTnhreDl2RmxKZVU5K3RSME05VlU2VlE1N2dGXC9LIiwiZCI6IkNnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvPSIsInBmIjoicHM0IiwibnBlbnYiOiJlMS1ucCIsImV4cCI6MzE4NjcwNjI2NiwicHJuIjoiY3QiLCJpYXQiOjE2MDk5MDYyNjZ9.ZFEvtir0S03KmgJuSwz9PzlMWuzw5gdW0GsCLC__VsLWoNnELD-52tWqUs21fnmjUO66Gk-tC7LKp59yItfo_J9nGqgg6XULUMs-9IdoIrdOw5N2V0H6VO459_lGAmLPHUxgQMr_PDG5SGghfxJ5HsvXecxsjRfr24FJh7DUi9zRVXhszH4y6XbDKkQoyisMwXWnA7dkvqXKFVL9zrue9GfZpUS7uaH2S121yohJ14LQbGXqhrlY58z74aWhrf43J2ufkgLaUg35D8p6w7L_qoAs67oWZqSxuNEJb_2tKsRQqYTsStKMhwMJTUrkD3tXoPxc4whRbn6oWVILCJiQ-Q as console_token",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 119,
              "status": "passed"
            },
            "line": 42,
            "name": "I get a password token for the account with a console token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 43
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 45
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 50
              },
              {
                "cells": [
                  "apple_model\u003dPlayStation5"
                ],
                "line": 51
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 56,
        "name": "Get partner authorize url with console tokens",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-with-console-tokens;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1374,
              "status": "passed"
            },
            "line": 40,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save eyJhbGciOiJSUzI1NiJ9.eyJhIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09IiwidmVyIjoxLCJiIjoidFBnTStkeGl0bWdCN2pNOG8xUmNnUT09Iiwic3YiOiIxLjUwMC4wMCIsImF0IjoxLCJjIjoiOVBDVExvbUY4cHFRZFU0M2ZkT1FvS1l6SDd3SXlmYXFJQ1hVTCtOemZ5VmR3VnRUczlUWEoycTYwWXR4MUNieCIsImQiOiJtb1hyYmtDb2tLT1lcLzZMbXlGM2JMY2Zpd1NDTnROV25ob2FNOFN3UHZwTkpZbnU2aDVESVluOWZSZUJLckZRQUFBQUFBd0FBQUFBQUFBQUFBQUFBQU5vTURwcEp4Q1dXK2VJQTZUWkRvV2Y0Y2huZ2RHVGUzeW4yd011U0ZtaFQ5eXdYM3ZBbmJQdUY3UlpuZHlFM0ZWQ1VhYkhrN3hUTXhjRmNodndwZDNscWZVaFpPQnVBSmg1WGhaRDJldjJKN1Q3cmF5U2tnYnpQTWR6WFwvZ2dsTE9COTBPaFcwdWdYUDdQRURKdjI2YVNEWGJlOVZUb09YS01wT0x6XC85VWZCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVCQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBZ2lDUVF6cXJWN2RiK2JFOEN1UVVYcStxMmVDWWVYNjNDVFljMFBCNWFlb0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0iLCJwZiI6InBzNSIsIm5wZW52IjoiZTEtbnAiLCJleHAiOjE3NTkyNzY4MDAsInBybiI6ImN0IiwiaWF0IjoxNjEwNDkyMDU2fQ.DuVmL8jEefXkhpUaVa6T-hKH1Exy0poe27nyflxThAaU8PJ40F50-v8GKcAbXeKKjeflrZv8WE57LOgTeOnsOVh8O5r7x6zcttXOtrfGI6HUOYoe1bO4BPSEnL7ioEh_Blm5TO8t_mScs9SsiM22XJ5_MC-3UWq_b2_cOpQVjoVMA6sZhF1ZDHMZpMTOu2uyC4DkBzlG08KsIPFyyCYrIpYZS5reu67se6wCNZVMiiikUWTxss5grLihzdCdvUFL2qocurG1Sp0F_159WPyk05OfuZF95N3SXBSyGKQBjv77UufNQNWnEBeku7071MrH6Mnow7jN3Z4XY5eOgbzAvA as console_token",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 103,
              "status": "passed"
            },
            "line": 42,
            "name": "I get a password token for the account with a console token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 43
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 45
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 50
              },
              {
                "cells": [
                  "apple_model\u003dPlayStation5"
                ],
                "line": 51
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 58,
        "name": "Get partner authorize url without providing state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-without-providing-state",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1404,
              "status": "passed"
            },
            "line": 59,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 60,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I remove state from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 63,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 66,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 70
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 139,
        "name": "Get partner authorize url for apple using S2S token",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple;get-partner-authorize-url-for-apple-using-s2s-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1578,
              "status": "passed"
            },
            "line": 140,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 141,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 142,
            "name": "I make a getClientCredentialsToken.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 143,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "response_type\u003dcode"
                ],
                "line": 147
              },
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 148
              },
              {
                "cells": [
                  "scope\u003dmusic"
                ],
                "line": 149
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 150,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "account link - positive scenarios for account linking with Apple",
    "description": "",
    "id": "account-link---positive-scenarios-for-account-linking-with-apple",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_apple.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@apple"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 29,
        "name": "I can create a quick link for valid psn account and partner",
        "description": "",
        "id": "account-quick-link;i-can-create-a-quick-link-for-valid-psn-account-and-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1477,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I have a PSN account specific partner account Id for partnerId spotify",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a createAccountQuickLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 11
              },
              {
                "cells": [
                  "partnerAccessToken",
                  "partner-access-token"
                ],
                "line": 12
              },
              {
                "cells": [
                  "accessTokenTtl",
                  "3600"
                ],
                "line": 13
              },
              {
                "cells": [
                  "accessTokenSecret",
                  "null"
                ],
                "line": 14
              },
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 15
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 17,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 18
              },
              {
                "cells": [
                  "format",
                  "opaque"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 20,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 21
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 23,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027accessToken\u0027)"
                ],
                "line": 24
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 25
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 26,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 5,
            "name": "@smoke"
          },
          {
            "line": 2,
            "name": "@unsupportedP1"
          }
        ]
      },
      {
        "line": 30,
        "name": "I can create a quick link for valid psn account and partner",
        "description": "",
        "id": "account-quick-link;i-can-create-a-quick-link-for-valid-psn-account-and-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1322,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I have a PSN account specific partner account Id for partnerId spotify",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a createAccountQuickLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 11
              },
              {
                "cells": [
                  "partnerAccessToken",
                  "partner-access-token"
                ],
                "line": 12
              },
              {
                "cells": [
                  "accessTokenTtl",
                  "3600"
                ],
                "line": 13
              },
              {
                "cells": [
                  "accessTokenSecret",
                  "null"
                ],
                "line": 14
              },
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 15
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 17,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 18
              },
              {
                "cells": [
                  "format",
                  "jwt"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 20,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 21
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 23,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027accessToken\u0027)"
                ],
                "line": 24
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 25
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 26,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 5,
            "name": "@smoke"
          },
          {
            "line": 2,
            "name": "@unsupportedP1"
          }
        ]
      },
      {
        "line": 33,
        "name": "I cannot create a quick link with missing access token secret for twitter",
        "description": "",
        "id": "account-quick-link;i-cannot-create-a-quick-link-with-missing-access-token-secret-for-twitter",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1216,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 35
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I have a PSN account specific partner account Id for partnerId twitter",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a createAccountQuickLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 38
              },
              {
                "cells": [
                  "partnerAccessToken",
                  "partner-access-token"
                ],
                "line": 39
              },
              {
                "cells": [
                  "accessTokenTtl",
                  "2147483647"
                ],
                "line": 40
              },
              {
                "cells": [
                  "refreshToken",
                  "null"
                ],
                "line": 41
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 42
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 32,
            "name": "@smoke"
          }
        ]
      },
      {
        "line": 50,
        "name": "I can create a quick link for valid psn account and twitter",
        "description": "",
        "id": "account-quick-link;i-can-create-a-quick-link-for-valid-psn-account-and-twitter",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I enable mock for partner api call",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 715,
              "status": "passed"
            },
            "line": 52,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 53
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 54,
            "name": "I have a PSN account specific partner account Id for partnerId twitter",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 55,
            "name": "I make a createAccountQuickLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 56
              },
              {
                "cells": [
                  "partnerAccessToken",
                  "partner-access-token"
                ],
                "line": 57
              },
              {
                "cells": [
                  "accessTokenSecret",
                  "tokenSecret"
                ],
                "line": 58
              },
              {
                "cells": [
                  "accessTokenTtl",
                  "2147483647"
                ],
                "line": 59
              },
              {
                "cells": [
                  "refreshToken",
                  "null"
                ],
                "line": 60
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 62,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 63
              },
              {
                "cells": [
                  "format",
                  "opaque"
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 65,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 66
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 68,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027accessToken\u0027)"
                ],
                "line": 69
              },
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 70
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 71,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 48,
            "name": "@smoke"
          },
          {
            "line": 49,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "account quick link",
    "description": "",
    "id": "account-quick-link",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_quicklink.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@unsupportedP1"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 5,
        "name": "I can get the application health status",
        "description": "",
        "id": "cis-application-health-scenarios;i-can-get-the-application-health-status",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 6,
            "name": "I make a getStatus.json request expecting 200 status",
            "keyword": "Given "
          }
        ]
      }
    ],
    "name": "CIS application health scenarios",
    "description": "",
    "id": "cis-application-health-scenarios",
    "keyword": "Feature",
    "uri": "_legacy/admin/application_health.feature",
    "tags": [
      {
        "line": 1,
        "name": "@smoke"
      },
      {
        "line": 2,
        "name": "@applicationHealth"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 20,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save testpartner as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 21,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save 12 as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 22,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save amazon as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 23,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save apple as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 24,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 25,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 26,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save steam as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 27,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save twitch as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 28,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save twitter as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 29,
        "name": "Create a client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;create-a-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 8
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save youtube as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I generate a random UUID as clientId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random UUID as clientSecret",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a createClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 44,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save testpartner as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 45,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save 12 as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 46,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save amazon as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 47,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save apple as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 48,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 49,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 50,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save steam as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save twitch as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save twitter as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get the client config for a restricted or invalid partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;get-the-client-config-for-a-restricted-or-invalid-partner---should-return-unsupported-partner-error;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.post"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save youtube as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getClientConfig.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"scope1\", \"scope2\"]"
                ],
                "line": 38
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 40
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 31,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 67,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save testpartner as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 68,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save 12 as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 69,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save amazon as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 70,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save apple as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 71,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 72,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 73,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save steam as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 74,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save twitch as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 75,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save twitter as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      },
      {
        "line": 76,
        "name": "Delete the client config for a restricted partner - should return unsupported partner error",
        "description": "",
        "id": "client-config---negative-scenarios-for-client-config;delete-the-client-config-for-a-restricted-partner---should-return-unsupported-partner-error;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 57,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.titleConfig.delete"
                ],
                "line": 58
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save youtube as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save ABCD00000_00 as titleId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a deleteClientConfig.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 63
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 55,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@clientConfig"
          }
        ]
      }
    ],
    "name": "client config - negative scenarios for client config",
    "description": "",
    "id": "client-config---negative-scenarios-for-client-config",
    "keyword": "Feature",
    "uri": "_legacy/client_config/client_config_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@clientConfig"
      },
      {
        "line": 2,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 25,
        "name": "I cannot get the account link and partner token with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-expired-access-token-and-invalid-refresh-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1553,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 8,
            "name": "I store a apple link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 185,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 12
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 13
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 4,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 26,
        "name": "I cannot get the account link and partner token with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-expired-access-token-and-invalid-refresh-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1183,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 8,
            "name": "I store a spotify link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 129,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 12
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 13
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 4,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 27,
        "name": "I cannot get the account link and partner token with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-expired-access-token-and-invalid-refresh-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1524,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 8,
            "name": "I store a youtube link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 126,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 12
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 13
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 4,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 28,
        "name": "I cannot get the account link and partner token with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-expired-access-token-and-invalid-refresh-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 953,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 8,
            "name": "I store a twitter link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 12
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 13
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 4,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 29,
        "name": "I cannot get the account link and partner token with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-expired-access-token-and-invalid-refresh-token;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1689,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 8,
            "name": "I store a twitch link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 171,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 12
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 13
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 16
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 4,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 54,
        "name": "I cannot get the account link and partner token with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-empty-refresh-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1690,
              "status": "passed"
            },
            "line": 33,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 35,
            "name": "I store a apple link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 45
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 48
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 49
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 31,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 55,
        "name": "I cannot get the account link and partner token with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-empty-refresh-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1584,
              "status": "passed"
            },
            "line": 33,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 35,
            "name": "I store a spotify link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 45
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 48
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 49
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 31,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 56,
        "name": "I cannot get the account link and partner token with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-empty-refresh-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1298,
              "status": "passed"
            },
            "line": 33,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 35,
            "name": "I store a youtube link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 45
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 48
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 49
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 31,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 57,
        "name": "I cannot get the account link and partner token with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-empty-refresh-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1522,
              "status": "passed"
            },
            "line": 33,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 35,
            "name": "I store a twitter link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 45
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 48
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 49
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 31,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 58,
        "name": "I cannot get the account link and partner token with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-account-link-and-partner-token-with-an-empty-refresh-token;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1476,
              "status": "passed"
            },
            "line": 33,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 34
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 35,
            "name": "I store a twitch link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "[\"foo\", \"bar\"]"
                ],
                "line": 45
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 48
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 49
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 31,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 77,
        "name": "I cannot get the partner token using the SDK API with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-partner-token-using-the-sdk-api-with-an-expired-access-token-and-invalid-refresh-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 585,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 63
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 64,
            "name": "I store a apple link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 65
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 66,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage connectAccount:apple.link.token.get"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 222,
              "status": "passed"
            },
            "line": 68,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 69
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 71
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 72
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 60,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 78,
        "name": "I cannot get the partner token using the SDK API with an expired access token and invalid refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-partner-token-using-the-sdk-api-with-an-expired-access-token-and-invalid-refresh-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 534,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 63
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 64,
            "name": "I store a spotify link with a ttl of 0 :",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "refreshToken",
                  "refresh-token"
                ],
                "line": 65
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 66,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage connectAccount:spotify.link.token.get"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 133,
              "status": "passed"
            },
            "line": 68,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 69
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 71
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 72
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 60,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 96,
        "name": "I cannot get the partner token using the SDK API with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-partner-token-using-the-sdk-api-with-an-empty-refresh-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 497,
              "status": "passed"
            },
            "line": 82,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 83
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 84,
            "name": "I store a apple link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 85,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage connectAccount:apple.link.token.get"
                ],
                "line": 86
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 87,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 88
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 89,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 90
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 91
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 92
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 80,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 97,
        "name": "I cannot get the partner token using the SDK API with an empty refresh token",
        "description": "",
        "id": "account-link-common;i-cannot-get-the-partner-token-using-the-sdk-api-with-an-empty-refresh-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 342,
              "status": "passed"
            },
            "line": 82,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 83
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 84,
            "name": "I store a spotify link with a ttl of 0",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 85,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage connectAccount:spotify.link.token.get"
                ],
                "line": 86
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 87,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 88
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 90
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 91
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 92
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 80,
            "name": "@negative"
          }
        ]
      }
    ],
    "name": "account link common",
    "description": "",
    "id": "account-link-common",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 6,
        "name": "I cannot create an apple account link with an incorrect auth code",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple-mock;i-cannot-create-an-apple-account-link-with-an-incorrect-auth-code",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1328,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I get mock auth code for a partner",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 14
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 15
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I save fakeAuthCode as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 17,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064995"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Partner error"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 23,
        "name": "I cannot create an Apple account link if code is not provided",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple-mock;i-cannot-create-an-apple-account-link-if-code-is-not-provided",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1585,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 25,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 26
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 30
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I remove code from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 33,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 35
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 36
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 39,
        "name": "I cannot get the apple link if the account is not linked with the partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple-mock;i-cannot-get-the-apple-link-if-the-account-is-not-linked-with-the-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1311,
              "status": "passed"
            },
            "line": 40,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 76,
              "status": "passed"
            },
            "line": 41,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 42
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I save apple as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 45,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 47
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 48
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 51,
        "name": "I cannot create a PSN sub-account link to a Apple account",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple-mock;i-cannot-create-a-psn-sub-account-link-to-a-apple-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1569,
              "status": "passed"
            },
            "line": 52,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 53,
            "name": "I generate a random SIGNIN_ID as signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 380,
              "status": "passed"
            },
            "line": 54,
            "name": "I make a createPsnAdultSubAccount.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 55,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 56
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 57,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 59
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 60
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 61,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 62
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 63
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 66,
        "name": "I cannot create account link to Apple if redirect uri is not provided",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple-mock;i-cannot-create-account-link-to-apple-if-redirect-uri-is-not-provided",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1406,
              "status": "passed"
            },
            "line": 67,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 68,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 69
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 71
              },
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 73,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 74,
            "name": "I save code as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 75,
            "name": "I remove redirectUrl from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 76,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 77,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 78
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 79
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "account link - negative scenarios for account linking with Apple mock",
    "description": "",
    "id": "account-link---negative-scenarios-for-account-linking-with-apple-mock",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_apple_mock_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@apple"
      },
      {
        "line": 3,
        "name": "@mock"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 5,
        "name": "I cannot create apple account link with incorrect auth code",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple;i-cannot-create-apple-account-link-with-incorrect-auth-code",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1197,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save me as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 11
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 12
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 14,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I save fakeAuthCode as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 234,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a createAccountLink.json request expecting 500 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 19
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 20
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 22,
        "name": "I cannot create an account link if an authorization code is not provided",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple;i-cannot-create-an-account-link-if-an-authorization-code-is-not-provided",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1388,
              "status": "passed"
            },
            "line": 23,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I save me as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 25,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 26
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I save apple as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I remove code from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 30,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 32
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 33
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 36,
        "name": "I cannot get the account link if the account is not linked with the partner apple",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple;i-cannot-get-the-account-link-if-the-account-is-not-linked-with-the-partner-apple",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1417,
              "status": "passed"
            },
            "line": 37,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I save me as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 39,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 40
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save apple as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 48,
        "name": "I cannot create a PSN sub-account link to a Apple account",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple;i-cannot-create-a-psn-sub-account-link-to-a-apple-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1520,
              "status": "passed"
            },
            "line": 49,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2,
              "status": "passed"
            },
            "line": 50,
            "name": "I generate a random SIGNIN_ID as signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 370,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a createPsnAdultSubAccount.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 52,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 53
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 54,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 55
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 56
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 57,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 58
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 59
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 60
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 62,
        "name": "I cannot create account link to Apple if redirect uri is not provided",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-apple;i-cannot-create-account-link-to-apple-if-redirect-uri-is-not-provided",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1391,
              "status": "passed"
            },
            "line": 63,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 64,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 65
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 67
              },
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I save code as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I remove redirectUrl from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 72,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 73,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 74
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 75
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 76
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "account link - negative scenarios for account linking with Apple",
    "description": "",
    "id": "account-link---negative-scenarios-for-account-linking-with-apple",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_apple_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@apple"
      }
    ]
  },
  {
    "line": 5,
    "elements": [
      {
        "line": 127,
        "name": "Get partner authorize url with redirect url overwrite",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-twitter;get-partner-authorize-url-with-redirect-url-overwrite",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1444,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 129,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 130
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 131,
            "name": "I save conf(\u0027twitterRedirectUrl\u0027)\u0027?test\u003dcis_cuke\u0027 as redirectUri",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 422,
              "status": "passed"
            },
            "line": 132,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 135,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "https://api.twitter.com/oauth/authorize?oauth_token\u003d"
                ],
                "line": 137
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I verify that body.redirectUri in response contains:",
            "rows": [
              {
                "cells": [
                  "ctx(\u0027redirect_url\u0027)\u0027?test\u003dcis_cuke\u0027"
                ],
                "line": 139
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "account link - positive scenarios for account linking with Twitter",
    "description": "",
    "id": "account-link---positive-scenarios-for-account-linking-with-twitter",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_twitter.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@twitter"
      },
      {
        "line": 3,
        "name": "@unsupportedP1-PQA"
      },
      {
        "line": 4,
        "name": "@unsupportedP1-PMGT"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 6,
        "name": "I cannot create a PSN sub-account link to a twitter account",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-twitter;i-cannot-create-a-psn-sub-account-link-to-a-twitter-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1324,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2,
              "status": "passed"
            },
            "line": 8,
            "name": "I generate a random SIGNIN_ID as signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createPsnAdultSubAccount.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 10,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 11
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 12,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 13
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 14
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 21,
        "name": "Get partner authorize url with redirect url overwrite",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-twitter;get-partner-authorize-url-with-redirect-url-overwrite",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1211,
              "status": "passed"
            },
            "line": 22,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 23,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 24
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 142,
              "status": "passed"
            },
            "line": 25,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 26
              },
              {
                "cells": [
                  "redirectUri",
                  "https://example.com"
                ],
                "line": 27
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify that statusCode in response matches 400",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 30
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 31
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 32
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "account link - negative scenarios for account linking with Twitter",
    "description": "",
    "id": "account-link---negative-scenarios-for-account-linking-with-twitter",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_twitter_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@twitter"
      },
      {
        "line": 3,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 4,
        "name": "Get Country Config with invalid country code - should return 200 and the response body will be empty",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-invalid-country-code---should-return-200-and-the-response-body-will-be-empty",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 5,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "rows": [
              {
                "cells": [
                  "country",
                  "XX"
                ],
                "line": 6
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 7
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 9,
            "name": "I verify that body.partners in response is empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ]
      },
      {
        "line": 23,
        "name": "Get Country Config with invalid country code that does not match the regex pattern - should return 400 error response",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-invalid-country-code-that-does-not-match-the-regex-pattern---should-return-400-error-response;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getCountryConfig.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "longCountryCode"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          }
        ]
      },
      {
        "line": 24,
        "name": "Get Country Config with invalid country code that does not match the regex pattern - should return 400 error response",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-invalid-country-code-that-does-not-match-the-regex-pattern---should-return-400-error-response;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getCountryConfig.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "s2s"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          }
        ]
      },
      {
        "line": 41,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 42,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "DE"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 43,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "JA"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 44,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NY"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 45,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AU"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 46,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NZ"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 47,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IE"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 48,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PL"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 49,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PM"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 50,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PT"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PY"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "QA"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "RO"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 54,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;15",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "RU"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;16",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SA"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 56,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;17",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SE"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 57,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;18",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SG"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 58,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;19",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PE"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 59,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;20",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 60,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;21",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AT"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 61,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;22",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BE"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 62,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;23",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BG"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 63,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;24",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BH"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 64,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;25",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BO"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 65,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;26",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;27",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CA"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;28",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CH"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 68,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;29",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CL"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 69,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;30",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CN"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;31",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CO"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;32",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;33",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CY"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 73,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;34",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CZ"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 74,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;35",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "DK"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 75,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;36",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "EC"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 76,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;37",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ED"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 77,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;38",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ES"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 78,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;39",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "FI"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 79,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;40",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "FR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 80,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;41",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GB"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 81,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;42",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 82,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;43",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GT"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 83,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;44",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HK"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 84,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;45",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HN"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 85,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;46",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 86,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;47",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HU"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 87,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;48",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ID"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 88,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;49",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IL"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 89,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;50",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IN"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 90,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;51",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IS"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 91,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;52",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IT"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 92,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;53",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "JP"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 93,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;54",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "KR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 94,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;55",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "KW"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 95,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;56",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "LB"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 96,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;57",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "LU"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 97,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;58",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MT"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 98,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;59",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MX"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 99,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;60",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MY"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 100,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;61",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NI"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 101,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;62",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NL"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 102,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;63",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NO"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 103,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;64",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SI"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 104,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;65",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SK"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 105,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;66",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SV"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 106,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;67",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TH"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 107,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;68",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TR"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 108,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;69",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TW"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 109,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;70",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "UA"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 110,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;71",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "UY"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 111,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;72",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ZA"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 112,
        "name": "Get Country Config with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---negative-scenarios-for-country-config;get-country-config-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin;;73",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a getCountryConfigWithOriginHeader.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AE"
                ],
                "line": 29
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "X-ErrorCode",
                  "cis:4003"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that the json array body in response has 1 elements and contains:",
            "rows": [
              {
                "comments": [
                  {
                    "line": 35,
                    "value": "# there is a bug in the rex step dealing with json arrays that cuts off the last character of the field name"
                  },
                  {
                    "line": 36,
                    "value": "# so need to add an extra character (it ignores last character, so \"code:\" is read in as \"code\""
                  }
                ],
                "cells": [
                  "code:",
                  "4003"
                ],
                "line": 37
              },
              {
                "cells": [
                  "namespace:",
                  "cis"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 26,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "country config - negative scenarios for country config",
    "description": "",
    "id": "country-config---negative-scenarios-for-country-config",
    "keyword": "Feature",
    "uri": "countryConfig/read/getCountryConfigNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@getCountryConfigApi"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 279,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,disableOA,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 280,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "DE"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 281,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "JA"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,nicolive,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 282,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NY"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,twitter,discord,youtube,spotify,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 283,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AU"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 284,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NZ"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 285,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IE"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 286,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PL"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 287,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PM"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,discord,twitter,youtube,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 288,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PT"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 289,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PY"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 290,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "QA"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,spotify,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 291,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "RO"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 292,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;15",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "RU"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 293,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;16",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SA"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 294,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;17",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SE"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 295,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;18",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SG"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 296,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;19",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PE"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 297,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;20",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 298,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;21",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AT"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 299,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;22",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BE"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 300,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;23",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BG"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 301,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;24",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BH"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 302,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;25",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BO"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 303,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;26",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 304,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;27",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CA"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 305,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;28",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CH"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 306,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;29",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CL"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 307,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;30",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CN"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 308,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;31",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CO"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 309,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;32",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 310,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;33",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CY"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 311,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;34",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CZ"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 312,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;35",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "DK"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 313,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;36",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "EC"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 314,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;37",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ED"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,discord,twitter,youtube,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 315,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;38",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ES"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 316,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;39",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "FI"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 317,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;40",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "FR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 318,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;41",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GB"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 319,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;42",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 320,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;43",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GT"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 321,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;44",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HK"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 322,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;45",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HN"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 323,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;46",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,spotify,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 324,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;47",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HU"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 325,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;48",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ID"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,spotify,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 326,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;49",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IL"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 327,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;50",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IN"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 328,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;51",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IS"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 329,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;52",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IT"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 330,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;53",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "JP"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,nicolive,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 331,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;54",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "KR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,spotify,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 332,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;55",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "KW"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 333,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;56",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "LB"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 334,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;57",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "LU"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 335,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;58",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MT"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 336,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;59",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MX"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 337,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;60",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MY"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 338,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;61",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NI"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 339,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;62",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NL"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 340,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;63",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NO"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 341,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;64",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SI"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 342,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;65",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SK"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 343,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;66",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SV"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 344,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;67",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TH"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,steam,disableOA,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 345,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;68",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TR"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 346,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;69",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TW"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 347,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;70",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "UA"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 348,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;71",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "UY"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 349,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;72",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ZA"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 350,
        "name": "Get Country Config with valid country code - should return available partners supported by country (non-prod only)",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-valid-country-code---should-return-available-partners-supported-by-country-(non-prod-only);;73",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 270,
            "name": "I make a getCountryConfigWithOriginHeader.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AE"
                ],
                "line": 271
              },
              {
                "cells": [
                  "origin",
                  "\u003cconf(\u0027podracerOrigin\u0027)\u003e"
                ],
                "line": 272
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 273,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 274,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 265,
            "name": "@smoke"
          },
          {
            "line": 267,
            "name": "@unsupportedP1-PL"
          },
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 268,
            "name": "@cors"
          },
          {
            "line": 266,
            "name": "@unsupportedP1-NP"
          }
        ]
      },
      {
        "line": 362,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,disableOA,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 363,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "DE"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 364,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "JA"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,nicolive,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 365,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NY"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,twitter,discord,youtube,spotify,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 366,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AU"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 367,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NZ"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 368,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IE"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 369,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PL"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,steam,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 370,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PM"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,discord,twitter,youtube,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 371,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PT"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 372,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PY"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 373,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "QA"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,spotify,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 374,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "RO"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 375,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;15",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "RU"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 376,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;16",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SA"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 377,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;17",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SE"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 378,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;18",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SG"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 379,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;19",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "PE"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 380,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;20",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 381,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;21",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AT"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 382,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;22",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BE"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 383,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;23",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BG"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 384,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;24",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BH"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 385,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;25",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BO"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 386,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;26",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "BR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 387,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;27",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CA"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 388,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;28",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CH"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 389,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;29",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CL"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 390,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;30",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CN"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 391,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;31",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CO"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 392,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;32",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 393,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;33",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CY"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 394,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;34",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "CZ"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 395,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;35",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "DK"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 396,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;36",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "EC"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 397,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;37",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ED"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,discord,twitter,youtube,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 398,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;38",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ES"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 399,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;39",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "FI"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 400,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;40",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "FR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 401,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;41",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GB"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 402,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;42",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 403,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;43",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "GT"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 404,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;44",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HK"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 405,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;45",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HN"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 406,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;46",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,spotify,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 407,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;47",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "HU"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 408,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;48",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ID"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,spotify,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 409,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;49",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IL"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 410,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;50",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IN"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 411,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;51",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IS"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 412,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;52",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "IT"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 413,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;53",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "JP"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,nicolive,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 414,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;54",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "KR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,spotify,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 415,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;55",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "KW"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 416,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;56",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "LB"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 417,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;57",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "LU"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 418,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;58",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MT"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 419,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;59",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MX"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 420,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;60",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "MY"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 421,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;61",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NI"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 422,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;62",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NL"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 423,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;63",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "NO"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 424,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;64",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SI"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 425,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;65",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SK"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 426,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;66",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "SV"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 427,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;67",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TH"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,steam,disableOA,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 428,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;68",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TR"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 429,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;69",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "TW"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 430,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;70",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "UA"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 431,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;71",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "UY"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 432,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;72",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "ZA"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,steam,esl,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 433,
        "name": "Get Country Config with no origin header - should return correct CORS headers and should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-no-origin-header---should-return-correct-cors-headers-and-should-not-return-access-control-allow-origin;;73",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 354,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "AE"
                ],
                "line": 355
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 356,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,twitch,esl,steam,spotify,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 352,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 443,
        "name": "Get Country Config with mixed case country code - should return available partners supported by country",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-mixed-case-country-code---should-return-available-partners-supported-by-country;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 436,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 437
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 438,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 439,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,disableOA,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          }
        ]
      },
      {
        "line": 444,
        "name": "Get Country Config with mixed case country code - should return available partners supported by country",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-mixed-case-country-code---should-return-available-partners-supported-by-country;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 436,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "Us"
                ],
                "line": 437
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 438,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 439,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,disableOA,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          }
        ]
      },
      {
        "line": 445,
        "name": "Get Country Config with mixed case country code - should return available partners supported by country",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-mixed-case-country-code---should-return-available-partners-supported-by-country;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 436,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "us"
                ],
                "line": 437
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 438,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 439,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,disableOA,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          }
        ]
      },
      {
        "line": 446,
        "name": "Get Country Config with mixed case country code - should return available partners supported by country",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-with-mixed-case-country-code---should-return-available-partners-supported-by-country;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 436,
            "name": "I make a getCountryConfig.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "uS"
                ],
                "line": 437
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 438,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 439,
            "name": "I verify that body.partners in response contains amazon,apple,discord,twitter,youtube,spotify,twitch,esl,disableOA,steam,testbidirectionalpartner",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          }
        ]
      },
      {
        "line": 449,
        "name": "Get Country Config valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-valid-cors-pre-flight-request---should-return-all-cors-response-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 450,
            "name": "I make a getCountryConfigCors.json request:",
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 451
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 452
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 453
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 454
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 455,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 448,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 458,
        "name": "Get Country Config valid CORS Pre-Flight request with unsupported origin - should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-valid-cors-pre-flight-request-with-unsupported-origin---should-not-return-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 459,
            "name": "I make a getCountryConfigCors.json request:",
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 460
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 461
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 462
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 463
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 464,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 457,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 476,
            "value": "# invalid header (Invalid-Header is not a valid header used in PSN services)"
          }
        ],
        "line": 477,
        "name": "Get Country Config valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 468,
            "name": "I make a getCountryConfigCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 469
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 470
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Invalid-Header, X-Psn-Platform, X-Psn-Request-Id,X-Psn-Sampled,X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 471
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 472
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 473,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 466,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 478,
            "value": "# unsupported header (X-Correlation-Id is a valid header used in PSN services but is not a supported header for CIS for access control"
          }
        ],
        "line": 479,
        "name": "Get Country Config valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 468,
            "name": "I make a getCountryConfigCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 469
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 470
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "X-Correlation-Id, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 471
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 472
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 473,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getCountryConfigApi"
          },
          {
            "line": 466,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 482,
        "name": "Get Country Config valid CORS Pre-Flight request with invalid access control request method - should not return Access-Control-Allow-Methods",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-valid-cors-pre-flight-request-with-invalid-access-control-request-method---should-not-return-access-control-allow-methods",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 483,
            "name": "I make a getCountryConfigCors.json request:",
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 484
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 485
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 486
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 487
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 488,
            "name": "I verify all CORS headers in response for options call with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 481,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 491,
        "name": "Get Country Config valid CORS Pre-Flight request with no access control or origin headers - should not return Access-Control-Allow-Origin, Access-Control-Allow-Methods, or Access-Control-Allow-Headers",
        "description": "",
        "id": "country-config---positive-scenarios-for-country-config;get-country-config-valid-cors-pre-flight-request-with-no-access-control-or-origin-headers---should-not-return-access-control-allow-origin,-access-control-allow-methods,-or-access-control-allow-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 492,
            "name": "I make a getCountryConfigCorsNoHeaders.json request:",
            "rows": [
              {
                "cells": [
                  "country",
                  "US"
                ],
                "line": 493
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 494,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 490,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "country config - positive scenarios for country config",
    "description": "",
    "id": "country-config---positive-scenarios-for-country-config",
    "keyword": "Feature",
    "uri": "countryConfig/read/getCountryConfigPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@getCountryConfigApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 24,
        "name": "Get partner authorize url with state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-with-state;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1576,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 9
              },
              {
                "cells": [
                  "format",
                  "opaque"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 12
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 13
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 18
              },
              {
                "cells": [
                  "state\u003d1234567890"
                ],
                "line": 19
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that body.state in response contains:",
            "rows": [
              {
                "cells": [
                  "1234567890"
                ],
                "line": 21
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 25,
        "name": "Get partner authorize url with state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-with-state;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 990,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 9
              },
              {
                "cells": [
                  "format",
                  "jwt"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 12
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 13
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 18
              },
              {
                "cells": [
                  "state\u003d1234567890"
                ],
                "line": 19
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that body.state in response contains:",
            "rows": [
              {
                "cells": [
                  "1234567890"
                ],
                "line": 21
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 27,
        "name": "Get partner authorize url with redirect url overwrite",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-with-redirect-url-overwrite",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1660,
              "status": "passed"
            },
            "line": 28,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 29,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 30
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 31,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 32
              },
              {
                "cells": [
                  "redirectUri",
                  "https://example.com"
                ],
                "line": 33
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fexample.com"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 56,
        "name": "Get partner authorize url with console tokens",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-with-console-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1357,
              "status": "passed"
            },
            "line": 41,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I save eyJhbGciOiJSUzI1NiJ9.eyJhIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFFQT09IiwidmVyIjoxLCJiIjoicTJxMWhHRVpRc1wvNzFDQXUydjdWZEU2VGljQjdsRGgySE1IR3pPaVJ0NVk9Iiwic3YiOiIwLjgwMC4wMDAiLCJhdCI6MSwiYyI6Ikk3OTZSdlBMM01FRG5tSityWHpvRVRJNHZWTTRDMndnckNrTnhreDl2RmxKZVU5K3RSME05VlU2VlE1N2dGXC9LIiwiZCI6IkNnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvPSIsInBmIjoicHM0IiwibnBlbnYiOiJlMS1ucCIsImV4cCI6MzE4NjcwNjI2NiwicHJuIjoiY3QiLCJpYXQiOjE2MDk5MDYyNjZ9.ZFEvtir0S03KmgJuSwz9PzlMWuzw5gdW0GsCLC__VsLWoNnELD-52tWqUs21fnmjUO66Gk-tC7LKp59yItfo_J9nGqgg6XULUMs-9IdoIrdOw5N2V0H6VO459_lGAmLPHUxgQMr_PDG5SGghfxJ5HsvXecxsjRfr24FJh7DUi9zRVXhszH4y6XbDKkQoyisMwXWnA7dkvqXKFVL9zrue9GfZpUS7uaH2S121yohJ14LQbGXqhrlY58z74aWhrf43J2ufkgLaUg35D8p6w7L_qoAs67oWZqSxuNEJb_2tKsRQqYTsStKMhwMJTUrkD3tXoPxc4whRbn6oWVILCJiQ-Q as console_token",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 87,
              "status": "passed"
            },
            "line": 43,
            "name": "I get a password token for the account with a console token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 44
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 45,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 50,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 51
              },
              {
                "cells": [
                  "apple_model\u003dPlayStation5"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 53,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 57,
        "name": "Get partner authorize url with console tokens",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-with-console-tokens;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1377,
              "status": "passed"
            },
            "line": 41,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I save eyJhbGciOiJSUzI1NiJ9.eyJhIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09IiwidmVyIjoxLCJiIjoidFBnTStkeGl0bWdCN2pNOG8xUmNnUT09Iiwic3YiOiIxLjUwMC4wMCIsImF0IjoxLCJjIjoiOVBDVExvbUY4cHFRZFU0M2ZkT1FvS1l6SDd3SXlmYXFJQ1hVTCtOemZ5VmR3VnRUczlUWEoycTYwWXR4MUNieCIsImQiOiJtb1hyYmtDb2tLT1lcLzZMbXlGM2JMY2Zpd1NDTnROV25ob2FNOFN3UHZwTkpZbnU2aDVESVluOWZSZUJLckZRQUFBQUFBd0FBQUFBQUFBQUFBQUFBQU5vTURwcEp4Q1dXK2VJQTZUWkRvV2Y0Y2huZ2RHVGUzeW4yd011U0ZtaFQ5eXdYM3ZBbmJQdUY3UlpuZHlFM0ZWQ1VhYkhrN3hUTXhjRmNodndwZDNscWZVaFpPQnVBSmg1WGhaRDJldjJKN1Q3cmF5U2tnYnpQTWR6WFwvZ2dsTE9COTBPaFcwdWdYUDdQRURKdjI2YVNEWGJlOVZUb09YS01wT0x6XC85VWZCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVCQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBZ2lDUVF6cXJWN2RiK2JFOEN1UVVYcStxMmVDWWVYNjNDVFljMFBCNWFlb0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0iLCJwZiI6InBzNSIsIm5wZW52IjoiZTEtbnAiLCJleHAiOjE3NTkyNzY4MDAsInBybiI6ImN0IiwiaWF0IjoxNjEwNDkyMDU2fQ.DuVmL8jEefXkhpUaVa6T-hKH1Exy0poe27nyflxThAaU8PJ40F50-v8GKcAbXeKKjeflrZv8WE57LOgTeOnsOVh8O5r7x6zcttXOtrfGI6HUOYoe1bO4BPSEnL7ioEh_Blm5TO8t_mScs9SsiM22XJ5_MC-3UWq_b2_cOpQVjoVMA6sZhF1ZDHMZpMTOu2uyC4DkBzlG08KsIPFyyCYrIpYZS5reu67se6wCNZVMiiikUWTxss5grLihzdCdvUFL2qocurG1Sp0F_159WPyk05OfuZF95N3SXBSyGKQBjv77UufNQNWnEBeku7071MrH6Mnow7jN3Z4XY5eOgbzAvA as console_token",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 43,
            "name": "I get a password token for the account with a console token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 44
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 45,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 46
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 50,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 51
              },
              {
                "cells": [
                  "apple_model\u003dPlayStation5"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 53,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@apple"
          }
        ]
      },
      {
        "line": 59,
        "name": "Get partner authorize url without providing state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-without-providing-state",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1313,
              "status": "passed"
            },
            "line": 60,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 61,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 62
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I remove state from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 64,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 65
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 66,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 71
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 102,
        "name": "I can create, get, and delete a PSN account link to an Apple account and get the partner token with a user PSN access token",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;i-can-create,-get,-and-delete-a-psn-account-link-to-an-apple-account-and-get-the-partner-token-with-a-user-psn-access-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1529,
              "status": "passed"
            },
            "line": 75,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 77,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 78,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 79
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 80,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 81
              },
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 82
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 83,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 84,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 85,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 86,
            "name": "I save mockAppleAuthCode as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 87,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 88,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I verify that body.partnerAccountId in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 91
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 93,
            "name": "I make a getPartnerToken.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 94
              },
              {
                "cells": [
                  "scopes",
                  "music"
                ],
                "line": 95
              },
              {
                "cells": [
                  "accessToken",
                  "mockAppleAccessToken[0-9]{0,40}"
                ],
                "line": 96
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I verify that body.accessToken in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 98,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 99,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@apple"
          },
          {
            "line": 73,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 103,
        "name": "I can create, get, and delete a PSN account link to an Apple account and get the partner token with a user PSN access token",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;i-can-create,-get,-and-delete-a-psn-account-link-to-an-apple-account-and-get-the-partner-token-with-a-user-psn-access-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1406,
              "status": "passed"
            },
            "line": 75,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 77,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 78,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 79
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 80,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 81
              },
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 82
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 83,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 84,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 85,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 86,
            "name": "I save mockAppleAuthCode as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 93,
              "status": "passed"
            },
            "line": 87,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 88,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I verify that body.partnerAccountId in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 91
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 93,
            "name": "I make a getPartnerToken.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 94
              },
              {
                "cells": [
                  "scopes",
                  "music"
                ],
                "line": 95
              },
              {
                "cells": [
                  "accessToken",
                  "mockAppleAccessToken[0-9]{0,40}"
                ],
                "line": 96
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I verify that body.accessToken in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 98,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 99,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@apple"
          },
          {
            "line": 73,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 106,
        "name": "I can link multiple accounts and if I unlink an Apple account for a PSN account, other associated PSN accounts should get the tokens till expiry even if the tokens are invalid",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;i-can-link-multiple-accounts-and-if-i-unlink-an-apple-account-for-a-psn-account,-other-associated-psn-accounts-should-get-the-tokens-till-expiry-even-if-the-tokens-are-invalid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1518,
              "status": "passed"
            },
            "line": 107,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 109,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 110
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I save ctx(\u0027accessToken\u0027) as accessTokenToDelete",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I save ctx(\u0027accountId\u0027) as accountToDelete",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 114,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I save mockAppleAuthCode1 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 116,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a createAccountLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 119,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 120,
            "name": "I verify that body.partnerAccountId in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 358,
              "status": "passed"
            },
            "line": 121,
            "name": "I have created a new PSN account",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 122,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 123
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 124,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 125
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 126
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 127,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 128,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 129,
            "name": "I save mockAppleAuthCode2 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 130,
            "name": "I make a createAccountLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 131
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 132,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 133,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I save ctx(\u0027accountToDelete\u0027) as accountId",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 135,
            "name": "I save ctx(\u0027accessTokenToDelete\u0027) as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 136,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 137,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 105,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 139,
        "name": "Get partner authorize url for apple using S2S token",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;get-partner-authorize-url-for-apple-using-s2s-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1606,
              "status": "passed"
            },
            "line": 140,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 141,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 142,
            "name": "I make a getClientCredentialsToken.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 143,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "response_type\u003dcode"
                ],
                "line": 147
              },
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 148
              },
              {
                "cells": [
                  "scope\u003dmusic"
                ],
                "line": 149
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 150,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ]
      },
      {
        "line": 153,
        "name": "I can create, get, and delete a PSN account link to an Apple account and get the partner token with a client PSN access token",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock;i-can-create,-get,-and-delete-a-psn-account-link-to-an-apple-account-and-get-the-partner-token-with-a-client-psn-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 429,
              "status": "passed"
            },
            "line": 154,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 155,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 156,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 157,
            "name": "I make a getClientCredentialsToken.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 158,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 159
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 160,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "response_type\u003dcode"
                ],
                "line": 162
              },
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 163
              },
              {
                "cells": [
                  "scope\u003dmusic"
                ],
                "line": 164
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 165,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 166,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 167,
            "name": "I save conf(\u0027appleRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I save mockAppleAuthCode as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 169,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 170,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 171,
            "name": "I verify that body.partnerAccountId in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 172,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 173
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 174,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 175,
            "name": "I make a getPartnerToken.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 176
              },
              {
                "cells": [
                  "accessToken",
                  "mockAppleAccessToken[0-9]{0,40}"
                ],
                "line": 177
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 178,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 152,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "account link - positive scenarios for account linking with Apple mock",
    "description": "",
    "id": "account-link---positive-scenarios-for-account-linking-with-apple-mock",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_apple_mock.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@apple"
      },
      {
        "line": 3,
        "name": "@mock"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 19,
        "name": "Device code polling errors",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow-mock;device-code-polling-errors;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 821,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 8
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save apple-device-code-pending as code",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              3,
              4
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@mock"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 20,
        "name": "Device code polling errors",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow-mock;device-code-polling-errors;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 823,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 8
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save apple-device-code-expired as code",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              3,
              4
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064987"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Device code has expired"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@mock"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 21,
        "name": "Device code polling errors",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow-mock;device-code-polling-errors;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 439,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 8
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save apple-device-code-access-denied as code",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              3,
              4
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064990"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Invalid device code"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@mock"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 22,
        "name": "Device code polling errors",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow-mock;device-code-polling-errors;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 8
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save apple-device-code-slow-down as code",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              3,
              4
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064988"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Device is polling too frequently"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@mock"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      }
    ],
    "name": "device code flow - negative scenarios for device code flow mock",
    "description": "",
    "id": "device-code-flow---negative-scenarios-for-device-code-flow-mock",
    "keyword": "Feature",
    "uri": "_legacy/device_code/device_code_negative_mock.feature",
    "tags": [
      {
        "line": 1,
        "name": "@deviceCode"
      },
      {
        "line": 2,
        "name": "@mock"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 19,
        "name": "I can get device codes for supported partners",
        "description": "",
        "id": "device-code-flow---positive-scenarios-for-device-code-flow;i-can-get-device-codes-for-supported-partners;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 376,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 90,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.userCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.verificationUri in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.expiresIn in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.pollingInterval in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 20,
        "name": "I can get device codes for supported partners",
        "description": "",
        "id": "device-code-flow---positive-scenarios-for-device-code-flow;i-can-get-device-codes-for-supported-partners;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 854,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 137,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.userCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.verificationUri in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.expiresIn in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.pollingInterval in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 21,
        "name": "I can get device codes for supported partners",
        "description": "",
        "id": "device-code-flow---positive-scenarios-for-device-code-flow;i-can-get-device-codes-for-supported-partners;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 814,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.userCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.verificationUri in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.expiresIn in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.pollingInterval in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 22,
        "name": "I can get device codes for supported partners",
        "description": "",
        "id": "device-code-flow---positive-scenarios-for-device-code-flow;i-can-get-device-codes-for-supported-partners;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 828,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.userCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.verificationUri in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.expiresIn in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.pollingInterval in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 23,
        "name": "I can get device codes for supported partners",
        "description": "",
        "id": "device-code-flow---positive-scenarios-for-device-code-flow;i-can-get-device-codes-for-supported-partners;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 525,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 433,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.userCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.verificationUri in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.expiresIn in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.pollingInterval in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 24,
        "name": "I can get device codes for supported partners",
        "description": "",
        "id": "device-code-flow---positive-scenarios-for-device-code-flow;i-can-get-device-codes-for-supported-partners;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 455,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 582,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.userCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.verificationUri in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.expiresIn in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body.pollingInterval in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      }
    ],
    "name": "device code flow - positive scenarios for device code flow",
    "description": "",
    "id": "device-code-flow---positive-scenarios-for-device-code-flow",
    "keyword": "Feature",
    "uri": "_legacy/device_code/device_code.feature",
    "tags": [
      {
        "line": 1,
        "name": "@deviceCode"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 18,
        "name": "Create a quick link for a restricted or invalid partner - should return an unsupported partner error",
        "description": "",
        "id": "create-quick-link-with-partner-tokens-api---negative-scenarios;create-a-quick-link-for-a-restricted-or-invalid-partner---should-return-an-unsupported-partner-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 546,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save testpartner as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I save \"test:scope\" as scopes",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 12,
            "name": "I make a createAccountQuickLink.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 15
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@quickLinkApi"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 19,
        "name": "Create a quick link for a restricted or invalid partner - should return an unsupported partner error",
        "description": "",
        "id": "create-quick-link-with-partner-tokens-api---negative-scenarios;create-a-quick-link-for-a-restricted-or-invalid-partner---should-return-an-unsupported-partner-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save 12 as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I save \"test:scope\" as scopes",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 12,
            "name": "I make a createAccountQuickLink.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 15
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@quickLinkApi"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 24,
        "name": "Create a quick link for a restricted or invalid partner - should return an unsupported partner error",
        "description": "",
        "id": "create-quick-link-with-partner-tokens-api---negative-scenarios;create-a-quick-link-for-a-restricted-or-invalid-partner---should-return-an-unsupported-partner-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 455,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save steam as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I save \"test:scope\" as scopes",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 12,
            "name": "I make a createAccountQuickLink.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 15
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@quickLinkApi"
          },
          {
            "line": 5,
            "name": "@apiFilterByPartner"
          }
        ]
      }
    ],
    "name": "Create quick link with partner tokens Api - Negative scenarios",
    "description": "",
    "id": "create-quick-link-with-partner-tokens-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/create/oauth2/quickLinkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@quickLinkApi"
      },
      {
        "line": 2,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 5,
        "name": "Create account link missing required parameters fails validation check",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;create-account-link-missing-required-parameters-fails-validation-check",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 857,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 7,
            "name": "I make a createAccountLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 8
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 11
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 12
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 15,
        "name": "Create account link with wrong scopes fails invalid authorization. requestId in response",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;create-account-link-with-wrong-scopes-fails-invalid-authorization.-requestid-in-response",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1341,
              "status": "passed"
            },
            "line": 16,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I generate a random UUID as requestId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 20,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 21
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 22,
            "name": "I make a createAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 23
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 24
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 26
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 27
              },
              {
                "cells": [
                  "referenceId",
                  "ctx(\u0027requestId\u0027)"
                ],
                "line": 28
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 31,
        "name": "Create account link with valid redirect url but invalid scopes returns 403 with invalid authorization",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;create-account-link-with-valid-redirect-url-but-invalid-scopes-returns-403-with-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 383,
              "status": "passed"
            },
            "line": 32,
            "name": "I remove existing links for spotify test account",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1193,
              "status": "passed"
            },
            "line": 33,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 34,
            "name": "I make a createAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 35
              },
              {
                "cells": [
                  "code",
                  "ABCD"
                ],
                "line": 36
              },
              {
                "cells": [
                  "redirectUrl",
                  "orbis://games"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 40
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 30,
            "name": "@spotifyApp"
          }
        ]
      },
      {
        "line": 42,
        "name": "Create account link with wrong scopes fails invalid authorization. no requestId defaults value in response",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;create-account-link-with-wrong-scopes-fails-invalid-authorization.-no-requestid-defaults-value-in-response",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1117,
              "status": "passed"
            },
            "line": 43,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 45,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 46,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 47
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 48,
            "name": "I make a createAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 49
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 50
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 52
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 53
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 54
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 70,
        "name": "Get non-existing link, valid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-link,-valid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1369,
              "status": "passed"
            },
            "line": 58,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 60,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 62,
            "name": "I make a getAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 63
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 64,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 65
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 66
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 67
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get non-existing link, valid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-link,-valid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1322,
              "status": "passed"
            },
            "line": 58,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 60,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 62,
            "name": "I make a getAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 63
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 64,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 65
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 66
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 67
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 73,
        "name": "Get non-existing link when partner id is valid",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-link-when-partner-id-is-valid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1395,
              "status": "passed"
            },
            "line": 74,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 75,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 76
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 77,
            "name": "I make a getAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 78
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 80
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 81
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 82
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 97,
        "name": "Get non-existing link, invalid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-link,-invalid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 829,
              "status": "passed"
            },
            "line": 85,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 86,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 87,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 88
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 89,
            "name": "I make a getAccountLink.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 90
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064979"
                ],
                "line": 92
              },
              {
                "cells": [
                  "message",
                  "Partner metadata not available"
                ],
                "line": 93
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 94
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 98,
        "name": "Get non-existing link, invalid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-link,-invalid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1550,
              "status": "passed"
            },
            "line": 85,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 86,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 87,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 88
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 89,
            "name": "I make a getAccountLink.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 90
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064979"
                ],
                "line": 92
              },
              {
                "cells": [
                  "message",
                  "Partner metadata not available"
                ],
                "line": 93
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 94
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 116,
        "name": "I cannot create an account link with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-invalid-access-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1158,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 104,
            "name": "I save foobar089012984 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a createAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 108
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 109
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 110,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 111
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 112
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 113
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 117,
        "name": "I cannot create an account link with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-invalid-access-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 702,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 104,
            "name": "I save foobar089012984 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a createAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 108
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 109
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 110,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 111
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 112
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 113
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 119,
        "name": "I cannot create an account link with an access token with a different scope",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-access-token-with-a-different-scope",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 834,
              "status": "passed"
            },
            "line": 120,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 121,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 122,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 123,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 124
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 125,
            "name": "I make a createAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 126
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 127
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 128,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 129
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 130
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 131
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 133,
        "name": "I cannot create an account link with an access token for a different account",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-access-token-for-a-different-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 527,
              "status": "passed"
            },
            "line": 134,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 135,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 137,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 138
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 390,
              "status": "passed"
            },
            "line": 139,
            "name": "I have created a new PSN account",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a createAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 141
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 142
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 145
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 146
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 148,
        "name": "I cannot create an account link with a client credentials access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-a-client-credentials-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 149,
            "name": "I save me as accountId",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 150,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 151,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 152,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 153
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 154,
            "name": "I make a createAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 155
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 156
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 157,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 158
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 159
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 160
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 162,
        "name": "I cannot create an account link when a partner is not supported by a country",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-when-a-partner-is-not-supported-by-a-country",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 421,
              "status": "passed"
            },
            "line": 163,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 165,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 166,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 167
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 168,
            "name": "I make a createAccountLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 169
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 170
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 171,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064967"
                ],
                "line": 172
              },
              {
                "cells": [
                  "message",
                  "Partner not supported by country"
                ],
                "line": 173
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 174
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 176,
        "name": "I cannot create an account link with an invalid account id",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-invalid-account-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 524,
              "status": "passed"
            },
            "line": 177,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 178,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 179,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 180,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 181
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 182,
            "name": "I generate a random ACCOUNT_ID as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 183,
            "name": "I make a createAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 184
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 185
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 187
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 188
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 189
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 191,
        "name": "I cannot create an account link with a non existent account id",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-a-non-existent-account-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 192,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 193,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 194,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 195,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 196
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 197,
            "name": "I save 12098123409871234 as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 198,
            "name": "I make a createAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 199
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 200
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 201,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 202
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 203
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 204
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 206,
        "name": "I cannot create an account link with a valid partner id for a different country",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-a-valid-partner-id-for-a-different-country",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 207,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 208,
            "name": "I save foobar089012984 as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 209,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 210,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 211
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 212,
            "name": "I make a createAccountLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 213
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 214
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 215,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064967"
                ],
                "line": 216
              },
              {
                "cells": [
                  "message",
                  "Partner not supported by country"
                ],
                "line": 217
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 218
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 220,
        "name": "I cannot create an account link with an expired code",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-expired-code",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 221,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 222,
            "name": "I use an expired code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 223,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 224
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 225,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 91,
              "status": "passed"
            },
            "line": 226,
            "name": "I make a createAccountLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 227
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 228,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064994"
                ],
                "line": 229
              },
              {
                "cells": [
                  "message",
                  "Get partner token by auth code failed"
                ],
                "line": 230
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 231
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 274,
            "value": "# Get Authorize Url"
          }
        ],
        "line": 275,
        "name": "I cannot get the account link url when a partner is not supported by a country",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-the-account-link-url-when-a-partner-is-not-supported-by-a-country",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 335,
              "status": "passed"
            },
            "line": 276,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 277,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 278
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 279,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 280
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 281
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 282,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064967"
                ],
                "line": 283
              },
              {
                "cells": [
                  "message",
                  "Partner not supported by country"
                ],
                "line": 284
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 285
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 287,
        "name": "I cannot get an account link url with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-an-account-link-url-with-an-invalid-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 527,
              "status": "passed"
            },
            "line": 288,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 289,
            "name": "I save foobar089012988 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 290,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 291
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 292
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 293,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 294
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 295
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 296
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 298,
        "name": "I cannot get an account link url with an access token for a different account",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-an-account-link-url-with-an-access-token-for-a-different-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 409,
              "status": "passed"
            },
            "line": 299,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 300,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 301
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 402,
              "status": "passed"
            },
            "line": 302,
            "name": "I have created a new PSN account",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 303,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 304
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 305
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 306,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 307
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 308
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 309
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 311,
        "name": "I cannot get an account link url with a client credentials access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-an-account-link-url-with-a-client-credentials-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 312,
            "name": "I save me as accountId",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 313,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 314
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 315,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 316
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 317
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 318,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 319
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 320
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 321
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 337,
        "name": "Get non-existing token, valid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-token,-valid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 812,
              "status": "passed"
            },
            "line": 325,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 326,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 327,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 328
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 329,
            "name": "I make a getPartnerToken.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 330
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 331,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 332
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 333
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 334
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 338,
        "name": "Get non-existing token, valid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-token,-valid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 378,
              "status": "passed"
            },
            "line": 325,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 326,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 327,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 328
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 329,
            "name": "I make a getPartnerToken.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 330
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 331,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 332
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 333
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 334
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 341,
        "name": "Get non-existing token, invalid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;get-non-existing-token,-invalid-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 395,
              "status": "passed"
            },
            "line": 342,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 343,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 344
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 345,
            "name": "I make a getPartnerToken.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 346
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 347,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064979"
                ],
                "line": 348
              },
              {
                "cells": [
                  "message",
                  "Partner metadata not available"
                ],
                "line": 349
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 350
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 351,
            "name": "I verify that headers.Location in response is not present",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 353,
        "name": "I cannot get a partner token with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-a-partner-token-with-an-invalid-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 455,
              "status": "passed"
            },
            "line": 354,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 355,
            "name": "I save foobar089012988 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 356,
            "name": "I make a getPartnerToken.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 357
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 358,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 359
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 360
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 361
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 363,
        "name": "I cannot get a partner token with a client credentials access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-a-partner-token-with-a-client-credentials-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 364,
            "name": "I save me as accountId",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 365,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 366
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 367,
            "name": "I make a getPartnerToken.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 368
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 369,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 370
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 371
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 372
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 387,
        "name": "I cannot get an account link with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-an-account-link-with-an-invalid-access-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 862,
              "status": "passed"
            },
            "line": 376,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 377,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 378,
            "name": "I save foobar089012988 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 379,
            "name": "I make a getAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 380
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 381,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 382
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 383
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 384
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 388,
        "name": "I cannot get an account link with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-an-account-link-with-an-invalid-access-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 364,
              "status": "passed"
            },
            "line": 376,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 377,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 378,
            "name": "I save foobar089012988 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 379,
            "name": "I make a getAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 380
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 381,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 382
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 383
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 384
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 390,
        "name": "I cannot get an account link with a client credentials access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-get-an-account-link-with-a-client-credentials-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 391,
            "name": "I save me as accountId",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 392,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 393
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 394,
            "name": "I make a getAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 395
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 396,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 397
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 398
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 399
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 415,
        "name": "Delete non-existing link, valid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;delete-non-existing-link,-valid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 799,
              "status": "passed"
            },
            "line": 403,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 404,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 405,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 406
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 407,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 408
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 409,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 410
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 411
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 412
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 416,
        "name": "Delete non-existing link, valid partner",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;delete-non-existing-link,-valid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 436,
              "status": "passed"
            },
            "line": 403,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 404,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 405,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 406
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 407,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 408
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 409,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 410
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 411
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 412
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@negative"
          }
        ]
      },
      {
        "line": 418,
        "name": "Delete non-existing link and partner id is valid",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;delete-non-existing-link-and-partner-id-is-valid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 837,
              "status": "passed"
            },
            "line": 419,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 420,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 421
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 422,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 426
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 427
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 429,
        "name": "I cannot delete account link with an invalid access token",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-delete-account-link-with-an-invalid-access-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 811,
              "status": "passed"
            },
            "line": 430,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 431,
            "name": "I save foobar089012988 as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 432,
            "name": "I make a deleteAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 433
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 434,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 435
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 436
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 437
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 439,
        "name": "I cannot delete account link with an access token with a different scope",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-delete-account-link-with-an-access-token-with-a-different-scope",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 440,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 441,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 442
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 443,
            "name": "I make a deleteAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 444
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 445,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 446
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 447
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 448
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 450,
            "value": "# Request body validation"
          }
        ],
        "line": 451,
        "name": "I cannot create an account link with an invalid redirect uri",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-invalid-redirect-uri",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 852,
              "status": "passed"
            },
            "line": 452,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 453,
            "name": "I save notUrl as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 454,
            "name": "I make a createAccountLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 455
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 456
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 457,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 458
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 459
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 460
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 462,
            "value": "# Parameter validation"
          }
        ],
        "line": 463,
        "name": "I cannot pass in an invalid account ID",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-pass-in-an-invalid-account-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 464,
            "name": "I save AB as accountId",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 465,
            "name": "I save youtube as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 466,
            "name": "I make a getAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 467,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 468
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 469
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 470
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 472,
        "name": "I cannot create an account link with an online id",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking;i-cannot-create-an-account-link-with-an-online-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 839,
              "status": "passed"
            },
            "line": 473,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 474,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 475,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 476
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 477,
            "name": "I generate a random ONLINE_ID as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 478,
            "name": "I make a createAccountLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 479
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 480
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 481,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 482
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 483
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 484
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "account link - negative scenarios for account linking",
    "description": "",
    "id": "account-link---negative-scenarios-for-account-linking",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 4,
        "name": "I cannot get device code when a partner is not supported by a country",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-get-device-code-when-a-partner-is-not-supported-by-a-country",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 395,
              "status": "passed"
            },
            "line": 5,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 7
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 9
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064967"
                ],
                "line": 11
              },
              {
                "cells": [
                  "message",
                  "Partner not supported by country"
                ],
                "line": 12
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 30,
        "name": "I cannot get device code for sub-account",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-get-device-code-for-sub-account;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 494,
              "status": "passed"
            },
            "line": 16,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 17,
            "name": "I generate a random SIGNIN_ID as signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 381,
              "status": "passed"
            },
            "line": 18,
            "name": "I make a createPsnAdultSubAccount.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 19,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 20
              },
              {
                "cells": [
                  "format",
                  "opaque"
                ],
                "line": 21
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 22,
            "name": "I make a getPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 23
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 25
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 26
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 27
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 31,
        "name": "I cannot get device code for sub-account",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-get-device-code-for-sub-account;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 845,
              "status": "passed"
            },
            "line": 16,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 17,
            "name": "I generate a random SIGNIN_ID as signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 441,
              "status": "passed"
            },
            "line": 18,
            "name": "I make a createPsnAdultSubAccount.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 19,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 20
              },
              {
                "cells": [
                  "format",
                  "jwt"
                ],
                "line": 21
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 22,
            "name": "I make a getPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 23
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 25
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 26
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 27
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 49,
        "name": "I receive an error when polling for the device token before the user authenticates",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-receive-an-error-when-polling-for-the-device-token-before-the-user-authenticates;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 816,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 517,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save body.deviceCode from response as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 124,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 50,
        "name": "I receive an error when polling for the device token before the user authenticates",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-receive-an-error-when-polling-for-the-device-token-before-the-user-authenticates;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 822,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 672,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save body.deviceCode from response as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 266,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 51,
        "name": "I receive an error when polling for the device token before the user authenticates",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-receive-an-error-when-polling-for-the-device-token-before-the-user-authenticates;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 810,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 88,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save body.deviceCode from response as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 126,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 52,
        "name": "I receive an error when polling for the device token before the user authenticates",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-receive-an-error-when-polling-for-the-device-token-before-the-user-authenticates;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 843,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 114,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save body.deviceCode from response as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 88,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 53,
        "name": "I receive an error when polling for the device token before the user authenticates",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-receive-an-error-when-polling-for-the-device-token-before-the-user-authenticates;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 492,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save body.deviceCode from response as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 85,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 54,
        "name": "I receive an error when polling for the device token before the user authenticates",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-receive-an-error-when-polling-for-the-device-token-before-the-user-authenticates;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 813,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a getPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.deviceCode in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save body.deviceCode from response as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 104,
              "status": "passed"
            },
            "line": 42,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 44
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 45
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 111,
        "name": "I cannot pass an invalid device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-for-the-device-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 456,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 262,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 112,
        "name": "I cannot pass an invalid device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-for-the-device-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 819,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 249,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 113,
        "name": "I cannot pass an invalid device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-for-the-device-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 817,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 93,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 114,
        "name": "I cannot pass an invalid device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-for-the-device-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 444,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 92,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 115,
        "name": "I cannot pass an invalid device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-for-the-device-token;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 634,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 85,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 116,
        "name": "I cannot pass an invalid device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-for-the-device-token;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 546,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I save me as accountId",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 90,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@deviceCode"
          }
        ]
      },
      {
        "line": 119,
        "name": "I cannot pass in an empty device code when polling for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-in-an-empty-device-code-when-polling-for-the-device-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 120,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 121,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 122
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 84,
              "status": "passed"
            },
            "line": 123,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 124
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 125,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064991"
                ],
                "line": 126
              },
              {
                "cells": [
                  "message",
                  "Missing device code"
                ],
                "line": 127
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 128
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 130,
        "name": "I cannot pass an invalid device code when polling apple for the device token",
        "description": "",
        "id": "device-code-flow---negative-scenarios-for-device-code-flow;i-cannot-pass-an-invalid-device-code-when-polling-apple-for-the-device-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 131,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 132,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I have an invalid device code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 244,
              "status": "passed"
            },
            "line": 135,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 136
              }
            ],
            "keyword": "When "
          }
        ]
      }
    ],
    "name": "device code flow - negative scenarios for device code flow",
    "description": "",
    "id": "device-code-flow---negative-scenarios-for-device-code-flow",
    "keyword": "Feature",
    "uri": "_legacy/device_code/device_code_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@deviceCode"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 6,
        "name": "Delete a link that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 495,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 13
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 14
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 15
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 17
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 19
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 24,
        "name": "Delete a link using valid access token but invalid access scope - should return a 403 Invalid Authorization",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-using-valid-access-token-but-invalid-access-scope---should-return-a-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 453,
              "status": "passed"
            },
            "line": 25,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 26,
            "name": "I get an opaque client credentials access token with scope connectAccount:s2s.steam.link.query",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 27,
            "name": "I make a deleteAccountLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 28
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 30
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 31
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 36
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 37
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 38
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 23,
            "name": "@steam"
          }
        ]
      },
      {
        "line": 41,
        "name": "Delete a link that does not exist - should return a 404",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-that-does-not-exist---should-return-a-404",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 506,
              "status": "passed"
            },
            "line": 42,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 43,
            "name": "I get an opaque client credentials access token with scope connectAccount:s2s.steam.link.delete",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 44,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 45
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 47
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 48
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 51
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 52
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 53
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 54
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 55
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 40,
            "name": "@steam"
          }
        ]
      },
      {
        "line": 58,
        "name": "Delete a link using invalid access token - should return a 401 unauthorized access",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-using-invalid-access-token---should-return-a-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 512,
              "status": "passed"
            },
            "line": 60,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 61,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 62,
            "name": "I make a deleteAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 63
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 64,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 65
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 66
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 67
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 69
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 72
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 57,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 76,
        "name": "Delete a link where account id from access token and account id in path mismatch - should return a 401 unauthorized access",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-where-account-id-from-access-token-and-account-id-in-path-mismatch---should-return-a-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 77,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 495,
              "status": "passed"
            },
            "line": 78,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 79,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 80
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I save body.access_token from response as testPsnAccount.accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 483,
              "status": "passed"
            },
            "line": 82,
            "name": "I have created a new PSN account randomPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 83,
            "name": "I save ctx(\u0027testPsnAccount.accessToken\u0027) as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 84,
            "name": "I save ctx(\u0027randomPsnAccount.accountId\u0027) as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 85,
            "name": "I make a deleteAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 86
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 87,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 88
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 89
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 90
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 92
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 93
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 94
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 95
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 96
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 75,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 115,
        "name": "Delete a link for discord with invalid parameters passed to revoke - should return 500",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-discord-with-invalid-parameters-passed-to-revoke---should-return-500;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 382,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I enable mock for partner api call with scenario discordDeleteAccountLinkWithInvalidTokenTypeHintNegative",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 104,
            "name": "I get an opaque client credentials access token with scope connectedIdentity:s2s.partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 105,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 106
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 107
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 108
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I get valid mock auth code from discord for testDiscordAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 110,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 111,
            "name": "I make a deleteAccountLink.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 112
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 98,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 99,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 116,
        "name": "Delete a link for discord with invalid parameters passed to revoke - should return 500",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-discord-with-invalid-parameters-passed-to-revoke---should-return-500;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 623,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I enable mock for partner api call with scenario discordDeleteAccountLinkWithInvalidClientIdNegative",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 104,
            "name": "I get an opaque client credentials access token with scope connectedIdentity:s2s.partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 105,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 106
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 107
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 108
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I get valid mock auth code from discord for testDiscordAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 110,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 111,
            "name": "I make a deleteAccountLink.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 112
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 98,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 99,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 117,
        "name": "Delete a link for discord with invalid parameters passed to revoke - should return 500",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-discord-with-invalid-parameters-passed-to-revoke---should-return-500;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 467,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 103,
            "name": "I enable mock for partner api call with scenario discordDeleteAccountLinkWithInvalidClientSecretNegative",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 104,
            "name": "I get an opaque client credentials access token with scope connectedIdentity:s2s.partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 105,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 106
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 107
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 108
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I get valid mock auth code from discord for testDiscordAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 110,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 111,
            "name": "I make a deleteAccountLink.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 112
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 98,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 99,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 121,
        "name": "Delete a link for discord for link that does not exist - should return 404",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-discord-for-link-that-does-not-exist---should-return-404",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 122,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 123,
            "name": "I save 11 as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 124,
            "name": "I get an opaque client credentials access token with scope connectedIdentity:s2s.partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 125,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 126
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 127,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 128
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 129
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 130
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 119,
            "name": "@discord"
          },
          {
            "line": 120,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 150,
        "name": "Delete a link using bad account id - should return a 400 bad request parameter",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-using-bad-account-id---should-return-a-400-bad-request-parameter;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 133,
            "name": "I make a deleteAccountLink.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "accountId",
                  "1"
                ],
                "line": 134
              },
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 135
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 136,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 137
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 138
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 139
              },
              {
                "cells": [
                  "validationErrors[0].path",
                  "deleteLink.arg0"
                ],
                "line": 140
              },
              {
                "cells": [
                  "validationErrors[0].message",
                  "must match the following regular expression: ^me$|^[0-9]{2,32}$"
                ],
                "line": 141
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 142,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 143
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "$MISSING"
                ],
                "line": 144
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "$MISSING"
                ],
                "line": 145
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1048706"
                ],
                "line": 146
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 147
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 151,
        "name": "Delete a link using bad account id - should return a 400 bad request parameter",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-using-bad-account-id---should-return-a-400-bad-request-parameter;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 133,
            "name": "I make a deleteAccountLink.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "accountId",
                  "1abc1-1"
                ],
                "line": 134
              },
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 135
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 137
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 138
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 139
              },
              {
                "cells": [
                  "validationErrors[0].path",
                  "deleteLink.arg0"
                ],
                "line": 140
              },
              {
                "cells": [
                  "validationErrors[0].message",
                  "must match the following regular expression: ^me$|^[0-9]{2,32}$"
                ],
                "line": 141
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 142,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 143
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "$MISSING"
                ],
                "line": 144
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "$MISSING"
                ],
                "line": 145
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1048706"
                ],
                "line": 146
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 147
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 152,
        "name": "Delete a link using bad account id - should return a 400 bad request parameter",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-using-bad-account-id---should-return-a-400-bad-request-parameter;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 133,
            "name": "I make a deleteAccountLink.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "accountId",
                  "12345678909101112131415161718192021222324252627282930313233"
                ],
                "line": 134
              },
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 135
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 137
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 138
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 139
              },
              {
                "cells": [
                  "validationErrors[0].path",
                  "deleteLink.arg0"
                ],
                "line": 140
              },
              {
                "cells": [
                  "validationErrors[0].message",
                  "must match the following regular expression: ^me$|^[0-9]{2,32}$"
                ],
                "line": 141
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 142,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 143
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "$MISSING"
                ],
                "line": 144
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "$MISSING"
                ],
                "line": 145
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1048706"
                ],
                "line": 146
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 147
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 153,
        "name": "Delete a link using bad account id - should return a 400 bad request parameter",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-using-bad-account-id---should-return-a-400-bad-request-parameter;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 133,
            "name": "I make a deleteAccountLink.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "accountId",
                  "$MISSING"
                ],
                "line": 134
              },
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 135
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 137
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 138
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 139
              },
              {
                "cells": [
                  "validationErrors[0].path",
                  "deleteLink.arg0"
                ],
                "line": 140
              },
              {
                "cells": [
                  "validationErrors[0].message",
                  "must match the following regular expression: ^me$|^[0-9]{2,32}$"
                ],
                "line": 141
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 142,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 143
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "$MISSING"
                ],
                "line": 144
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "$MISSING"
                ],
                "line": 145
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1048706"
                ],
                "line": 146
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 147
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 176,
        "name": "Delete a link for restricted partner or invalid partner id - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-restricted-partner-or-invalid-partner-id---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 549,
              "status": "passed"
            },
            "line": 158,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 159,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 160
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 162,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 163
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "$MISSING"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 169
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 170
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 171
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 177,
        "name": "Delete a link for restricted partner or invalid partner id - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-restricted-partner-or-invalid-partner-id---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 452,
              "status": "passed"
            },
            "line": 158,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 159,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 160
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 162,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 163
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "$MISSING"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 169
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 170
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 171
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 178,
        "name": "Delete a link for restricted partner or invalid partner id - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-restricted-partner-or-invalid-partner-id---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 375,
              "status": "passed"
            },
            "line": 158,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 159,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 160
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 162,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify1"
                ],
                "line": 163
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "$MISSING"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 169
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 170
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 171
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 179,
        "name": "Delete a link for restricted partner or invalid partner id - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-restricted-partner-or-invalid-partner-id---should-return-a-404-unsupported-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 441,
              "status": "passed"
            },
            "line": 158,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 159,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 160
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 162,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "s"
                ],
                "line": 163
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "$MISSING"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 169
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 170
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 171
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 180,
        "name": "Delete a link for restricted partner or invalid partner id - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-restricted-partner-or-invalid-partner-id---should-return-a-404-unsupported-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 415,
              "status": "passed"
            },
            "line": 158,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 159,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 160
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 162,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "thisisareallylongpartnerid"
                ],
                "line": 163
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "$MISSING"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 169
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 170
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 171
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 181,
        "name": "Delete a link for restricted partner or invalid partner id - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-a-link-for-restricted-partner-or-invalid-partner-id---should-return-a-404-unsupported-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 521,
              "status": "passed"
            },
            "line": 158,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 159,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 160
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 162,
            "name": "I make a deleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "$MISSING"
                ],
                "line": 163
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "$MISSING"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 169
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 170
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 171
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@negative"
          },
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 185,
        "name": "Delete Partner Link for Spotify with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "delete-link---negative-scenarios;delete-partner-link-for-spotify-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 441,
              "status": "passed"
            },
            "line": 187,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 188,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 189,
            "name": "I make a deleteAccountLinkWithOriginHeader.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 190
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 191
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 192,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 183,
            "name": "@spotify"
          },
          {
            "line": 184,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "Delete link - negative scenarios",
    "description": "",
    "id": "delete-link---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/delete/oauth2/deleteLinkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@negative"
      },
      {
        "line": 2,
        "name": "@deleteLinkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 6,
        "name": "Get Partner token with a password token having invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-tokens-api---negative-scenarios;get-partner-token-with-a-password-token-having-invalid-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 8,
            "name": "I get a jwt user access token for the account testPsnAccount with scope user:account.familymembers.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a getPartnerTokens.json request expecting 403 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 11
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 21,
        "name": "Get Partner token with a client credentials with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-tokens-api---negative-scenarios;get-partner-token-with-a-client-credentials-with-invalid-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 596,
              "status": "passed"
            },
            "line": 22,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 23,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "connectedIdentity:s2s.partner.link.account.create"
                ],
                "line": 24
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 25,
            "name": "I make a getPartnerTokens.json request expecting 403 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 27
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 28
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 29
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 32
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 33
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 20,
            "name": "@clientCredentials"
          }
        ]
      },
      {
        "line": 36,
        "name": "Get Partner tokens with an invalid accountId that does not match the regex pattern - should return 400 Bad Request Parameter",
        "description": "",
        "id": "get-partner-tokens-api---negative-scenarios;get-partner-tokens-with-an-invalid-accountid-that-does-not-match-the-regex-pattern---should-return-400-bad-request-parameter",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 37,
            "name": "I make a getPartnerTokens.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "accountId",
                  "invalidAccountId"
                ],
                "line": 38
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 40
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "$MISSING"
                ],
                "line": 41
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "$MISSING"
                ],
                "line": 42
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1048706"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 45
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 46
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 50,
        "name": "Get Partner Tokens with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "get-partner-tokens-api---negative-scenarios;get-partner-tokens-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 51,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 52,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:s2s.partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 53,
            "name": "I make a getPartnerTokensWithOriginHeader.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 54
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 55,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 49,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "Get Partner Tokens Api - negative scenarios",
    "description": "",
    "id": "get-partner-tokens-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/read/getTokensNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getTokensApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 30,
        "name": "Get Partner Tokens for a valid link - should return partner tokens",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link---should-return-partner-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 563,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 13,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 15,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I have a random apple partner account testAppleAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 17,
            "name": "PSN account testPsnAccount has valid link to apple account testAppleAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I have a random twitch partner account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 19,
            "name": "PSN account testPsnAccount has valid link to twitch account testTwitchAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 21,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I have a random testbidirectionalpartner partner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 23,
            "name": "PSN account testPsnAccount has valid link to testbidirectionalpartner account testBidirectionalPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I enable mock for partner api call with scenario getAllPartnerTokensPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 82,
              "status": "passed"
            },
            "line": 25,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as spotify, amazon, apple, twitch, discord, testbidirectionalpartner using valid password token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 5,
            "name": "@spotify"
          },
          {
            "line": 6,
            "name": "@amazon"
          },
          {
            "line": 9,
            "name": "@discord"
          },
          {
            "line": 7,
            "name": "@apple"
          },
          {
            "line": 8,
            "name": "@twitch"
          }
        ]
      },
      {
        "line": 35,
        "name": "Get Partner Tokens for a valid link - should return partner tokens",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link---should-return-partner-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 639,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 13,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 15,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I have a random apple partner account testAppleAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 17,
            "name": "PSN account testPsnAccount has valid link to apple account testAppleAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I have a random twitch partner account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 19,
            "name": "PSN account testPsnAccount has valid link to twitch account testTwitchAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 21,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I have a random testbidirectionalpartner partner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 23,
            "name": "PSN account testPsnAccount has valid link to testbidirectionalpartner account testBidirectionalPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I enable mock for partner api call with scenario getAllPartnerTokensPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 25,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as spotify, amazon, apple, twitch, discord, testbidirectionalpartner using valid clientCredentials token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 5,
            "name": "@spotify"
          },
          {
            "line": 6,
            "name": "@amazon"
          },
          {
            "line": 9,
            "name": "@discord"
          },
          {
            "line": 7,
            "name": "@apple"
          },
          {
            "line": 8,
            "name": "@twitch"
          }
        ]
      },
      {
        "line": 60,
        "name": "Get Partner Tokens for a valid link with deepTokenVerification set - should return partner tokens",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link-with-deeptokenverification-set---should-return-partner-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 512,
              "status": "passed"
            },
            "line": 43,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 45,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 75,
              "status": "passed"
            },
            "line": 47,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I have a random apple partner account testAppleAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 49,
            "name": "PSN account testPsnAccount has valid link to apple account testAppleAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I have a random twitch partner account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 51,
            "name": "PSN account testPsnAccount has valid link to twitch account testTwitchAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call with scenario getAllPartnerTokensPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 78,
              "status": "passed"
            },
            "line": 55,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as spotify, amazon, apple, twitch, discord using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 37,
            "name": "@spotify"
          },
          {
            "line": 38,
            "name": "@amazon"
          },
          {
            "line": 41,
            "name": "@discord"
          },
          {
            "line": 39,
            "name": "@apple"
          },
          {
            "line": 40,
            "name": "@twitch"
          }
        ]
      },
      {
        "line": 61,
        "name": "Get Partner Tokens for a valid link with deepTokenVerification set - should return partner tokens",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link-with-deeptokenverification-set---should-return-partner-tokens;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 510,
              "status": "passed"
            },
            "line": 43,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 45,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 77,
              "status": "passed"
            },
            "line": 47,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I have a random apple partner account testAppleAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 49,
            "name": "PSN account testPsnAccount has valid link to apple account testAppleAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I have a random twitch partner account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 51,
            "name": "PSN account testPsnAccount has valid link to twitch account testTwitchAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 65,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call with scenario getAllPartnerTokensPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62,
              "status": "passed"
            },
            "line": 55,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as spotify, amazon, apple, twitch, discord using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 37,
            "name": "@spotify"
          },
          {
            "line": 38,
            "name": "@amazon"
          },
          {
            "line": 41,
            "name": "@discord"
          },
          {
            "line": 39,
            "name": "@apple"
          },
          {
            "line": 40,
            "name": "@twitch"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get Partner Tokens for a valid link with deepTokenVerification set - should return partner tokens",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link-with-deeptokenverification-set---should-return-partner-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 436,
              "status": "passed"
            },
            "line": 43,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 45,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 47,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I have a random apple partner account testAppleAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 49,
            "name": "PSN account testPsnAccount has valid link to apple account testAppleAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I have a random twitch partner account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 51,
            "name": "PSN account testPsnAccount has valid link to twitch account testTwitchAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call with scenario getAllPartnerTokensPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 54,
              "status": "passed"
            },
            "line": 55,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as spotify, amazon, apple, twitch, discord using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 37,
            "name": "@spotify"
          },
          {
            "line": 38,
            "name": "@amazon"
          },
          {
            "line": 41,
            "name": "@discord"
          },
          {
            "line": 39,
            "name": "@apple"
          },
          {
            "line": 40,
            "name": "@twitch"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get Partner Tokens for a valid link with deepTokenVerification set - should return partner tokens",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link-with-deeptokenverification-set---should-return-partner-tokens;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 487,
              "status": "passed"
            },
            "line": 43,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 45,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 47,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I have a random apple partner account testAppleAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 49,
            "name": "PSN account testPsnAccount has valid link to apple account testAppleAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I have a random twitch partner account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 51,
            "name": "PSN account testPsnAccount has valid link to twitch account testTwitchAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call with scenario getAllPartnerTokensPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 55,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as spotify, amazon, apple, twitch, discord using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 37,
            "name": "@spotify"
          },
          {
            "line": 38,
            "name": "@amazon"
          },
          {
            "line": 41,
            "name": "@discord"
          },
          {
            "line": 39,
            "name": "@apple"
          },
          {
            "line": 40,
            "name": "@twitch"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get Partner Tokens for a valid link and invalid links - should return partner tokens for valid links",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-a-valid-link-and-invalid-links---should-return-partner-tokens-for-valid-links",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 394,
              "status": "passed"
            },
            "line": 73,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 74,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 75,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 77,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 78,
            "name": "I enable mock for partner api call with scenario getPartnerTokensPositiveWithInvalidAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 108,
              "status": "passed"
            },
            "line": 79,
            "name": "I can get tokens for psn user testPsnAccount and response only contains tokens for partners such as amazon using valid password token",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 69,
            "name": "@spotify"
          },
          {
            "line": 70,
            "name": "@amazon"
          },
          {
            "line": 71,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 83,
        "name": "Get Partner Tokens for user having passive link - should return 200 with empty response body",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-user-having-passive-link---should-return-200-with-empty-response-body",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 630,
              "status": "passed"
            },
            "line": 84,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 85,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 86,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 87,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 88,
            "name": "I make a getPartnerTokens.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I verify that body in the response is empty",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 91
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 92
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 93
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 94
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 81,
            "name": "@steam"
          },
          {
            "line": 82,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 97,
        "name": "Get Partner Tokens for user having no links - should return 200 with empty response body",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-for-user-having-no-links---should-return-200-with-empty-response-body",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 378,
              "status": "passed"
            },
            "line": 98,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 99,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 100,
            "name": "I make a getPartnerTokens.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 102
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 103
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 104
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 105
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 106,
            "name": "I verify that body in the response is empty",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 96,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 109,
        "name": "Get Partner Tokens valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-valid-cors-pre-flight-request---should-return-all-cors-response-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 430,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 111,
            "name": "I make a getPartnerTokensCors.json request:",
            "rows": [
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 112
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 113
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 114
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 108,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 118,
        "name": "Get Partner Tokens valid CORS Pre-Flight request with unsupported origin - should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-valid-cors-pre-flight-request-with-unsupported-origin---should-not-return-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 448,
              "status": "passed"
            },
            "line": 119,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 120,
            "name": "I make a getPartnerTokensCors.json request:",
            "rows": [
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 121
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 122
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 123
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 124,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 117,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 136,
            "value": "# invalid header (Invalid-Header is not a valid header used in PSN services)"
          }
        ],
        "line": 137,
        "name": "Get Partner Tokens valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getPartnerTokensCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 130
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Invalid-Header, X-Psn-Platform, X-Psn-Request-Id,X-Psn-Sampled,X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 132
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 138,
            "value": "# unsupported header (X-Correlation-Id is a valid header used in PSN services but is not a supported header for CIS for access control"
          }
        ],
        "line": 139,
        "name": "Get Partner Tokens valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getPartnerTokensCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 130
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "X-Correlation-Id, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 132
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@getTokensApi"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 142,
        "name": "Get Partner Tokens valid CORS Pre-Flight request with invalid access control request method - should not return Access-Control-Allow-Methods",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-valid-cors-pre-flight-request-with-invalid-access-control-request-method---should-not-return-access-control-allow-methods",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 450,
              "status": "passed"
            },
            "line": 143,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 144,
            "name": "I make a getPartnerTokensCors.json request:",
            "rows": [
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 145
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 146
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 147
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 148,
            "name": "I verify all CORS headers in response for options call with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 141,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 151,
        "name": "Get Partner Tokens valid CORS Pre-Flight request with no access control or origin headers - should not return Access-Control-Allow-Origin, Access-Control-Allow-Methods, or Access-Control-Allow-Headers",
        "description": "",
        "id": "get-partner-tokens-api---positive-scenarios;get-partner-tokens-valid-cors-pre-flight-request-with-no-access-control-or-origin-headers---should-not-return-access-control-allow-origin,-access-control-allow-methods,-or-access-control-allow-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 383,
              "status": "passed"
            },
            "line": 152,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 153,
            "name": "I make a getPartnerTokensCorsNoHeaders.json request",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 154,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 150,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "Get Partner Tokens Api - positive scenarios",
    "description": "",
    "id": "get-partner-tokens-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/read/getTokensPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getTokensApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 20,
        "name": "Linking Via Web Flow - I cannot create a link when the other link to the partner account has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow---i-cannot-create-a-link-when-the-other-link-to-the-partner-account-has-not-expired-(with-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 827,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 605,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 13,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 17,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 6,
            "name": "@createLinkApi"
          },
          {
            "line": 7,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 21,
        "name": "Linking Via Web Flow - I cannot create a link when the other link to the partner account has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow---i-cannot-create-a-link-when-the-other-link-to-the-partner-account-has-not-expired-(with-a-valid-access-token-cached);;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 376,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 13,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 17,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 6,
            "name": "@createLinkApi"
          },
          {
            "line": 7,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 37,
        "name": "Linking Via Web Flow - I cannot create a link when the other link to the partner account has not expired (without a valid access token cached but with a refreshable token)",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow---i-cannot-create-a-link-when-the-other-link-to-the-partner-account-has-not-expired-(without-a-valid-access-token-cached-but-with-a-refreshable-token);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 817,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 435,
              "status": "passed"
            },
            "line": 28,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 30,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 33,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 121,
              "status": "passed"
            },
            "line": 34,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 23,
            "name": "@createLinkApi"
          },
          {
            "line": 24,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 38,
        "name": "Linking Via Web Flow - I cannot create a link when the other link to the partner account has not expired (without a valid access token cached but with a refreshable token)",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow---i-cannot-create-a-link-when-the-other-link-to-the-partner-account-has-not-expired-(without-a-valid-access-token-cached-but-with-a-refreshable-token);;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 797,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 422,
              "status": "passed"
            },
            "line": 28,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 30,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 33,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157,
              "status": "passed"
            },
            "line": 34,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 23,
            "name": "@createLinkApi"
          },
          {
            "line": 24,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 42,
        "name": "Linking Via Web Flow with password token with Incorrect Scope - should return 403 Invalid Authorization",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-with-password-token-with-incorrect-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 586,
              "status": "passed"
            },
            "line": 43,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 44,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.create"
                ],
                "line": 45
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 50,
            "name": "I make a createAccountLink.json request expecting 403 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 52
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 53
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 40,
            "name": "@createLinkApi"
          },
          {
            "line": 41,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 58,
        "name": "Linking Via Web Flow with Client Credentials token with Incorrect Scope - should return 403 Invalid Authorization",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-with-client-credentials-token-with-incorrect-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 389,
              "status": "passed"
            },
            "line": 59,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 61,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 64,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 66,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 67,
            "name": "I make a createAccountLink.json request expecting 403 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 69
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 70
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 56,
            "name": "@createLinkApi"
          },
          {
            "line": 57,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 75,
        "name": "Linking Via Web Flow with Invalid Auth Code - should return 400 Get partner token by auth code failed",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-with-invalid-auth-code---should-return-400-get-partner-token-by-auth-code-failed",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 812,
              "status": "passed"
            },
            "line": 76,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 77,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 78
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 80,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 82,
            "name": "I get invalid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 83,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 84,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064994"
                ],
                "line": 85
              },
              {
                "cells": [
                  "message",
                  "Get partner token by auth code failed"
                ],
                "line": 86
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 87
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 73,
            "name": "@createLinkApi"
          },
          {
            "line": 74,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 91,
        "name": "Linking Via Web Flow with missing url - should return 400 JSON_VALIDATION_ERROR",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-with-missing-url---should-return-400-json-validation-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 407,
              "status": "passed"
            },
            "line": 92,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 93,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 94
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 95,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 96,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I get valid mock auth code from spotify for firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 98,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 101
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 102
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 89,
            "name": "@createLinkApi"
          },
          {
            "line": 90,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 106,
        "name": "Linking Via Web Flow with missing auth code - should return 400 JSON_VALIDATION_ERROR",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-with-missing-auth-code---should-return-400-json-validation-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 426,
              "status": "passed"
            },
            "line": 107,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 108,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 109
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 110,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I remove code from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 114,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 116
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 117
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 118
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 104,
            "name": "@createLinkApi"
          },
          {
            "line": 105,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 122,
        "name": "Linking Via Web Flow  with invalid access token - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow--with-invalid-access-token---should-return-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 426,
              "status": "passed"
            },
            "line": 123,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 124,
            "name": "I save fooBar as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 125,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 126,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 127,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 128,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a createAccountLink.json request expecting 401 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 130,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 131
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 132
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 133
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 120,
            "name": "@createLinkApi"
          },
          {
            "line": 121,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 148,
        "name": "Linking Via Web Flow for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 603,
              "status": "passed"
            },
            "line": 138,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 139,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a createAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "invalidPart"
                ],
                "line": 142
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@createLinkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 136,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 149,
        "name": "Linking Via Web Flow for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 451,
              "status": "passed"
            },
            "line": 138,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 139,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a createAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 142
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@createLinkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 136,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 150,
        "name": "Linking Via Web Flow for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 138,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 139,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a createAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 142
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@createLinkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 136,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 155,
        "name": "Linking Via Web Flow for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 603,
              "status": "passed"
            },
            "line": 138,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 139,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a createAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 142
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@createLinkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 136,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 174,
        "name": "Linking Via Web Flow get url with password token incorrect scope - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-password-token-incorrect-scope---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 474,
              "status": "passed"
            },
            "line": 159,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 160,
            "name": "I get a password token for the account",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.create"
                ],
                "line": 161
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 162,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 163,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 164
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 165
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 166,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 167
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 168
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 169
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 157,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 179,
        "name": "Linking Via Web Flow get url with password token incorrect scope - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-password-token-incorrect-scope---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 384,
              "status": "passed"
            },
            "line": 159,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 160,
            "name": "I get a password token for the account",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.discord.link.create"
                ],
                "line": 161
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 162,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 163,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 164
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 165
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 166,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 167
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 168
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 169
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 157,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 199,
        "name": "Linking Via Web Flow get url with client credentials token incorrect scope - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-client-credentials-token-incorrect-scope---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 465,
              "status": "passed"
            },
            "line": 183,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 184,
            "name": "I save connectAccount:spotify.link.create as scope",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 185,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 187,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 188,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 189
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 190
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 191,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 192
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 193
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 194
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 181,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 204,
        "name": "Linking Via Web Flow get url with client credentials token incorrect scope - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-client-credentials-token-incorrect-scope---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 472,
              "status": "passed"
            },
            "line": 183,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 184,
            "name": "I save connectAccount:s2s.discord.link.create as scope",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 185,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 187,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 188,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 189
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 190
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 191,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 192
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 193
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 194
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 181,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 222,
        "name": "Linking Via Web Flow get Url with Invalid access token - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-invalid-access-token---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 444,
              "status": "passed"
            },
            "line": 208,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 209,
            "name": "I save fooBar as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 210,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 211,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 212
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 213
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 214,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 215
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 216
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 217
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 206,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 227,
        "name": "Linking Via Web Flow get Url with Invalid access token - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-invalid-access-token---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 614,
              "status": "passed"
            },
            "line": 208,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 209,
            "name": "I save fooBar as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 210,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 211,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 212
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 213
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 214,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 215
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 216
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 217
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 206,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 230,
        "name": "Linking Via Web Flow get Url with invalid partner - should return 400 partner not supported by country",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-get-url-with-invalid-partner---should-return-400-partner-not-supported-by-country",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 436,
              "status": "passed"
            },
            "line": 231,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 232,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 233
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 234,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 235
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 236
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 237
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 238,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064967"
                ],
                "line": 239
              },
              {
                "cells": [
                  "message",
                  "Partner not supported by country"
                ],
                "line": 240
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 241
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@getLinkUrlApi"
          }
        ]
      },
      {
        "line": 342,
        "name": "Linking Via Web Flow for restricted partner or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-partner-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 416,
              "status": "passed"
            },
            "line": 332,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 333,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 334
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 335,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "invalidPartner"
                ],
                "line": 336
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 337,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 338
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 339
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 330,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 329,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 343,
        "name": "Linking Via Web Flow for restricted partner or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-partner-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 435,
              "status": "passed"
            },
            "line": 332,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 333,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 334
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 335,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 336
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 337,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 338
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 339
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 330,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 329,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 344,
        "name": "Linking Via Web Flow for restricted partner or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-partner-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 514,
              "status": "passed"
            },
            "line": 332,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 333,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 334
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 335,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 336
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 337,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 338
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 339
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 330,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 329,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 349,
        "name": "Linking Via Web Flow for restricted partner or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-restricted-partner-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 534,
              "status": "passed"
            },
            "line": 332,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 333,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 334
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 335,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 336
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 337,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 338
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 339
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 330,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 329,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 379,
        "name": "Linking Via Web Flow for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 463,
              "status": "passed"
            },
            "line": 355,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 279,
              "status": "passed"
            },
            "line": 356,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 129,
              "status": "passed"
            },
            "line": 358,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 251,
              "status": "passed"
            },
            "line": 359,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 360,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 361,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 362
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 363
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 364
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 365,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 366
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 367
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 368
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 369
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148,
              "status": "passed"
            },
            "line": 370,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount with scenario testbidirectionalpartnerCreateLinkNoPsnLinksNegative",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 372,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065007"
                ],
                "line": 373
              },
              {
                "cells": [
                  "message",
                  "A link to the PSN account not been created in partner"
                ],
                "line": 374
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 375
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 352,
            "name": "@createLinkApi"
          },
          {
            "line": 353,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 351,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 380,
        "name": "Linking Via Web Flow for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 410,
              "status": "passed"
            },
            "line": 355,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 123,
              "status": "passed"
            },
            "line": 356,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 174,
              "status": "passed"
            },
            "line": 358,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 178,
              "status": "passed"
            },
            "line": 359,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 360,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 361,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 362
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 363
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 364
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 365,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 366
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 367
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 368
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 369
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 119,
              "status": "passed"
            },
            "line": 370,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount with scenario testbidirectionalpartnerCreateLinkNoPsnLinksNegative",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 372,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065007"
                ],
                "line": 373
              },
              {
                "cells": [
                  "message",
                  "A link to the PSN account not been created in partner"
                ],
                "line": 374
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 375
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 352,
            "name": "@createLinkApi"
          },
          {
            "line": 353,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 351,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 381,
        "name": "Linking Via Web Flow for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 605,
              "status": "passed"
            },
            "line": 355,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 142,
              "status": "passed"
            },
            "line": 356,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141,
              "status": "passed"
            },
            "line": 358,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 163,
              "status": "passed"
            },
            "line": 359,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 360,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 361,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 362
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 363
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 364
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 365,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 366
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 367
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 368
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 369
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 124,
              "status": "passed"
            },
            "line": 370,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount with scenario testbidirectionalpartnerCreateLinkTwoPsnLinksNegative",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 372,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065008"
                ],
                "line": 373
              },
              {
                "cells": [
                  "message",
                  "Multiple links to PSN accounts exist in partner"
                ],
                "line": 374
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 375
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 352,
            "name": "@createLinkApi"
          },
          {
            "line": 353,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 351,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 382,
        "name": "Linking Via Web Flow for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 578,
              "status": "passed"
            },
            "line": 355,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 117,
              "status": "passed"
            },
            "line": 356,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 109,
              "status": "passed"
            },
            "line": 358,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152,
              "status": "passed"
            },
            "line": 359,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 360,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 361,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 362
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 363
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 364
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 365,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 366
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 367
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 368
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 369
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 202,
              "status": "passed"
            },
            "line": 370,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount with scenario testbidirectionalpartnerCreateLinkTwoPsnLinksNegative",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 372,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065008"
                ],
                "line": 373
              },
              {
                "cells": [
                  "message",
                  "Multiple links to PSN accounts exist in partner"
                ],
                "line": 374
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 375
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 352,
            "name": "@createLinkApi"
          },
          {
            "line": 353,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 351,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 383,
        "name": "Linking Via Web Flow for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 583,
              "status": "passed"
            },
            "line": 355,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 136,
              "status": "passed"
            },
            "line": 356,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 125,
              "status": "passed"
            },
            "line": 358,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157,
              "status": "passed"
            },
            "line": 359,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 360,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 361,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 362
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 363
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 364
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 365,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 366
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 367
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 368
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 369
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 125,
              "status": "passed"
            },
            "line": 370,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount with scenario testbidirectionalpartnerCreateLinkWrongPsnLinkNegative",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 372,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065009"
                ],
                "line": 373
              },
              {
                "cells": [
                  "message",
                  "A link to a different PSN account exists"
                ],
                "line": 374
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 375
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 352,
            "name": "@createLinkApi"
          },
          {
            "line": 353,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 351,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 384,
        "name": "Linking Via Web Flow for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;linking-via-web-flow-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 423,
              "status": "passed"
            },
            "line": 355,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 135,
              "status": "passed"
            },
            "line": 356,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 357,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 90,
              "status": "passed"
            },
            "line": 358,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 206,
              "status": "passed"
            },
            "line": 359,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 360,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 361,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 362
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 363
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 364
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 365,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 366
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 367
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 368
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 369
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184,
              "status": "passed"
            },
            "line": 370,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount with scenario testbidirectionalpartnerCreateLinkWrongPsnLinkNegative",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a createAccountLink.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 372,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065009"
                ],
                "line": 373
              },
              {
                "cells": [
                  "message",
                  "A link to a different PSN account exists"
                ],
                "line": 374
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 375
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@webFlow"
          },
          {
            "line": 352,
            "name": "@createLinkApi"
          },
          {
            "line": 353,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 351,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 389,
        "name": "Create Account Link for Spotify with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;create-account-link-for-spotify-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 390,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 674,
              "status": "passed"
            },
            "line": 391,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 392,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 393
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 394,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 395,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 396,
            "name": "I make a createAccountLinkWithOriginHeader.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 397
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 398
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 399
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 400,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 386,
            "name": "@spotify"
          },
          {
            "line": 387,
            "name": "@createLinkApi"
          },
          {
            "line": 388,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 405,
        "name": "Get the Partner Authorize Url for Spotify with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "create-link-using-web-flow---negative-scenarios;get-the-partner-authorize-url-for-spotify-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 406,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 440,
              "status": "passed"
            },
            "line": 407,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 408,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 409
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 410,
            "name": "I make a getPartnerAuthorizeUrlWithOriginHeader.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 411
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 412
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 413
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 414
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 415,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 402,
            "name": "@spotify"
          },
          {
            "line": 403,
            "name": "@cors"
          },
          {
            "line": 404,
            "name": "@getLinkUrlApi"
          }
        ]
      }
    ],
    "name": "Create Link using web flow - Negative scenarios",
    "description": "",
    "id": "create-link-using-web-flow---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/create/oauth2/createLinkWithWebFlowNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@webFlow"
      },
      {
        "line": 3,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 7,
        "name": "Get partner link info with an access token for a different account - should return a 401 unauthorized access",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-with-an-access-token-for-a-different-account---should-return-a-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 426,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 648,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 10,
            "name": "I get a jwt user access token for the account firstPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a getAccountLink.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 12
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027firstPsnAccount.accessToken\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@spotify"
          },
          {
            "line": 6,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 21,
        "name": "Get partner link info with invalid token - should return a 401 unauthorized access",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-with-invalid-token---should-return-a-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 23,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 590,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 26,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 27
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 29
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 30
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 20,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 35,
        "name": "Get partner link info with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-with-invalid-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 37,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 38,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 40,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 42,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 43
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 44
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 45
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 33,
            "name": "@spotify"
          },
          {
            "line": 34,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 48,
        "name": "Get partner link info that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 50,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 51,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 53,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 54
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 55,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 56
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 57
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 58
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 47,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 79,
        "name": "Get partner link info where access token is invalid and link cannot be refreshed - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-where-access-token-is-invalid-and-link-cannot-be-refreshed---should-return-a-404-account-not-linked-to-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 682,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 74,
              "status": "passed"
            },
            "line": 66,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 69,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 70
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 72
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 73
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 61,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 60,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 84,
        "name": "Get partner link info where access token is invalid and link cannot be refreshed - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-where-access-token-is-invalid-and-link-cannot-be-refreshed---should-return-a-404-account-not-linked-to-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 488,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 66,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a client credentials token",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 84,
              "status": "passed"
            },
            "line": 69,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 70
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 72
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 73
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 61,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 60,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 88,
        "name": "Get partner link info where the link has expired - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-where-the-link-has-expired---should-return-a-404-account-not-linked-to-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 90,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 390,
              "status": "passed"
            },
            "line": 91,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 92,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 105,
              "status": "passed"
            },
            "line": 93,
            "name": "PSN account testPsnAccount has expired link to spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 94,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 95
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 96,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 97
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 98
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 99
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 86,
            "name": "@wiremock"
          },
          {
            "line": 87,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 102,
        "name": "Get partner link info for restricted partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-info-for-restricted-partner---should-return-a-404-unsupported-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 378,
              "status": "passed"
            },
            "line": 103,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 104,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 105
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 106,
            "name": "I make a getAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 107
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 109
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 110
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 101,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 114,
        "name": "Get Partner Link for Steam with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "get-partner-link-info---negative-scenarios;get-partner-link-for-steam-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 604,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72,
              "status": "passed"
            },
            "line": 117,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 118,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 119,
            "name": "I make a getAccountLinkDeepTokenVerificationWithOriginHeader.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 120
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 121
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 122
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 123
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 124,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 112,
            "name": "@steam"
          },
          {
            "line": 113,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "Get Partner Link Info - negative scenarios",
    "description": "",
    "id": "get-partner-link-info---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/read/oauth2/getLinkInfoNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getLinkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 7,
        "name": "Get Partner token with an user access token for a different account - should return 401 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-an-user-access-token-for-a-different-account---should-return-401-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 410,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 75,
              "status": "passed"
            },
            "line": 10,
            "name": "I get a jwt user access token for the account firstPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a getPartnerToken.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 12
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027firstPsnAccount.accessToken\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@spotify"
          },
          {
            "line": 6,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 46,
        "name": "Get Partner Token for invalid link that cannot be refreshed and deepTokenVerification flag set - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-invalid-link-that-cannot-be-refreshed-and-deeptokenverification-flag-set---should-return-404-account-is-not-linked-with-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 466,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 25,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 26,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenNegative",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 30
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 33
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 40
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 21,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 47,
        "name": "Get Partner Token for invalid link that cannot be refreshed and deepTokenVerification flag set - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-invalid-link-that-cannot-be-refreshed-and-deeptokenverification-flag-set---should-return-404-account-is-not-linked-with-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 25,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 26,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenNegative",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 30
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 33
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 40
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 21,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get Partner Token for invalid link that cannot be refreshed and deepTokenVerification flag set - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-invalid-link-that-cannot-be-refreshed-and-deeptokenverification-flag-set---should-return-404-account-is-not-linked-with-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 437,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 25,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 26,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenInvalidRefreshToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 30
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 33
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 40
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 21,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get Partner Token for invalid link that cannot be refreshed and deepTokenVerification flag set - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-invalid-link-that-cannot-be-refreshed-and-deeptokenverification-flag-set---should-return-404-account-is-not-linked-with-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 465,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 25,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 26,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenInvalidRefreshToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 30
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 33
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 40
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 21,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 58,
        "name": "Get Partner Token for invalid link that cannot be refreshed and deepTokenVerification flag set - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-invalid-link-that-cannot-be-refreshed-and-deeptokenverification-flag-set---should-return-404-account-is-not-linked-with-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 25,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 26,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenNegative",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 30
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 33
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 40
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 21,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 59,
        "name": "Get Partner Token for invalid link that cannot be refreshed and deepTokenVerification flag set - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-invalid-link-that-cannot-be-refreshed-and-deeptokenverification-flag-set---should-return-404-account-is-not-linked-with-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 467,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 25,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 26,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenNegative",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 30
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 33
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 34
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 39
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 40
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 21,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 83,
        "name": "Get Partner Token for account not linked to partner - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-account-not-linked-to-partner---should-return-404-account-is-not-linked-with-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 533,
              "status": "passed"
            },
            "line": 63,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 64,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 65
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 69
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 72
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 75
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 76
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 77
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 61,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 88,
        "name": "Get Partner Token for account not linked to partner - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-account-not-linked-to-partner---should-return-404-account-is-not-linked-with-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 424,
              "status": "passed"
            },
            "line": 63,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 64,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 65
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 69
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 72
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 75
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 76
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 77
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 61,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 93,
        "name": "Get Partner Token for account not linked to partner - Should return 404 Account is not linked with partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-account-not-linked-to-partner---should-return-404-account-is-not-linked-with-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 370,
              "status": "passed"
            },
            "line": 63,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 64,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 65
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 69
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 72
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 75
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 76
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 77
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 61,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 114,
        "name": "Get Partner Token deep verification for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-deep-verification-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 456,
              "status": "passed"
            },
            "line": 97,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 98,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 100,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 102,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 103
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 104
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 105
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 106
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 107
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 109
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 110
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 95,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 115,
        "name": "Get Partner Token deep verification for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-deep-verification-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 369,
              "status": "passed"
            },
            "line": 97,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 98,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 100,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 102,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 103
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 104
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 105
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 106
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 107
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 109
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 110
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 95,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 116,
        "name": "Get Partner Token deep verification for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-deep-verification-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 484,
              "status": "passed"
            },
            "line": 97,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 98,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 100,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 102,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 103
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 104
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 105
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 106
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 107
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 109
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 110
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 95,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 139,
        "name": "Get Partner token with a password token having invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-a-password-token-having-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 411,
              "status": "passed"
            },
            "line": 120,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 121,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "user:account.familymembers.get"
                ],
                "line": 122
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 123,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 124
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 125,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 126
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 127
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 128
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 129
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 130
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 131,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 132
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 133
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 134
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 118,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 144,
        "name": "Get Partner token with a password token having invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-a-password-token-having-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 395,
              "status": "passed"
            },
            "line": 120,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 121,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "user:account.familymembers.get"
                ],
                "line": 122
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 123,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 124
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 125,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 126
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 127
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 128
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 129
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 130
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 131,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 132
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 133
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 134
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 118,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 149,
        "name": "Get Partner token with a password token having invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-a-password-token-having-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 120,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 121,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "user:account.familymembers.get"
                ],
                "line": 122
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 123,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 124
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 125,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 126
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 127
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 128
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 129
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 130
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 131,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 132
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 133
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 134
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 118,
            "name": "@userToken"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 172,
        "name": "Get Partner token with a client credentials with invalid scope - should return 401 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-a-client-credentials-with-invalid-scope---should-return-401-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 421,
              "status": "passed"
            },
            "line": 153,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 154,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "connectedIdentity:s2s.partner.link.account.create"
                ],
                "line": 155
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 156,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 157
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 158,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 159
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 160
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 161
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 162
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 163
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 151,
            "name": "@clientCredentials"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 177,
        "name": "Get Partner token with a client credentials with invalid scope - should return 401 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-a-client-credentials-with-invalid-scope---should-return-401-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 395,
              "status": "passed"
            },
            "line": 153,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 154,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "connectedIdentity:s2s.partner.link.account.create"
                ],
                "line": 155
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 156,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 157
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 158,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 159
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 160
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 161
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 162
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 163
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 151,
            "name": "@clientCredentials"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 182,
        "name": "Get Partner token with a client credentials with invalid scope - should return 401 Invalid authorization",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-a-client-credentials-with-invalid-scope---should-return-401-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 373,
              "status": "passed"
            },
            "line": 153,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 154,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scopes",
                  "connectedIdentity:s2s.partner.link.account.create"
                ],
                "line": 155
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 156,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 157
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 158,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 159
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 160
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 161
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 162
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 163
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 165
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 166
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 167
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 151,
            "name": "@clientCredentials"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 203,
        "name": "Get Partner token with an invalid authToken - should return 401 Unauthorized access",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-an-invalid-authtoken---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 364,
              "status": "passed"
            },
            "line": 185,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 187,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 188
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 189,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 190
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 191
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 192
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 193
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 194
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 195,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 196
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 197
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 198
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 208,
        "name": "Get Partner token with an invalid authToken - should return 401 Unauthorized access",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-an-invalid-authtoken---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 428,
              "status": "passed"
            },
            "line": 185,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 187,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 188
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 189,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 190
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 191
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 192
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 193
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 194
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 195,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 196
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 197
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 198
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 213,
        "name": "Get Partner token with an invalid authToken - should return 401 Unauthorized access",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-with-an-invalid-authtoken---should-return-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 185,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 186,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 187,
            "name": "I make a getPartnerTokenDeepTokenVerification.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 188
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 189,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 190
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 191
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 192
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 193
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 194
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 195,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 196
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 197
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 198
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 227,
        "name": "Get Partner Token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 485,
              "status": "passed"
            },
            "line": 217,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 218,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 219
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 220,
            "name": "I make a getPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 221
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 222,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 223
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 215,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 232,
        "name": "Get Partner Token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-api---negative-scenarios;get-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 369,
              "status": "passed"
            },
            "line": 217,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 218,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 219
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 220,
            "name": "I make a getPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 221
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 222,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 223
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 215,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getTokenApi"
          }
        ]
      }
    ],
    "name": "Get Partner Token Api - negative scenarios",
    "description": "",
    "id": "get-partner-token-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/read/oauth2/getTokenNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getTokenApi"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 15,
        "name": "I cannot get the partner metadata for a restricted or invalid partner",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-partner-metadata-for-a-restricted-or-invalid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "yahoo"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 11
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 12
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 16,
        "name": "I cannot get the partner metadata for a restricted or invalid partner",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-partner-metadata-for-a-restricted-or-invalid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "A"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 11
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 12
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 17,
        "name": "I cannot get the partner metadata for a restricted or invalid partner",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-partner-metadata-for-a-restricted-or-invalid-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "asdf3r2rwc"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 11
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 12
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 37,
        "name": "I cannot get the public partner metadata for a restricted or invalid partner",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-public-partner-metadata-for-a-restricted-or-invalid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 30,
            "name": "I make a getPublicPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "yahoo"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 28,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 38,
        "name": "I cannot get the public partner metadata for a restricted or invalid partner",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-public-partner-metadata-for-a-restricted-or-invalid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 30,
            "name": "I make a getPublicPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "A"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 28,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 39,
        "name": "I cannot get the public partner metadata for a restricted or invalid partner",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-public-partner-metadata-for-a-restricted-or-invalid-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 30,
            "name": "I make a getPublicPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "asdf3r2rwc"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 28,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 58,
            "value": "# Fails user agent check"
          }
        ],
        "line": 59,
        "name": "I cannot get the public partner metadata for testpartner with various user agents",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-public-partner-metadata-for-testpartner-with-various-user-agents;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 52,
            "name": "I save conf(\u0027user-agent-mf-ps4-1\u0027) as userAgent",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 53,
            "name": "I make a getPublicPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "testpartner"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 50,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 60,
        "name": "I cannot get the public partner metadata for testpartner with various user agents",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;i-cannot-get-the-public-partner-metadata-for-testpartner-with-various-user-agents;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I save conf(\u0027user-agent-mf-ps4-2\u0027) as userAgent",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 53,
            "name": "I make a getPublicPartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "testpartner"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 50,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 64,
        "name": "Get Partner Metadata for Spotify with unsupported origin in header - should return 403 error response and get correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "partner-metadata---negative-scenarios-for-partner-config;get-partner-metadata-for-spotify-with-unsupported-origin-in-header---should-return-403-error-response-and-get-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 65,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 66
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 67,
            "name": "I make a getPartnerMetadataWithOriginHeader.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partners",
                  "spotify"
                ],
                "line": 68
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 69
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 62,
            "name": "@spotify"
          },
          {
            "line": 63,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "partner metadata - negative scenarios for partner config",
    "description": "",
    "id": "partner-metadata---negative-scenarios-for-partner-config",
    "keyword": "Feature",
    "uri": "partnerMetadata/read/getPartnerMetadataNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@getPartnerMetadataApi"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 28,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "spotify"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Spotify"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2200"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "true"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 33,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "apple"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Apple"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2100"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 38,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitch"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "false"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Twitch"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2300"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 45,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitter"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Twitter"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2400"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 50,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "youtube"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "YouTube"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2500"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 55,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "false"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Steam"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "-1"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "true"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "true"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 60,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "amazon"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "false"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Amazon"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2000"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 67,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "discord"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Discord"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "2150"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 82,
        "name": "I can fetch the partner config for different partners by passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-different-partners-by-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 6,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 7
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "testbidirectionalpartner"
                ],
                "line": 9
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 10,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 11
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 12
              },
              {
                "cells": [
                  "productName",
                  "Test Bidirectional Partner"
                ],
                "line": 13
              },
              {
                "cells": [
                  "displayOrder",
                  "9999"
                ],
                "line": 14
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 15
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 17
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 18
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 19
              },
              {
                "cells": [
                  "partnerServiceUrls.migrateTokenUrl",
                  "$MISSING"
                ],
                "line": 20
              },
              {
                "cells": [
                  "isBidirectional",
                  "true"
                ],
                "line": 21
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "abcd1111-8237-4efc-a278-0119372e188e"
                ],
                "line": 22
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I verify that body.psnScopesForPartner in response contains psn:s2s,openid,id_token:psn.basic_claims,id_token:email (supports $MISSING)",
            "matchedColumns": [
              10
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 106,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "spotify"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "Spotify"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "2200"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "true"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "cdee0485c0b143de91bb71a853594f9a"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 112,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "apple"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "Apple"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "2100"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "pkwv56lo6h"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 125,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitter"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "Twitter"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "2400"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "v6ipopZWLEfGA00zrQG4NA"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 130,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "youtube"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "YouTube"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "2500"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "304902451926-6rbgarjlqv3p846fl5g7tcubhn3rnh3h.apps.googleusercontent.com"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 135,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "amazon"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "false"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "Amazon"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "2000"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "true"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "amzn1.application-oa2-client.5e91db50d44f4f1f89cf453c945dfd09"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 141,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "false"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "Steam"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "-1"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "true"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "true"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "$MISSING"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "false"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "$MISSING"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains $MISSING (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 148,
        "name": "I can fetch the public partner config for different partners without passing authorization header",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-public-partner-config-for-different-partners-without-passing-authorization-header;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 86,
            "name": "I make a getPublicPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "testbidirectionalpartner"
                ],
                "line": 87
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 88,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 89
              },
              {
                "cells": [
                  "type",
                  "$MISSING"
                ],
                "line": 90
              },
              {
                "cells": [
                  "productName",
                  "Test Bidirectional Partner"
                ],
                "line": 91
              },
              {
                "cells": [
                  "displayOrder",
                  "9999"
                ],
                "line": 92
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "true"
                ],
                "line": 93
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 94
              },
              {
                "cells": [
                  "passiveLinkFlowSupported",
                  "false"
                ],
                "line": 95
              },
              {
                "cells": [
                  "allowMinorLinking",
                  "false"
                ],
                "line": 96
              },
              {
                "cells": [
                  "allowMultiLinking",
                  "false"
                ],
                "line": 97
              },
              {
                "cells": [
                  "partnerClientId",
                  "testbidirectionalpartnerClientId"
                ],
                "line": 98
              },
              {
                "cells": [
                  "isBidirectional",
                  "true"
                ],
                "line": 99
              },
              {
                "cells": [
                  "psnClientIdForPartner",
                  "abcd1111-8237-4efc-a278-0119372e188e"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I verify that body.psnScopesForPartner in response contains psn:s2s,openid,id_token:psn.basic_claims,id_token:email (supports $MISSING)",
            "matchedColumns": [
              12
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 84,
            "name": "@smoke"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 150,
            "value": "#    @twitch"
          },
          {
            "line": 151,
            "value": "#    Examples:"
          },
          {
            "line": 152,
            "value": "#      | partnerId | productName | displayOrder | minorLinking | multiLinking | partnerClientId                                                          | webFlowSupported | deviceCodeFlowSupported     |"
          },
          {
            "line": 153,
            "value": "# Twitch has different client ids in non-prod and prod"
          },
          {
            "line": 154,
            "value": "#| twitch    | Twitch      | 2500         | false        | false        | zp7wrm4mmyvc6m83i1kp4hwc9emr77                                           | false            | true                |"
          }
        ],
        "line": 157,
        "name": "Call the getMetadata endpoint for the test partner - returns 200 with a valid user-agent and 404 with an invalid user agent",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;call-the-getmetadata-endpoint-for-the-test-partner---returns-200-with-a-valid-user-agent-and-404-with-an-invalid-user-agent",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 158,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 159
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 160,
            "name": "I save test-allowed-user-agent as userAgent",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 161,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partners",
                  "testpartner"
                ],
                "line": 162
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 156,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 165,
        "name": "Call the getMetadata endpoint for the test partner - returns 200 with a valid user-agent and 404 with an invalid user agent",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;call-the-getmetadata-endpoint-for-the-test-partner---returns-200-with-a-valid-user-agent-and-404-with-an-invalid-user-agent",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 166,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 167
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I save bad-user-agent as userAgent",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 169,
            "name": "I make a getPartnerMetadata.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partners",
                  "testpartner"
                ],
                "line": 170
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 171,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 172
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 173
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 164,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 186,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 187,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 188,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 189,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 190,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 191,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 192,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 193,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 194,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 195,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 200,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 205,
        "name": "Update partner metadata for a forbidden client - should return a partner unsupported error",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;update-partner-metadata-for-a-forbidden-client---should-return-a-partner-unsupported-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 177,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.manage"
                ],
                "line": 178
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 179,
            "name": "I make a updatePartnerMetadata.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 180
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 182
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 183
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 175,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 226,
        "name": "I can fetch the partner config for youtube mock",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-youtube-mock;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 211,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 212
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 213,
            "name": "I save true as mockFlag",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 214,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "youtube"
                ],
                "line": 215
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 216,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2,
              3,
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 217
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 218
              },
              {
                "cells": [
                  "productName",
                  "YouTube"
                ],
                "line": 219
              },
              {
                "cells": [
                  "displayOrder",
                  "2500"
                ],
                "line": 220
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 221
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 222
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          },
          {
            "line": 209,
            "name": "@youtube"
          },
          {
            "line": 208,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 227,
        "name": "I can fetch the partner config for youtube mock",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;i-can-fetch-the-partner-config-for-youtube-mock;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 211,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:partner.link.metadata.get"
                ],
                "line": 212
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 213,
            "name": "I save false as mockFlag",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 214,
            "name": "I make a getPartnerMetadata.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "youtube"
                ],
                "line": 215
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 216,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2,
              3,
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "webFlowSupported",
                  "true"
                ],
                "line": 217
              },
              {
                "cells": [
                  "type",
                  "OUTBOUND_LINKING_BYCIS"
                ],
                "line": 218
              },
              {
                "cells": [
                  "productName",
                  "YouTube"
                ],
                "line": 219
              },
              {
                "cells": [
                  "displayOrder",
                  "2500"
                ],
                "line": 220
              },
              {
                "cells": [
                  "deviceCodeFlowSupported",
                  "false"
                ],
                "line": 221
              },
              {
                "cells": [
                  "mobileLinkFlowSupported",
                  "false"
                ],
                "line": 222
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          },
          {
            "line": 209,
            "name": "@youtube"
          },
          {
            "line": 208,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 241,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "amazon"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 242,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "amazon"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 247,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "apple"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 248,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "apple"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 253,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "discord"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 254,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "discord"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 259,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "spotify"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 260,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "spotify"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 265,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 266,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 271,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitch"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 272,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitch"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 277,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitter"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 278,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "twitter"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 283,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "youtube"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 284,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 231,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "youtube"
                ],
                "line": 232
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 233
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 234
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 235
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to PUT",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 229,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 288,
        "name": "Get Account Link valid CORS Pre-Flight request with unsupported origin - should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request-with-unsupported-origin---should-not-return-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 289,
            "name": "I make a getPartnerMetadataCors.json request:",
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 290
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 291
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 292
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 293
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 294,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 286,
            "name": "@steam"
          },
          {
            "line": 287,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 307,
            "value": "# invalid header (Invalid-Header is not a valid header used in PSN services)"
          }
        ],
        "line": 308,
        "name": "Get Account Link valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 299,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 300
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 301
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Invalid-Header, X-Psn-Platform, X-Psn-Request-Id,X-Psn-Sampled,X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 302
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 303
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 304,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 296,
            "name": "@steam"
          },
          {
            "line": 297,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 309,
            "value": "# unsupported header (X-Correlation-Id is a valid header used in PSN services but is not a supported header for CIS for access control"
          }
        ],
        "line": 310,
        "name": "Get Account Link valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 299,
            "name": "I make a getPartnerMetadataCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 300
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 301
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "X-Correlation-Id, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 302
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 303
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 304,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 296,
            "name": "@steam"
          },
          {
            "line": 297,
            "name": "@cors"
          },
          {
            "line": 1,
            "name": "@getPartnerMetadataApi"
          }
        ]
      },
      {
        "line": 314,
        "name": "Get Account Link valid CORS Pre-Flight request with invalid access control request method - should not return Access-Control-Allow-Methods",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-account-link-valid-cors-pre-flight-request-with-invalid-access-control-request-method---should-not-return-access-control-allow-methods",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 315,
            "name": "I make a getPartnerMetadataCors.json request:",
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 316
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 317
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 318
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 319
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 320,
            "name": "I verify all CORS headers in response for options call with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 312,
            "name": "@steam"
          },
          {
            "line": 313,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 324,
        "name": "Get Partner Metadata valid CORS Pre-Flight request with no access control or origin headers - should not return Access-Control-Allow-Origin, Access-Control-Allow-Methods, or Access-Control-Allow-Headers",
        "description": "",
        "id": "partner-metadata---positive-scenarios-for-partner-config;get-partner-metadata-valid-cors-pre-flight-request-with-no-access-control-or-origin-headers---should-not-return-access-control-allow-origin,-access-control-allow-methods,-or-access-control-allow-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 325,
            "name": "I make a getPartnerMetadataCorsNoHeaders.json request:",
            "rows": [
              {
                "cells": [
                  "partners",
                  "steam"
                ],
                "line": 326
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 327,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 322,
            "name": "@steam"
          },
          {
            "line": 323,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "partner metadata - positive scenarios for partner config",
    "description": "",
    "id": "partner-metadata---positive-scenarios-for-partner-config",
    "keyword": "Feature",
    "uri": "partnerMetadata/read/getPartnerMetadataPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@getPartnerMetadataApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 27,
        "name": "Linking Via Web Flow - I can create a link with a password token when there is no other link to the partner account",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-with-a-password-token-when-there-is-no-other-link-to-the-partner-account;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 376,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I enable mock for partner api call with scenario spotifyCreateLinkWithWebFlowPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 17
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 18
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 19
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 21,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 22,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 23,
            "name": "I can verify psnAccount link to partner spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 73,
              "status": "passed"
            },
            "line": 24,
            "name": "I can delete psnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 5,
            "name": "@smoke"
          },
          {
            "line": 7,
            "name": "@createLinkApi"
          },
          {
            "line": 8,
            "name": "@spotify"
          },
          {
            "line": 6,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 28,
        "name": "Linking Via Web Flow - I can create a link with a password token when there is no other link to the partner account",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-with-a-password-token-when-there-is-no-other-link-to-the-partner-account;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 896,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I enable mock for partner api call with scenario spotifyCreateLinkWithWebFlowPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 17
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 18
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 19
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 21,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 22,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 23,
            "name": "I can verify psnAccount link to partner spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 24,
            "name": "I can delete psnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 5,
            "name": "@smoke"
          },
          {
            "line": 7,
            "name": "@createLinkApi"
          },
          {
            "line": 8,
            "name": "@spotify"
          },
          {
            "line": 6,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 59,
        "name": "Linking Via Web Flow for discord isBidirectional\u003dfalse - should create link",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow-for-discord-isbidirectional\u003dfalse---should-create-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 576,
              "status": "passed"
            },
            "line": 35,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I enable mock for partner api call with scenario discordCreateLinkPsnLinkExistsPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 40,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 41
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 42
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 45,
            "name": "I get valid mock auth code from discord for testDiscordAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 46,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "comments": [
              {
                "line": 47,
                "value": "# verify link by calling get (need to obtain generated partnerAccountId first since value was generated in wiremock"
              },
              {
                "line": 48,
                "value": "# stub and replace that value in testDiscordAccount for verification)"
              }
            ],
            "line": 49,
            "name": "I make a getAccountLink.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 50
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I save ctx(\u0027partnerAccountId\u0027) as testDiscordAccount.partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 52,
            "name": "I can verify psnAccount link to partner discord account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "comments": [
              {
                "line": 53,
                "value": "# verify can delete link"
              }
            ],
            "line": 54,
            "name": "I can delete psnAccount link for partner discord",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 55,
            "name": "I make a getAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 56
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 31,
            "name": "@createLinkApi"
          },
          {
            "line": 32,
            "name": "@discord"
          },
          {
            "line": 30,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 60,
        "name": "Linking Via Web Flow for discord isBidirectional\u003dfalse - should create link",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow-for-discord-isbidirectional\u003dfalse---should-create-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 355,
              "status": "passed"
            },
            "line": 35,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I enable mock for partner api call with scenario discordCreateLinkPsnLinkExistsPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 40,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 41
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 42
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 45,
            "name": "I get valid mock auth code from discord for testDiscordAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 100,
              "status": "passed"
            },
            "line": 46,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "comments": [
              {
                "line": 47,
                "value": "# verify link by calling get (need to obtain generated partnerAccountId first since value was generated in wiremock"
              },
              {
                "line": 48,
                "value": "# stub and replace that value in testDiscordAccount for verification)"
              }
            ],
            "line": 49,
            "name": "I make a getAccountLink.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 50
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I save ctx(\u0027partnerAccountId\u0027) as testDiscordAccount.partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 52,
            "name": "I can verify psnAccount link to partner discord account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "comments": [
              {
                "line": 53,
                "value": "# verify can delete link"
              }
            ],
            "line": 54,
            "name": "I can delete psnAccount link for partner discord",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 55,
            "name": "I make a getAccountLink.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 56
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 31,
            "name": "@createLinkApi"
          },
          {
            "line": 32,
            "name": "@discord"
          },
          {
            "line": 30,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 87,
        "name": "Linking Via Web Flow for testbidirectionalpartner isBidirectional\u003dtrue - should create link",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow-for-testbidirectionalpartner-isbidirectional\u003dtrue---should-create-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 842,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 129,
              "status": "passed"
            },
            "line": 67,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 191,
              "status": "passed"
            },
            "line": 69,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184,
              "status": "passed"
            },
            "line": 70,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 71,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 72,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 73
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 74
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 75
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 76,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 77
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 78
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 79
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 80
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 353,
              "status": "passed"
            },
            "line": 81,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 82,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 125,
              "status": "passed"
            },
            "line": 83,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testBiDirectionalPartnerAccount",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 84,
            "name": "I can delete psnAccount link for partner testbidirectionalpartner",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 63,
            "name": "@createLinkApi"
          },
          {
            "line": 64,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 62,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 88,
        "name": "Linking Via Web Flow for testbidirectionalpartner isBidirectional\u003dtrue - should create link",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow-for-testbidirectionalpartner-isbidirectional\u003dtrue---should-create-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 814,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 124,
              "status": "passed"
            },
            "line": 67,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164,
              "status": "passed"
            },
            "line": 69,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 199,
              "status": "passed"
            },
            "line": 70,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 71,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 72,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 73
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 74
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 75
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 77
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 78
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 79
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 80
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 364,
              "status": "passed"
            },
            "line": 81,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 277,
              "status": "passed"
            },
            "line": 82,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 83,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testBiDirectionalPartnerAccount",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 114,
              "status": "passed"
            },
            "line": 84,
            "name": "I can delete psnAccount link for partner testbidirectionalpartner",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 63,
            "name": "@createLinkApi"
          },
          {
            "line": 64,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 62,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 93,
        "name": "Linking Via Web Flow - I can create a link with a client credentials token when there is no other link to the partner account",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-with-a-client-credentials-token-when-there-is-no-other-link-to-the-partner-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 466,
              "status": "passed"
            },
            "line": 95,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 96,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 98,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 100,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 101,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 102,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 103,
            "name": "I make a createAccountLink.json request expecting 204 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 104,
            "name": "I can verify psnAccount link to partner spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 105,
            "name": "I can delete psnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 90,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 91,
            "name": "@createLinkApi"
          },
          {
            "line": 92,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 124,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Password Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-password-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 482,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 111,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 112
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 113,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 114
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 115
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 117,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.state in response matches 1234567890",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 108,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 125,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Password Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-password-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 838,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 111,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 112
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 113,
            "name": "I make a getPartnerAuthorizeUrlWithoutState.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 114
              },
              {
                "cells": [
                  "state",
                  "$MISSING"
                ],
                "line": 115
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 117,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.state in response matches conf(\u0027formatUUID\u0027)",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 108,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 126,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Password Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-password-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 111,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 112
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 113,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 114
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 115
              },
              {
                "cells": [
                  "redirectUrl",
                  "$MISSING"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 117,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.state in response matches 1234567890",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 108,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 131,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Password Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-password-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 528,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 111,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 112
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 113,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 114
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 115
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 117,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.state in response matches 1234567890",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 108,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 132,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Password Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-password-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 619,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 111,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 112
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 113,
            "name": "I make a getPartnerAuthorizeUrlWithoutState.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 114
              },
              {
                "cells": [
                  "state",
                  "$MISSING"
                ],
                "line": 115
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 117,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.state in response matches conf(\u0027formatUUID\u0027)",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 108,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 133,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Password Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-password-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 492,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 111,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 112
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 113,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 114
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 115
              },
              {
                "cells": [
                  "redirectUrl",
                  "$MISSING"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 117,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.state in response matches 1234567890",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 108,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 152,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Client Credentials Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-client-credentials-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 423,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 139,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 142
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 143
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify that body.state in response matches 1234567890",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 153,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Client Credentials Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-client-credentials-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 383,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 139,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerAuthorizeUrlWithoutState.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 142
              },
              {
                "cells": [
                  "state",
                  "$MISSING"
                ],
                "line": 143
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027spotifyRedirectUrl\u0027)"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify that body.state in response matches conf(\u0027formatUUID\u0027)",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 154,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Client Credentials Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-client-credentials-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 415,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 139,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 142
              },
              {
                "cells": [
                  "state",
                  "0987654321"
                ],
                "line": 143
              },
              {
                "cells": [
                  "redirectUrl",
                  "$MISSING"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify that body.state in response matches 0987654321",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 159,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Client Credentials Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-client-credentials-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 489,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 139,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 142
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 143
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify that body.state in response matches 1234567890",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 160,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Client Credentials Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-client-credentials-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 490,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 139,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerAuthorizeUrlWithoutState.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 142
              },
              {
                "cells": [
                  "state",
                  "$MISSING"
                ],
                "line": 143
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027discordRedirectUrl\u0027)"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify that body.state in response matches conf(\u0027formatUUID\u0027)",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 161,
        "name": "Linking Via Web Flow - I can get the partner authorization url with Client Credentials Token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-get-the-partner-authorization-url-with-client-credentials-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 475,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I save connectedIdentity:s2s.partner.link.account.manage as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 139,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerAuthorizeUrl.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 142
              },
              {
                "cells": [
                  "state",
                  "0987654321"
                ],
                "line": 143
              },
              {
                "cells": [
                  "redirectUrl",
                  "$MISSING"
                ],
                "line": 144
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 145,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 146,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify that body.state in response matches 0987654321",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 135,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 177,
        "name": "Linking Via Web Flow - I can create a link to the same PSN account when the existing link has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 166,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 493,
              "status": "passed"
            },
            "line": 167,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 64,
              "status": "passed"
            },
            "line": 169,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 170,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 171,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 172,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146,
              "status": "passed"
            },
            "line": 173,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 174,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 163,
            "name": "@createLinkApi"
          },
          {
            "line": 164,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 178,
        "name": "Linking Via Web Flow - I can create a link to the same PSN account when the existing link has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached);;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 166,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 476,
              "status": "passed"
            },
            "line": 167,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 169,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 170,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 171,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 172,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 481,
              "status": "passed"
            },
            "line": 173,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 78,
              "status": "passed"
            },
            "line": 174,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 163,
            "name": "@createLinkApi"
          },
          {
            "line": 164,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 194,
        "name": "Linking Via Web Flow - I can create a link to the same PSN account when the existing link has not expired (without a valid access token cached)",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(without-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 183,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 184,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 185,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 91,
              "status": "passed"
            },
            "line": 186,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 187,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 188,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 189,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 235,
              "status": "passed"
            },
            "line": 190,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 191,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 180,
            "name": "@createLinkApi"
          },
          {
            "line": 181,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 195,
        "name": "Linking Via Web Flow - I can create a link to the same PSN account when the existing link has not expired (without a valid access token cached)",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(without-a-valid-access-token-cached);;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 183,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 184,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 185,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 186,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 187,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 188,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 189,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 380,
              "status": "passed"
            },
            "line": 190,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 191,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 180,
            "name": "@createLinkApi"
          },
          {
            "line": 181,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 211,
        "name": "Linking Via Web Flow - I can create a link to the same PSN account when the existing link has expired (without a valid access token cached and non refreshable token)",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-expired-(without-a-valid-access-token-cached-and-non-refreshable-token);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 200,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 375,
              "status": "passed"
            },
            "line": 201,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 202,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 203,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 204,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 205,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 206,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 215,
              "status": "passed"
            },
            "line": 207,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 127,
              "status": "passed"
            },
            "line": 208,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 197,
            "name": "@createLinkApi"
          },
          {
            "line": 198,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 212,
        "name": "Linking Via Web Flow - I can create a link to the same PSN account when the existing link has expired (without a valid access token cached and non refreshable token)",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-expired-(without-a-valid-access-token-cached-and-non-refreshable-token);;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 200,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 608,
              "status": "passed"
            },
            "line": 201,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 202,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 203,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 204,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 205,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 206,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 200,
              "status": "passed"
            },
            "line": 207,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 208,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 197,
            "name": "@createLinkApi"
          },
          {
            "line": 198,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 229,
        "name": "Linking Via Web Flow - I Can create a link when the other link to the partner account has expired",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-when-the-other-link-to-the-partner-account-has-expired;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 217,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 574,
              "status": "passed"
            },
            "line": 218,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 219,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 220,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161,
              "status": "passed"
            },
            "line": 221,
            "name": "PSN account firstPsnAccount has expired link to spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 222,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 223,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 224,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 179,
              "status": "passed"
            },
            "line": 225,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 226,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 214,
            "name": "@createLinkApi"
          },
          {
            "line": 215,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 230,
        "name": "Linking Via Web Flow - I Can create a link when the other link to the partner account has expired",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-when-the-other-link-to-the-partner-account-has-expired;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 217,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 659,
              "status": "passed"
            },
            "line": 218,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 455,
              "status": "passed"
            },
            "line": 219,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 220,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145,
              "status": "passed"
            },
            "line": 221,
            "name": "PSN account firstPsnAccount has expired link to spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 222,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 223,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 224,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 121,
              "status": "passed"
            },
            "line": 225,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 226,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 214,
            "name": "@createLinkApi"
          },
          {
            "line": 215,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 248,
        "name": "Linking Via Web Flow - I Can create a link when the other link to that partner account has not expired but cannot be refreshed",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-when-the-other-link-to-that-partner-account-has-not-expired-but-cannot-be-refreshed;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 601,
              "status": "passed"
            },
            "line": 237,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 379,
              "status": "passed"
            },
            "line": 238,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 239,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 240,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 241,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 242,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 243,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 168,
              "status": "passed"
            },
            "line": 244,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 245,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 233,
            "name": "@createLinkApi"
          },
          {
            "line": 234,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 249,
        "name": "Linking Via Web Flow - I Can create a link when the other link to that partner account has not expired but cannot be refreshed",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-a-link-when-the-other-link-to-that-partner-account-has-not-expired-but-cannot-be-refreshed;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 236,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 488,
              "status": "passed"
            },
            "line": 237,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 346,
              "status": "passed"
            },
            "line": 238,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 239,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 240,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 241,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 242,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 243,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173,
              "status": "passed"
            },
            "line": 244,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 245,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 233,
            "name": "@createLinkApi"
          },
          {
            "line": 234,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 250,
            "value": "#   Deletion of firstPsnAccount link is not needed as the expired link gets deleted in multi link validator"
          }
        ],
        "line": 257,
        "name": "Linking Via Web Flow - I can create and delete a link using KSN client and provide X-Psn-Origin-Access-Token header with user token and BI event should have account id from token",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-and-delete-a-link-using-ksn-client-and-provide-x-psn-origin-access-token-header-with-user-token-and-bi-event-should-have-account-id-from-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 258,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 259,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 260,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:s2s.partner.link.account.get connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 261
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 262,
            "name": "I save ctx(\u0027accessToken\u0027) as originAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 263,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 264,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 265,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 134,
              "status": "passed"
            },
            "line": 266,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using KSN and X-Psn-Origin-Access-Token of originAccessToken",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 267,
            "name": "I can delete firstPsnAccount link to spotify account testSpotifyAccount using KSN and X-Psn-Origin-Access-Token of originAccessToken",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 252,
            "name": "@clientCredentials"
          },
          {
            "line": 253,
            "name": "@createLinkApi"
          },
          {
            "line": 254,
            "name": "@getLinkApi"
          },
          {
            "line": 255,
            "name": "@deleteLinkApi"
          },
          {
            "line": 256,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 274,
        "name": "Linking Via Web Flow - I can create and delete a link using KSN client and provide X-Psn-Origin-Access-Token header with client credential token and BI event should have account id from api info",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-and-delete-a-link-using-ksn-client-and-provide-x-psn-origin-access-token-header-with-client-credential-token-and-bi-event-should-have-account-id-from-api-info",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 275,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 462,
              "status": "passed"
            },
            "line": 276,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 277,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 278
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 279,
            "name": "I save ctx(\u0027accessToken\u0027) as originAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 280,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 281,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 282,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154,
              "status": "passed"
            },
            "line": 283,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using KSN and X-Psn-Origin-Access-Token of originAccessToken",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 284,
            "name": "I can delete firstPsnAccount link to spotify account testSpotifyAccount using KSN and X-Psn-Origin-Access-Token of originAccessToken",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 269,
            "name": "@clientCredentials"
          },
          {
            "line": 270,
            "name": "@createLinkApi"
          },
          {
            "line": 271,
            "name": "@getLinkApi"
          },
          {
            "line": 272,
            "name": "@deleteLinkApi"
          },
          {
            "line": 273,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 291,
        "name": "Linking Via Web Flow - I can create and delete a link using KSN client and provide X-Psn-Origin-Access-Token header with invalid token and BI event should have account id from api info",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-and-delete-a-link-using-ksn-client-and-provide-x-psn-origin-access-token-header-with-invalid-token-and-bi-event-should-have-account-id-from-api-info",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 292,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 293,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 294,
            "name": "I save invalid as originAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 295,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 296,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 297,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143,
              "status": "passed"
            },
            "line": 298,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using KSN and X-Psn-Origin-Access-Token of originAccessToken",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 299,
            "name": "I can delete firstPsnAccount link to spotify account testSpotifyAccount using KSN and X-Psn-Origin-Access-Token of originAccessToken",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 286,
            "name": "@clientCredentials"
          },
          {
            "line": 287,
            "name": "@createLinkApi"
          },
          {
            "line": 288,
            "name": "@getLinkApi"
          },
          {
            "line": 289,
            "name": "@deleteLinkApi"
          },
          {
            "line": 290,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 306,
        "name": "Linking Via Web Flow - I can create and delete a link using KSN client and do not provide X-Psn-Origin-Access-Token header and BI event should have account id from api info",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;linking-via-web-flow---i-can-create-and-delete-a-link-using-ksn-client-and-do-not-provide-x-psn-origin-access-token-header-and-bi-event-should-have-account-id-from-api-info",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 307,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 495,
              "status": "passed"
            },
            "line": 308,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 309,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 310,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 311,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145,
              "status": "passed"
            },
            "line": 312,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using KSN and no X-Psn-Origin-Access-Token",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 313,
            "name": "I can delete firstPsnAccount link to spotify account testSpotifyAccount using KSN and no X-Psn-Origin-Access-Token",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 301,
            "name": "@clientCredentials"
          },
          {
            "line": 302,
            "name": "@createLinkApi"
          },
          {
            "line": 303,
            "name": "@getLinkApi"
          },
          {
            "line": 304,
            "name": "@deleteLinkApi"
          },
          {
            "line": 305,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 329,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 392,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 334,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 434,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 339,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 532,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 344,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 494,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 349,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 354,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 458,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 359,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 355,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 364,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 573,
              "status": "passed"
            },
            "line": 318,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 319,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 320
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 321
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 322
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 323
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 324,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 315,
            "name": "@cors"
          },
          {
            "line": 316,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 369,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight request with unsupported origin - should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request-with-unsupported-origin---should-not-return-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 394,
              "status": "passed"
            },
            "line": 370,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 371,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 372
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 373
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 374
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 375
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 376,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 366,
            "name": "@steam"
          },
          {
            "line": 367,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 368,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 391,
            "value": "# invalid header (Invalid-Header is not a valid header used in PSN services)"
          }
        ],
        "line": 392,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 397,
              "status": "passed"
            },
            "line": 382,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 383,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 384
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 385
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Invalid-Header, X-Psn-Platform, X-Psn-Request-Id,X-Psn-Sampled,X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 386
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 387
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 388,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 378,
            "name": "@steam"
          },
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 380,
            "name": "@cors"
          },
          {
            "line": 379,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 393,
            "value": "# unsupported header (X-Correlation-Id is a valid header used in PSN services but is not a supported header for CIS for access control"
          }
        ],
        "line": 394,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 429,
              "status": "passed"
            },
            "line": 382,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 383,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 384
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 385
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "X-Correlation-Id, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 386
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 387
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 388,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 378,
            "name": "@steam"
          },
          {
            "line": 1,
            "name": "@webFlow"
          },
          {
            "line": 380,
            "name": "@cors"
          },
          {
            "line": 379,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 399,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight request with invalid access control request method - should not return Access-Control-Allow-Methods",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request-with-invalid-access-control-request-method---should-not-return-access-control-allow-methods",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 472,
              "status": "passed"
            },
            "line": 400,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 401,
            "name": "I make a getPartnerAuthorizeUrlCors.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 402
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 403
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 404
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 405
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 406,
            "name": "I verify all CORS headers in response for options call with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 396,
            "name": "@steam"
          },
          {
            "line": 397,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 398,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 411,
        "name": "Get Partner Authorize Url valid CORS Pre-Flight request with no access control or origin headers - should not return Access-Control-Allow-Origin, Access-Control-Allow-Methods, or Access-Control-Allow-Headers",
        "description": "",
        "id": "create-link-using-web-flow---positive-scenarios;get-partner-authorize-url-valid-cors-pre-flight-request-with-no-access-control-or-origin-headers---should-not-return-access-control-allow-origin,-access-control-allow-methods,-or-access-control-allow-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 412,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 413,
            "name": "I make a getPartnerAuthorizeUrlCorsNoHeaders.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 414
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 415,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 408,
            "name": "@steam"
          },
          {
            "line": 409,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 410,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "Create Link using web flow - Positive scenarios",
    "description": "",
    "id": "create-link-using-web-flow---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/create/oauth2/createLinkWithWebFlowPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@webFlow"
      },
      {
        "line": 2,
        "name": "@wiremock"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 6,
        "name": "Lookup psn account id using partner account id when not providing a request body - should return 400 error for json validation error",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---negative-scenarios;lookup-psn-account-id-using-partner-account-id-when-not-providing-a-request-body---should-return-400-error-for-json-validation-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 8,
            "name": "I make a getClientCredentialsToken.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save spotify as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a bulkGetAccountIdsNoRequestBody.json request expecting 400 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 12
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 13
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 16,
        "name": "Lookup psn account id using partner account id for expired link - should return 200 with no value for psnAccounts in response body",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---negative-scenarios;lookup-psn-account-id-using-partner-account-id-for-expired-link---should-return-200-with-no-value-for-psnaccounts-in-response-body",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I have a random apple partner account testPartnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 402,
              "status": "passed"
            },
            "line": 18,
            "name": "I have created a new PSN account newPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "comments": [
              {
                "line": 19,
                "value": "# create valid link"
              }
            ],
            "line": 20,
            "name": "PSN account newPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 21,
                "value": "# verify get 1 element in response for the link"
              }
            ],
            "line": 22,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 23,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 25,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I verify that the json array body.psnAccounts in response has 1 elements",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 326,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# expire the link"
              }
            ],
            "line": 28,
            "name": "PSN account newPsnAccount has expired link to apple account testPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 29,
                "value": "# verify get no elements in response"
              }
            ],
            "line": 30,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 31,
            "name": "I make a getClientCredentialsToken.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 32,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 33,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify that body.psnAccounts in response is not present",
            "keyword": "And "
          }
        ]
      },
      {
        "line": 37,
        "name": "Lookup psn account id for a restricted or invalid partner - should return an unsupported partner error",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---negative-scenarios;lookup-psn-account-id-for-a-restricted-or-invalid-partner---should-return-an-unsupported-partner-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 398,
              "status": "passed"
            },
            "line": 38,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 39
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I save testpartner as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 41,
            "name": "I make a bulkGetAccountIds.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 43
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 36,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 46,
        "name": "Lookup psn account id using partner account id with an invalid token - should return 401 error for unauthorized access",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---negative-scenarios;lookup-psn-account-id-using-partner-account-id-with-an-invalid-token---should-return-401-error-for-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I have a random apple partner account testPartnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 48,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I save apple as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 50,
            "name": "I make a bulkGetAccountIds.json request expecting 401 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 52
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 53
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 54
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 56,
        "name": "Lookup psn account id using partner account id with a user token - should return 403 error for invalid authorization",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---negative-scenarios;lookup-psn-account-id-using-partner-account-id-with-a-user-token---should-return-403-error-for-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 57,
            "name": "I have a random apple partner account testPartnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 58,
            "name": "I save apple as partnerId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 439,
              "status": "passed"
            },
            "line": 59,
            "name": "I have created a new PSN account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 60,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 61
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 62,
            "name": "I make a bulkGetAccountIds.json request expecting 403 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 64
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 65
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 66
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Look up psn account ids for given partner account ids - negative scenarios",
    "description": "",
    "id": "look-up-psn-account-ids-for-given-partner-account-ids---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/read/queryPsnAccountByPartnerAccountNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@queryPsnAccountByPartnerAccount"
      },
      {
        "line": 3,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 16,
        "name": "Delete a link created using device code flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-device-code-flow---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 460,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 556,
              "status": "passed"
            },
            "line": 11,
            "name": "I can link testPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 102,
              "status": "passed"
            },
            "line": 13,
            "name": "I can delete testPsnAccount link for partner spotify using valid clientCredentials token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 6,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 17,
        "name": "Delete a link created using device code flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-device-code-flow---should-remove-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 467,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 516,
              "status": "passed"
            },
            "line": 11,
            "name": "I can link testPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 116,
              "status": "passed"
            },
            "line": 13,
            "name": "I can delete testPsnAccount link for partner spotify using valid password token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 6,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 32,
        "name": "Delete a link created using createLinkWithOauth2AuthCodeSdk via sdk API - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-createlinkwithoauth2authcodesdk-via-sdk-api---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 493,
              "status": "passed"
            },
            "line": 23,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 459,
              "status": "passed"
            },
            "line": 27,
            "name": "I can link testPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 83,
              "status": "passed"
            },
            "line": 29,
            "name": "I can delete testPsnAccount link for partner spotify using valid clientCredentials token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 19,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 33,
        "name": "Delete a link created using createLinkWithOauth2AuthCodeSdk via sdk API - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-createlinkwithoauth2authcodesdk-via-sdk-api---should-remove-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 526,
              "status": "passed"
            },
            "line": 23,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 480,
              "status": "passed"
            },
            "line": 27,
            "name": "I can link testPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 108,
              "status": "passed"
            },
            "line": 29,
            "name": "I can delete testPsnAccount link for partner spotify using valid password token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 19,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 20,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 48,
        "name": "Delete a link created using createLinkWithWebFlow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-createlinkwithwebflow---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 421,
              "status": "passed"
            },
            "line": 39,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 174,
              "status": "passed"
            },
            "line": 43,
            "name": "I can link testPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 91,
              "status": "passed"
            },
            "line": 45,
            "name": "I can delete testPsnAccount link for partner spotify using valid clientCredentials token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 35,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 36,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 49,
        "name": "Delete a link created using createLinkWithWebFlow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-createlinkwithwebflow---should-remove-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 39,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 190,
              "status": "passed"
            },
            "line": 43,
            "name": "I can link testPsnAccount to spotify account testSpotifyAccount using createLinkWithWebFlow",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 96,
              "status": "passed"
            },
            "line": 45,
            "name": "I can delete testPsnAccount link for partner spotify using valid password token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 35,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          },
          {
            "line": 36,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 59,
        "name": "Delete a link that has expired - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-that-has-expired---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 53,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 469,
              "status": "passed"
            },
            "line": 54,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 189,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has expired link to spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "error_message": "java.lang.AssertionError: Unexpected HTTP response received expected\u003d204 actual\u003d404 \n request: RequestHolder{request\u003dRequestDefinition{method\u003dDELETE, url\u003d\u0027http://connected-identity.e1-np-eib.navcloud.sonynei.net/api/connectAccount/v2/users/6489260170432711887/partners/spotify/link\u0027, headers\u003d{content-type\u003dapplication/json, Authorization\u003dBearer eyJraWQiOiJucF8xIiwiYWxnIjoiUlMyNTYifQ.eyJhdXRoel9jIjoiZU5xclZpcE96aTlJVmJKU1NzN1B5MHROTGtsTjhVeEp6U3ZKTEttMEtqWXExaXRJTENySlN5M1N5OG5NeTlaTFRFN09MODByMGN0TnpFdE1UMVdxQlFDK0VSYmMiLCJjbGllbnRfaWQiOiIzNGM1MWFhMC03ZDU2LTRhOWUtOWI0Yi00N2Y0NjkwYjFhZjUiLCJkY2ltX2lkIjoiY2UyZmU4MmQtMmM5ZS00YjU4LTljYmYtYzU5ZmMzYTg2ZTQ1IiwiZW52X2lzc19pZCI6IjQiLCJleHAiOjE2Nzg0NTM5NjEsImdyYW50X3R5cGUiOiJjbGllbnRfY3JlZGVudGlhbHMiLCJpYXQiOjE2Nzg0NTI3NjEsImlzcyI6Imh0dHBzOi8vYXV0aC5hY2NvdW50LnNvbnkuY29tLyIsImp0aSI6ImVmYmI2YmU1LTJjMjctNGZmOS1hNGRlLTZmN2RiMGMzMmQyMiIsInZlciI6IjIifQ.MbQGDXR7-xdhYaJoO2P5DBELcXWLI83NUMhDCQIQTk3egLkukXwcMKVzxkadyEkpv4C92p4M2KGAVL3csPNHQtpsFpEpWY7VQEjZKGr_Do86JgaOayUAHipbch_CbQshktSZ_ljsh6jagoTF6SmB-DYULM-O6fKQcvqSPyJbTwraeoqKXTaWccfgretyhd2ybqJwbHyX7RZ1VGCSLn23GgUveVjUR6gzdEXhpdwyjqv9_gmoxQzsWWXmSCFBGALpCON1mOOTr86dnY5-JCNX28W_Bl9dnaGCJBRk7ujFxLTVBYazStprRH0C_xXRuMDTOOLsYUJBEw6XjOMgv8Mcy8KVAoRaBWyeMNC0hT1AgK5MB_-xdl5X_aj3jMBAAKlikKzKgKaR_TlWf6U6ULd0iEvVucjJ_selJ7hZm3UhW0iE-cXtKM2J9tji4EppmV8dhfwmoEVb8m1ZvH_B8tFLd5l03nTZa-miUXvNST3A_H9ejfPrxab-g8g0UXBvHiEI, X-Cis-Mock-Partner\u003dfalse}, formParams\u003dnull, queryParams\u003dnull, cookies\u003dnull, body\u003dnull}, metadata\u003d{expectedStatusCode\u003d204}, responseExtraction\u003dnull} \n response: ResponseHolder{statusCode\u003d404, statusText\u003d\u0027\u0027, body\u003d{\"error\":{\"code\":1064968,\"message\":\"Account is not linked with partner\",\"referenceId\":\"dab95154-a48e-4134-b951-54a48e7134a9\",\"validationErrors\":[]}}, contentType\u003d\u0027application/json\u0027, headers\u003d{X-Psn-Request-Id\u003ddab95154-a48e-4134-b951-54a48e7134a9, Access-Control-Expose-Headers\u003dAccess-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Max-Age,Content-Length,Location,Retry-After,Strict-Transport-Security,X-Content-Type-Options,X-Psn-Correlation-Id,X-Psn-Error-Code,X-Psn-Experiment-Id,X-Psn-Request-Id, X-Psn-Error-Code\u003d1064968, Server\u003dnginx, Cache-Control\u003dno-store, Access-Control-Allow-Credentials\u003dtrue, Connection\u003dkeep-alive, Content-Length\u003d148, X-Psn-Correlation-Id\u003d8336a5a8-b60f-4ddc-b6a5-a8b60f5ddc06, Access-Control-Max-Age\u003d86400, Date\u003dFri, 10 Mar 2023 12:52:41 GMT, Content-Type\u003dapplication/json}, cookies\u003d[]}\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.assertStatusCode(AsyncHttpSteps.java:112)\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.lambda$commonExecuteRequest$0(AsyncHttpSteps.java:88)\n\tat io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:59)\n\tat io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:67)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:23)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:12)\n\tat org.asynchttpclient.AsyncCompletionHandler.onCompleted(AsyncCompletionHandler.java:66)\n\tat org.asynchttpclient.netty.NettyResponseFuture.loadContent(NettyResponseFuture.java:222)\n\tat org.asynchttpclient.netty.NettyResponseFuture.done(NettyResponseFuture.java:257)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.finishUpdate(AsyncHttpClientHandler.java:241)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleChunk(HttpHandler.java:114)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleRead(HttpHandler.java:143)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.channelRead(AsyncHttpClientHandler.java:78)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 56,
            "name": "I can delete testPsnAccount link for partner spotify using valid clientCredentials token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 51,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 60,
        "name": "Delete a link that has expired - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-that-has-expired---should-remove-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 53,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 366,
              "status": "passed"
            },
            "line": 54,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 178,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has expired link to spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "error_message": "java.lang.AssertionError: Unexpected HTTP response received expected\u003d204 actual\u003d404 \n request: RequestHolder{request\u003dRequestDefinition{method\u003dDELETE, url\u003d\u0027http://connected-identity.e1-np-eib.navcloud.sonynei.net/api/connectAccount/v2/users/8400102073050533997/partners/spotify/link\u0027, headers\u003d{content-type\u003dapplication/json, Authorization\u003dBearer eyJraWQiOiJucF8xIiwiYWxnIjoiUlMyNTYifQ.eyJhY2NvdW50X2lkIjoiODQwMDEwMjA3MzA1MDUzMzk5NyIsImFjY291bnRfdXVpZCI6IjhmMDg2Y2VmLWU2ZTItNDgzMS1iNjc1LWJkOTYxZjFkZTg0MCIsImFnZSI6NTIsImF1dGh6X2MiOiJlTnFyVmlwT3ppOUlWYkpTU3M3UHkwdE5Ma2xOOFV4SnpTdkpMS20wS2tnc0tzbExMZExMeWN6TDFrdE1UczR2elN2UnkwM01TMHhQVmFvRkFHdjVGWlkiLCJjbGllbnRfaWQiOiIzNGM1MWFhMC03ZDU2LTRhOWUtOWI0Yi00N2Y0NjkwYjFhZjUiLCJkY2ltX2lkIjoiY2UyZmU4MmQtMmM5ZS00YjU4LTljYmYtYzU5ZmMzYTg2ZTQ1IiwiZW52X2lzc19pZCI6IjQiLCJleHAiOjE2Nzg0NTM5NjEsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsImlhdCI6MTY3ODQ1Mjc2MSwiaXNfY2hpbGQiOmZhbHNlLCJpc3MiOiJodHRwczovL2F1dGguYWNjb3VudC5zb255LmNvbS8iLCJqdGkiOiI0MTJjMzE3ZS01NjAxLTQ2MjQtODk4ZC04ZDA0YTkxZGZlNDIiLCJsZWdhbF9jb3VudHJ5IjoiVVMiLCJsb2NhbGUiOiJlbi1VUyIsInVzZXJfZGV2aWNlX2lwIjoiMTAuMjQyLjIzMC4xNTEiLCJ2ZXIiOiIyIn0.YfXENpzsDJa9C6pS6GXJWeb3Mg3nh8QZ7C8PZh6G-7LjWdyPu-gWdIy1StuG4oRb5nT_k7v-_aVoBhCyOLxNDGtqc-zgmSApzc6tCPKfG6FQ5vosj_mBSY7ar6ZkMisz1fKm9LCDiqnhvJ10hnDY3f7OR6LK7Zz_BMDs-J1Casr0PhkQVYlvayl-Q-Ds_dx8hMwZhSBmOb0XiudUIUJt7O7p4ZN4oWZ-HiXEaGxg-L7cOZZnw2Y-ECNQVuPyYKcARJDF9BPeUbX7wwozWr6I7QkmDrEvV-G2E2Ge-kxCLGsr7S4QknNPQWafjJXyfJsbJKKI6f9OmVXZBU5DzWp23TAvc15iEjW_PBnZo-ox57LydtjxKlcPu_PBeqLtPqGTYsUy0dHF0BeGznWRukSHP0omK2GtkKTeUf74vuhYzlYZxRL2N_9QYzhNGtMnCqdeFdIgu06g1siG4Cg7xG1XZa3y5K3YanWjcFh6CrsAl1owM8M8YwbDuGkq9M250j48, X-Cis-Mock-Partner\u003dfalse}, formParams\u003dnull, queryParams\u003dnull, cookies\u003dnull, body\u003dnull}, metadata\u003d{expectedStatusCode\u003d204}, responseExtraction\u003dnull} \n response: ResponseHolder{statusCode\u003d404, statusText\u003d\u0027\u0027, body\u003d{\"error\":{\"code\":1064968,\"message\":\"Account is not linked with partner\",\"referenceId\":\"717e1547-f8ba-4f42-be15-47f8ba6f42a7\",\"validationErrors\":[]}}, contentType\u003d\u0027application/json\u0027, headers\u003d{X-Psn-Request-Id\u003d717e1547-f8ba-4f42-be15-47f8ba6f42a7, Access-Control-Expose-Headers\u003dAccess-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Max-Age,Content-Length,Location,Retry-After,Strict-Transport-Security,X-Content-Type-Options,X-Psn-Correlation-Id,X-Psn-Error-Code,X-Psn-Experiment-Id,X-Psn-Request-Id, X-Psn-Error-Code\u003d1064968, Server\u003dnginx, Cache-Control\u003dno-store, Access-Control-Allow-Credentials\u003dtrue, Connection\u003dkeep-alive, Content-Length\u003d148, X-Psn-Correlation-Id\u003d5ebe1f0e-3094-476a-be1f-0e3094b76ab5, Access-Control-Max-Age\u003d86400, Date\u003dFri, 10 Mar 2023 12:52:41 GMT, Content-Type\u003dapplication/json}, cookies\u003d[]}\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.assertStatusCode(AsyncHttpSteps.java:112)\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.lambda$commonExecuteRequest$0(AsyncHttpSteps.java:88)\n\tat io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:59)\n\tat io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:67)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:23)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:12)\n\tat org.asynchttpclient.AsyncCompletionHandler.onCompleted(AsyncCompletionHandler.java:66)\n\tat org.asynchttpclient.netty.NettyResponseFuture.loadContent(NettyResponseFuture.java:222)\n\tat org.asynchttpclient.netty.NettyResponseFuture.done(NettyResponseFuture.java:257)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.finishUpdate(AsyncHttpClientHandler.java:241)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleChunk(HttpHandler.java:114)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleRead(HttpHandler.java:143)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.channelRead(AsyncHttpClientHandler.java:78)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 56,
            "name": "I can delete testPsnAccount link for partner spotify using valid password token",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 51,
            "name": "@spotify"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 64,
        "name": "Delete a link created using createPassiveLinkWithPartnerSdk via sdk API - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-createpassivelinkwithpartnersdk-via-sdk-api---should-remove-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 463,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 86,
              "status": "passed"
            },
            "line": 67,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 117,
              "status": "passed"
            },
            "line": 68,
            "name": "I can delete testPsnAccount link for partner steam using valid clientCredentials token",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 62,
            "name": "@steam"
          },
          {
            "line": 63,
            "name": "@clientCredentials"
          }
        ]
      },
      {
        "line": 87,
        "name": "Delete a link created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-quick-link-flow---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 421,
              "status": "passed"
            },
            "line": 78,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 98,
              "status": "passed"
            },
            "line": 80,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 68,
              "status": "passed"
            },
            "line": 82,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 62,
              "status": "passed"
            },
            "line": 83,
            "name": "I can delete psnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 84,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 73,
            "name": "@spotify"
          },
          {
            "line": 75,
            "name": "@deleteLink"
          },
          {
            "line": 71,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 70,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 76,
            "name": "@quickLinkApi"
          },
          {
            "line": 72,
            "name": "@apple"
          },
          {
            "line": 74,
            "name": "@twitch"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 88,
        "name": "Delete a link created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-quick-link-flow---should-remove-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 445,
              "status": "passed"
            },
            "line": 78,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I have a random testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 80,
            "name": "PSN account psnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 82,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 85,
              "status": "passed"
            },
            "line": 83,
            "name": "I can delete psnAccount link for partner testbidirectionalpartner",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 84,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 73,
            "name": "@spotify"
          },
          {
            "line": 75,
            "name": "@deleteLink"
          },
          {
            "line": 71,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 70,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 76,
            "name": "@quickLinkApi"
          },
          {
            "line": 72,
            "name": "@apple"
          },
          {
            "line": 74,
            "name": "@twitch"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 89,
        "name": "Delete a link created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-quick-link-flow---should-remove-link;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 671,
              "status": "passed"
            },
            "line": 78,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I have a random apple partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 80,
            "name": "PSN account psnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 82,
            "name": "I can verify psnAccount link to partner apple account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 83,
            "name": "I can delete psnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 84,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 73,
            "name": "@spotify"
          },
          {
            "line": 75,
            "name": "@deleteLink"
          },
          {
            "line": 71,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 70,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 76,
            "name": "@quickLinkApi"
          },
          {
            "line": 72,
            "name": "@apple"
          },
          {
            "line": 74,
            "name": "@twitch"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 90,
        "name": "Delete a link created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-quick-link-flow---should-remove-link;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 491,
              "status": "passed"
            },
            "line": 78,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I have a random spotify partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 80,
            "name": "PSN account psnAccount has valid link to spotify account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 54,
              "status": "passed"
            },
            "line": 82,
            "name": "I can verify psnAccount link to partner spotify account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 83,
            "name": "I can delete psnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 84,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 73,
            "name": "@spotify"
          },
          {
            "line": 75,
            "name": "@deleteLink"
          },
          {
            "line": 71,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 70,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 76,
            "name": "@quickLinkApi"
          },
          {
            "line": 72,
            "name": "@apple"
          },
          {
            "line": 74,
            "name": "@twitch"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      },
      {
        "line": 91,
        "name": "Delete a link created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link---positive-scenarios;delete-a-link-created-using-quick-link-flow---should-remove-link;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 420,
              "status": "passed"
            },
            "line": 78,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 79,
            "name": "I have a random twitch partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 80,
            "name": "PSN account psnAccount has valid link to twitch account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 68,
              "status": "passed"
            },
            "line": 82,
            "name": "I can verify psnAccount link to partner twitch account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 77,
              "status": "passed"
            },
            "line": 83,
            "name": "I can delete psnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 84,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 73,
            "name": "@spotify"
          },
          {
            "line": 75,
            "name": "@deleteLink"
          },
          {
            "line": 71,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 70,
            "name": "@discord"
          },
          {
            "line": 1,
            "name": "@positive"
          },
          {
            "line": 76,
            "name": "@quickLinkApi"
          },
          {
            "line": 72,
            "name": "@apple"
          },
          {
            "line": 74,
            "name": "@twitch"
          },
          {
            "line": 2,
            "name": "@deleteLinkApi"
          }
        ]
      }
    ],
    "name": "Delete link - positive scenarios",
    "description": "",
    "id": "delete-link---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/delete/oauth2/deleteLinkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@positive"
      },
      {
        "line": 2,
        "name": "@deleteLinkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 27,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 398,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 28,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 619,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 29,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 478,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 54,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that cannot be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 30,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 643,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 31,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 694,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 32,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 445,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 33,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 595,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 34,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 632,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 35,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 465,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "$MISSING"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 40,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 482,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 41,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 409,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 42,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 415,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that cannot be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 43,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 387,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 44,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 397,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "mockDisplayName:[a-zA-Z0-9]{0,30}"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 45,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 461,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 46,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 374,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 47,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 387,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 48,
        "name": "Get Spotify partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-spotify-partner-link-info-with-password-token---should-return-partner-link-info;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 12,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 15
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 16
              },
              {
                "cells": [
                  "returnProfile",
                  "$MISSING"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 22
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 5,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 373,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 470,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 80,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 73,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 464,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "$MISSING"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 79,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random amazon partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 439,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to amazon account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 80,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random amazon partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 436,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to amazon account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 81,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random amazon partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to amazon account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a password token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "$MISSING"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 87,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 88,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 438,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 89,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 445,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "$MISSING"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 95,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random amazon partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 355,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to amazon account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 96,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random amazon partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 368,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to amazon account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 97,
        "name": "Get partner link info with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-info-with-password-token---should-return-partner-link-info;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random amazon partner account testPartnerAccount",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 386,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 55,
            "name": "PSN account testPsnAccount has valid link to amazon account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              1,
              3,
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 56,
            "name": "I get a client credentials token",
            "matchedColumns": [
              5,
              6,
              7
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectedIdentity:s2s.partner.link.account.get"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 58,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 59
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "$MISSING"
                ],
                "line": 60
              },
              {
                "cells": [
                  "returnProfile",
                  "$MISSING"
                ],
                "line": 61
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 63
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 65
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          },
          {
            "line": 50,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 101,
        "name": "Get Partner Link for Steam - should return 200 and correct CORS headers and not Access-Control-Allow-Origin",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-for-steam---should-return-200-and-correct-cors-headers-and-not-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 102,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 394,
              "status": "passed"
            },
            "line": 103,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 104,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 105,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 106,
            "name": "I make a getAccountLinkDeepTokenVerification.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 107
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 108
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 109
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 110,
            "name": "I verify all CORS headers in response with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 99,
            "name": "@wiremock"
          },
          {
            "line": 100,
            "name": "@steam"
          }
        ]
      },
      {
        "line": 114,
        "name": "Get Partner Link for Steam with supported origin in header - should return 200 and correct CORS headers and Access-Control-Allow-Origin",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-partner-link-for-steam-with-supported-origin-in-header---should-return-200-and-correct-cors-headers-and-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 416,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 87,
              "status": "passed"
            },
            "line": 117,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 118,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 119,
            "name": "I make a getAccountLinkDeepTokenVerificationWithOriginHeader.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 120
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 121
              },
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 122
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 123
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 124,
            "name": "I verify all CORS headers in response with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 112,
            "name": "@steam"
          },
          {
            "line": 113,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 139,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 140,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 363,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 141,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 333,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 146,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 147,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 450,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 148,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 397,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 153,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 374,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 154,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 368,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 155,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 408,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 160,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 356,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 161,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 492,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 162,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 379,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 167,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 363,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 168,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 390,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 169,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 489,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 174,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 548,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 175,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 348,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 176,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 387,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 181,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 454,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 182,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 561,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 183,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 357,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 188,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 549,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to GET",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 189,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 504,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "POST"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to POST",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 190,
        "name": "Get Account Link valid CORS Pre-Flight Request - should return all CORS response headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request---should-return-all-cors-response-headers;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 352,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 129,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 130
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 131
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 132
              },
              {
                "cells": [
                  "access-control-request-method",
                  "DELETE"
                ],
                "line": 133
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 134,
            "name": "I verify all CORS headers in response for options call with Allow-Methods equal to DELETE",
            "matchedColumns": [
              1
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 126,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 194,
        "name": "Get Account Link valid CORS Pre-Flight request with unsupported origin - should not return Access-Control-Allow-Origin",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request-with-unsupported-origin---should-not-return-access-control-allow-origin",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 477,
              "status": "passed"
            },
            "line": 195,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 196,
            "name": "I make a getAccountLinkCors.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 197
              },
              {
                "cells": [
                  "origin",
                  "https://invalid.origin.com"
                ],
                "line": 198
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 199
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 200
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 201,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 192,
            "name": "@steam"
          },
          {
            "line": 193,
            "name": "@cors"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 215,
            "value": "# invalid header (Invalid-Header is not a valid header used in PSN services)"
          }
        ],
        "line": 216,
        "name": "Get Account Link valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 489,
              "status": "passed"
            },
            "line": 206,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 207,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 208
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 209
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Invalid-Header, X-Psn-Platform, X-Psn-Request-Id,X-Psn-Sampled,X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 210
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 211
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 212,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 203,
            "name": "@steam"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 204,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 217,
            "value": "# unsupported header (X-Correlation-Id is a valid header used in PSN services but is not a supported header for CIS for access control"
          }
        ],
        "line": 218,
        "name": "Get Account Link valid CORS Pre-Flight request with invalid or unsupported access control request headers - should not return Access-Control-Allow-Headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request-with-invalid-or-unsupported-access-control-request-headers---should-not-return-access-control-allow-headers;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 392,
              "status": "passed"
            },
            "line": 206,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 207,
            "name": "I make a getAccountLinkCors.json request:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 208
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 209
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "X-Correlation-Id, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 210
              },
              {
                "cells": [
                  "access-control-request-method",
                  "GET"
                ],
                "line": 211
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 212,
            "name": "I verify all CORS headers in response for options call with Allow-Headers missing with Allow-Methods equal to GET",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 203,
            "name": "@steam"
          },
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 204,
            "name": "@cors"
          },
          {
            "line": 2,
            "name": "@getLinkApi"
          }
        ]
      },
      {
        "line": 222,
        "name": "Get Account Link valid CORS Pre-Flight request with invalid access control request method - should not return Access-Control-Allow-Methods",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request-with-invalid-access-control-request-method---should-not-return-access-control-allow-methods",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 428,
              "status": "passed"
            },
            "line": 223,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 224,
            "name": "I make a getAccountLinkCors.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 225
              },
              {
                "cells": [
                  "origin",
                  "https://id.e1-np.sonyentertainmentnetwork.com"
                ],
                "line": 226
              },
              {
                "cells": [
                  "access-control-request-headers",
                  "Content-Type, X-Psn-Platform, X-Psn-Request-Id, X-Psn-Sampled, X-Psn-Span-Id, X-Psn-Trace-Id"
                ],
                "line": 227
              },
              {
                "cells": [
                  "access-control-request-method",
                  "PUT"
                ],
                "line": 228
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 229,
            "name": "I verify all CORS headers in response for options call with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 220,
            "name": "@steam"
          },
          {
            "line": 221,
            "name": "@cors"
          }
        ]
      },
      {
        "line": 233,
        "name": "Get Account Link valid CORS Pre-Flight request with no access control or origin headers - should not return Access-Control-Allow-Origin, Access-Control-Allow-Methods, or Access-Control-Allow-Headers",
        "description": "",
        "id": "get-partner-link-info---positive-scenarios;get-account-link-valid-cors-pre-flight-request-with-no-access-control-or-origin-headers---should-not-return-access-control-allow-origin,-access-control-allow-methods,-or-access-control-allow-headers",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 395,
              "status": "passed"
            },
            "line": 234,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 235,
            "name": "I make a getAccountLinkCorsNoHeaders.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 236
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 237,
            "name": "I verify all CORS headers in response for options call with Allow-Origin missing with Allow-Headers missing with Allow-Methods missing",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 231,
            "name": "@steam"
          },
          {
            "line": 232,
            "name": "@cors"
          }
        ]
      }
    ],
    "name": "Get Partner Link Info - positive scenarios",
    "description": "",
    "id": "get-partner-link-info---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/read/oauth2/getLinkInfoPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getLinkApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 17,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 457,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 18,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 471,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 19,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 20,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 413,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 26,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 417,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 27,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 442,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 28,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 458,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 29,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 466,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 35,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 495,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithValidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 36,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 373,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 37,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 67,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 38,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 44,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 404,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 80,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithValidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 45,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 395,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 68,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 46,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 429,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 47,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 471,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 442,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithValidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 54,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 357,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 85,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid password token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 375,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 56,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 473,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 54,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid password token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 62,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 374,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithValidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 63,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 442,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid clientCredentials token and deepTokenVerification flag set to true",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 64,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 630,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 76,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 65,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag set - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-set---should-return-partner-token;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 518,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 9,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              4
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 11,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid clientCredentials token and deepTokenVerification flag set to false",
            "matchedColumns": [
              0,
              2,
              5
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 78,
            "value": "# default deepTokenVerification value for amazon is true"
          }
        ],
        "line": 79,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 601,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 80,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 487,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 65,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 86,
            "value": "# default deepTokenVerification value for amazon is true"
          }
        ],
        "line": 87,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 548,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid clientCredentials token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 88,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner amazon using valid clientCredentials token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 94,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 481,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 65,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 95,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 630,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 66,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 101,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 448,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid clientCredentials token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 102,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 487,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario spotifyGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner spotify using valid clientCredentials token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 108,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 344,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 109,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 115,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid clientCredentials token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 116,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 408,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario discordGetPartnerTokenPositiveWithInvalidAccessToken",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner discord using valid clientCredentials token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      },
      {
        "line": 122,
        "name": "Get Partner Token for a valid link and deepTokenVerification flag missing - should return partner token",
        "description": "",
        "id": "get-partner-token-api---positive-scenarios;get-partner-token-for-a-valid-link-and-deeptokenverification-flag-missing---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a random testbidirectionalpartner partner account testTBDPAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 69,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 70,
            "name": "PSN account testPsnAccount has valid link to testbidirectionalpartner account testTBDPAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call with scenario NO_PARTNER_CALL",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 72,
            "name": "I can get token for psn user testPsnAccount and partner testbidirectionalpartner using valid password token",
            "matchedColumns": [
              0,
              4
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 1,
            "name": "@wiremock"
          },
          {
            "line": 3,
            "name": "@getTokenApi"
          }
        ]
      }
    ],
    "name": "Get Partner Token Api - positive scenarios",
    "description": "",
    "id": "get-partner-token-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/read/oauth2/getTokenPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@readLink"
      },
      {
        "line": 3,
        "name": "@getTokenApi"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 22,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 256,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 23,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 443,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 24,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 392,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 25,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 765,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 26,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 27,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 459,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 28,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 407,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 29,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 759,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 34,
        "name": "Create link with refresh token api for a restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-for-a-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 371,
              "status": "passed"
            },
            "line": 6,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 7,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 8
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 9,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 10
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 13
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 18
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@createLinkWithOauth2RefreshTokenSdkApi"
          },
          {
            "line": 4,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 36,
        "name": "Create link with refresh token api with a password token having invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-with-a-password-token-having-invalid-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 37,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 38,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "user:account.familymembers.get"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 40,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 41
              },
              {
                "cells": [
                  "refreshToken",
                  "validRefreshToken"
                ],
                "line": 42
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 44
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 45
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 46
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 47
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 48
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 51
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 52
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 53
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 54,
            "value": "# Missing response headers will be resolved in CIS-5714"
          }
        ],
        "line": 56,
        "name": "Create link with refresh token api invalid access token - should return 401 Unauthorized access",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-invalid-access-token---should-return-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 57,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 58
              },
              {
                "cells": [
                  "refreshToken",
                  "validRefreshToken"
                ],
                "line": 59
              },
              {
                "cells": [
                  "accessToken",
                  "invalidAccessToken"
                ],
                "line": 60
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 61,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 62
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 63
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 65
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 66
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 67
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 69
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 70
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 72,
            "value": "# Missing response headers will be resolved in CIS-5714"
          }
        ],
        "line": 74,
        "name": "Create link with refresh token api with missing required parameter - should return 400 Bad request",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-with-missing-required-parameter---should-return-400-bad-request",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 510,
              "status": "passed"
            },
            "line": 75,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 76,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 77
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 78,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 79
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 80,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 81
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1048705"
                ],
                "line": 82
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 83
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 84
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 85,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 86
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 87
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 88
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 89,
            "value": "# Missing response headers will be resolved in CIS-5714"
          }
        ],
        "line": 91,
        "name": "Create link with refresh token api with invalid refresh token - should return 400 Bad request",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-with-invalid-refresh-token---should-return-400-bad-request",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 616,
              "status": "passed"
            },
            "line": 92,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 93,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 94
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 319,
              "status": "passed"
            },
            "line": 95,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 96
              },
              {
                "cells": [
                  "refreshToken",
                  "invalidRefreshToken"
                ],
                "line": 97
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 98,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 99
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 100
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 101
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065005"
                ],
                "line": 102
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 103
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 104
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065005"
                ],
                "line": 106
              },
              {
                "cells": [
                  "message",
                  "Cannot create link with invalid refresh token"
                ],
                "line": 107
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 108
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 109,
            "value": "# Missing response headers will be resolved in CIS-5714"
          }
        ],
        "line": 111,
        "name": "Create link with refresh token api with invalid refresh token - should return 400 Bad request",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-with-invalid-refresh-token---should-return-400-bad-request",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 443,
              "status": "passed"
            },
            "line": 112,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 113,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 114
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 115,
            "name": "I make a createLinkWithRefreshTokenSdkWithOptionalParamsAndScope.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 116
              },
              {
                "cells": [
                  "refreshToken",
                  "validRefreshToken"
                ],
                "line": 117
              },
              {
                "cells": [
                  "partnerAccountId",
                  "amazonAccountId"
                ],
                "line": 118
              },
              {
                "cells": [
                  "refreshTokenExpiresIn",
                  "3600"
                ],
                "line": 119
              },
              {
                "cells": [
                  "scopes",
                  "amazonScope"
                ],
                "line": 120
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 121,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 122
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 123
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 124
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064961"
                ],
                "line": 125
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 126
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 127
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 128,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064961"
                ],
                "line": 129
              },
              {
                "cells": [
                  "message",
                  "The scopes provided are not supported by platform"
                ],
                "line": 130
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 131
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 132,
            "value": "# Missing response headers will be resolved in CIS-5714"
          }
        ],
        "line": 134,
        "name": "Create link with refresh token api with child PSN account - should return 400",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios;create-link-with-refresh-token-api-with-child-psn-account---should-return-400",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 882,
              "status": "passed"
            },
            "line": 135,
            "name": "I have created a new PSN minor subAccount psnAccountName",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I save connectAccount:amazon.link.create as tokenScopes",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 137,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 138
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I save signInId as userName",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 142
              },
              {
                "cells": [
                  "refreshToken",
                  "validRefreshToken"
                ],
                "line": 143
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 144,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 145
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 146
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 147
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064960"
                ],
                "line": 148
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 149
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 150
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 151,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 152
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 153
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 154
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Create Link With Partner Oauth2 Refresh Token Sdk Api - Negative scenarios",
    "description": "",
    "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/create.oauth2/createLinkWithOauth2RefreshTokenSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@createLinkWithOauth2RefreshTokenSdkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 5,
        "name": "Create link with refresh token api when there is no existing link for the partner account - should create link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-when-there-is-no-existing-link-for-the-partner-account---should-create-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 489,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 112,
              "status": "passed"
            },
            "line": 9,
            "name": "I can link testPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 11,
        "name": "Create link with refresh token api when the existing link has not expired (with a valid access token cached) - should overwrite existing link and create new link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached)---should-overwrite-existing-link-and-create-new-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 497,
              "status": "passed"
            },
            "line": 13,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 14,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 192,
              "status": "passed"
            },
            "line": 16,
            "name": "I can link testPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 18,
        "name": "Create link with refresh token api when the existing link has not expired (with a valid access token cached) - should overwrite existing link and create new link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached)---should-overwrite-existing-link-and-create-new-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 429,
              "status": "passed"
            },
            "line": 20,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 21,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 128,
              "status": "passed"
            },
            "line": 23,
            "name": "I can link testPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 25,
        "name": "Create link with refresh token api when the existing link has not expired (without a valid access token cached) - should overwrite existing link and create new link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-when-the-existing-link-has-not-expired-(without-a-valid-access-token-cached)---should-overwrite-existing-link-and-create-new-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 28,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 115,
              "status": "passed"
            },
            "line": 30,
            "name": "I can link testPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 32,
        "name": "Create link with refresh token api when the existing link has expired (without a valid access token cached and non refreshable token) - should overwrite existing link and create new link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-when-the-existing-link-has-expired-(without-a-valid-access-token-cached-and-non-refreshable-token)---should-overwrite-existing-link-and-create-new-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 33,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 409,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 35,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 122,
              "status": "passed"
            },
            "line": 37,
            "name": "I can link testPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 39,
        "name": "Create link with refresh token api when the other link to the partner account has expired - should allow psn user to create new link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-when-the-other-link-to-the-partner-account-has-expired---should-allow-psn-user-to-create-new-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 411,
              "status": "passed"
            },
            "line": 41,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 597,
              "status": "passed"
            },
            "line": 42,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I save amazonGetPartnerTokenInvalidRefreshToken-non-refreshable as scenario",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 103,
              "status": "passed"
            },
            "line": 45,
            "name": "PSN account firstPsnAccount has expired link to amazon account testAmazonAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I save amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable as scenario",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 115,
              "status": "passed"
            },
            "line": 48,
            "name": "I can link secondPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 50,
        "name": "Create link with refresh token api linking multiple PSN accounts to the same partner account - should create links for psn accounts",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-linking-multiple-psn-accounts-to-the-same-partner-account---should-create-links-for-psn-accounts",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 504,
              "status": "passed"
            },
            "line": 52,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 529,
              "status": "passed"
            },
            "line": 53,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I save amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable as scenario",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 55,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 103,
              "status": "passed"
            },
            "line": 56,
            "name": "I can link firstPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 57,
            "value": "#Then I can link secondPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk"
          }
        ],
        "line": 59,
        "name": "Create link with refresh token api with optional params and there is no existing link for the partner account - should create link",
        "description": "",
        "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios;create-link-with-refresh-token-api-with-optional-params-and-there-is-no-existing-link-for-the-partner-account---should-create-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 60,
            "name": "I have a random amazon partner account testAmazonAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 474,
              "status": "passed"
            },
            "line": 61,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I enable mock for partner api call with scenario amazonGetPartnerTokenPositiveWithValidRefreshToken-refreshable",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 117,
              "status": "passed"
            },
            "line": 63,
            "name": "I can link testPsnAccount to amazon account testAmazonAccount using createLinkWithOauth2RefreshTokenSdk with optional parameters",
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Create Link With Partner Oauth2 Refresh Token Sdk Api - positive scenarios",
    "description": "",
    "id": "create-link-with-partner-oauth2-refresh-token-sdk-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/create.oauth2/createLinkWithOauth2RefreshTokenSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@createLinkWithOauth2RefreshTokenSdkApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 20,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create a link when the other link to the partner account has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-a-link-when-the-other-link-to-the-partner-account-has-not-expired-(with-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 398,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 420,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 79,
              "status": "passed"
            },
            "line": 14,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 15,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 36,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create a link when the other link to the partner account has not expired (without a valid access token cached but with a refreshable token)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-a-link-when-the-other-link-to-the-partner-account-has-not-expired-(without-a-valid-access-token-cached-but-with-a-refreshable-token);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 23,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 406,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 398,
              "status": "passed"
            },
            "line": 25,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 27,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 132,
              "status": "passed"
            },
            "line": 30,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 31,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 54,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with Incorrect Scope",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-incorrect-scope;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 345,
              "status": "passed"
            },
            "line": 39,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 40,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 45,
            "name": "I make a sdkCreateAccountLink.json request expecting 403 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 47
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 48
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 59,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with Incorrect Scope",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-incorrect-scope;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 438,
              "status": "passed"
            },
            "line": 39,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 40,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 43,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 44,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 45,
            "name": "I make a sdkCreateAccountLink.json request expecting 403 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 47
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 48
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 78,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with Invalid Auth Code",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-invalid-auth-code;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 372,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 63,
            "name": "I get a password token for the account",
            "matchedColumns": [
              3
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.create"
                ],
                "line": 64
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 66,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I get invalid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 69,
            "name": "I make a sdkCreateAccountLink.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064994"
                ],
                "line": 71
              },
              {
                "cells": [
                  "message",
                  "Get partner token by auth code failed"
                ],
                "line": 72
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 83,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with Invalid Auth Code",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-invalid-auth-code;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 428,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 84,
              "status": "passed"
            },
            "line": 63,
            "name": "I get a password token for the account",
            "matchedColumns": [
              3
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.discord.link.create"
                ],
                "line": 64
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 66,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I get invalid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 69,
            "name": "I make a sdkCreateAccountLink.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 71
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 72
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 100,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with missing Redirect Url",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-missing-redirect-url;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 369,
              "status": "passed"
            },
            "line": 86,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 87,
            "name": "I get a password token for the account",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.create"
                ],
                "line": 88
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I get valid mock auth code from spotify for firstPsnAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 91,
            "name": "I make a sdkCreateAccountLinkNoUri.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 93
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 94
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 95
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 105,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with missing Redirect Url",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-missing-redirect-url;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 529,
              "status": "passed"
            },
            "line": 86,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 87,
            "name": "I get a password token for the account",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.discord.link.create"
                ],
                "line": 88
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I get valid mock auth code from discord for firstPsnAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 91,
            "name": "I make a sdkCreateAccountLinkNoUri.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 93
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 94
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 95
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 123,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with missing Auth Code",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-missing-auth-code;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 437,
              "status": "passed"
            },
            "line": 108,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 75,
              "status": "passed"
            },
            "line": 109,
            "name": "I get a password token for the account",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.create"
                ],
                "line": 110
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I remove code from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 114,
            "name": "I make a sdkCreateAccountLinkNoAuthCode.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 116
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 117
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 118
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 128,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with missing Auth Code",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-missing-auth-code;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 632,
              "status": "passed"
            },
            "line": 108,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 109,
            "name": "I get a password token for the account",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.discord.link.create"
                ],
                "line": 110
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I remove code from context if present",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 114,
            "name": "I make a sdkCreateAccountLinkNoAuthCode.json request expecting 400 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 115,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 116
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 117
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 118
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 145,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with invalid access Token",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-invalid-access-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 465,
              "status": "passed"
            },
            "line": 131,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 132,
            "name": "I save fooBar as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 134,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 135,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 136,
            "name": "I make a sdkCreateAccountLink.json request expecting 401 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 137,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 138
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 139
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 150,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with invalid access Token",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-invalid-access-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 457,
              "status": "passed"
            },
            "line": 131,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 132,
            "name": "I save fooBar as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 134,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 135,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 136,
            "name": "I make a sdkCreateAccountLink.json request expecting 401 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 137,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 138
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 139
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 167,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with a Client Credentials Token",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-a-client-credentials-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 153,
            "name": "I get a client credentials token",
            "matchedColumns": [
              3
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:spotify.link.create"
                ],
                "line": 154
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 155,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 156,
            "name": "I save spotify as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 157,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 158,
            "name": "I make a sdkCreateAccountLink.json request expecting 403 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 159,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 160
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 161
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 162
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 172,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Cannot create link with a Client Credentials Token",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---cannot-create-link-with-a-client-credentials-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 153,
            "name": "I get a client credentials token",
            "matchedColumns": [
              3
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:s2s.discord.link.create"
                ],
                "line": 154
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 155,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 156,
            "name": "I save discord as partnerId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 157,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 158,
            "name": "I make a sdkCreateAccountLink.json request expecting 403 status",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 159,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 160
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 161
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 162
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 198,
        "name": "Partner Oauth2 Authorization Code Sdk Api - when I create link for adult subaccount - then should return 400 error",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---when-i-create-link-for-adult-subaccount---then-should-return-400-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 879,
              "status": "passed"
            },
            "line": 176,
            "name": "I have created a new PSN adult subAccount psnAccountName",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 177,
            "name": "I save connectAccount:amazon.link.create as tokenScopes",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 178,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 179
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 180,
            "name": "I save signInId as userName",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 181,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 182,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 183
              },
              {
                "cells": [
                  "refreshToken",
                  "validRefreshToken"
                ],
                "line": 184
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 185,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 186
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 187
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 188
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064960"
                ],
                "line": 189
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 190
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 191
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 192,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 193
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 194
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 195
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 174,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 224,
        "name": "Partner Oauth2 Authorization Code Sdk Api - when I create link for minor subaccount - then should return 400 error",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-api---when-i-create-link-for-minor-subaccount---then-should-return-400-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 895,
              "status": "passed"
            },
            "line": 202,
            "name": "I have created a new PSN minor subAccount psnAccountName",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 203,
            "name": "I save connectAccount:amazon.link.create as tokenScopes",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 204,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.create"
                ],
                "line": 205
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 206,
            "name": "I save signInId as userName",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 207,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 208,
            "name": "I make a createLinkWithRefreshTokenSdk.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 209
              },
              {
                "cells": [
                  "refreshToken",
                  "validRefreshToken"
                ],
                "line": 210
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 211,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 212
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 213
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 214
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064960"
                ],
                "line": 215
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 216
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 217
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 218,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 219
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 220
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 221
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 200,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 236,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 343,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 237,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 404,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 238,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 371,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 239,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 481,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 240,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 241,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 430,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 246,
        "name": "Partner Oauth2 Authorization Code Sdk for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios;partner-oauth2-authorization-code-sdk-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 415,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a sdkCreateAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 230
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 231,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 232
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 233
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 226,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "Create Link With Partner Oauth2 Authorization Code Sdk Api - Negative scenarios",
    "description": "",
    "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/create.oauth2/createLinkWithPartnerOauth2AuthorizationCodeSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
      },
      {
        "line": 3,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 6,
        "name": "Get partner link info sdk with invalid token - should return a 401 unauthorized access",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-with-invalid-token---should-return-a-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 373,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 10,
            "name": "I make a getAccountLinkSdk.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 11
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 13
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 14
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 15
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 17
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 19
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064978"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@discord"
          }
        ]
      },
      {
        "line": 25,
        "name": "Get partner link info sdk with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-with-invalid-scope---should-return-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 486,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a password token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 30,
            "name": "I make a getAccountLinkSdk.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 31
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 34
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 37
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 38
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 39
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 40
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 23,
            "name": "@discord"
          },
          {
            "line": 24,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 45,
        "name": "Get partner link info sdk with client credentials token - should return a 403 unauthorized access",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-with-client-credentials-token---should-return-a-403-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 47,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 48,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a jwt client credentials access token with scope connectAccount:s2s.discord.link.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 50,
            "name": "I make a getAccountLinkSdk.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 51
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 53
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 54
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 55
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 56,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 57
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 58
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 59
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1098102"
                ],
                "line": 60
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 61
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 43,
            "name": "@discord"
          },
          {
            "line": 44,
            "name": "@clientCredentials"
          }
        ]
      },
      {
        "line": 64,
        "name": "Get partner link info sdk that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 409,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectAccount:s2s.discord.link.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 68,
            "name": "I make a getAccountLinkSdk.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 69
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 71
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 72
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 75
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 76
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 77
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 78
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 79
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 63,
            "name": "@discord"
          }
        ]
      },
      {
        "line": 83,
        "name": "Get partner link info sdk for account with an expired link - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-for-account-with-an-expired-link---should-return-a-404-account-not-linked-to-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 84,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 409,
              "status": "passed"
            },
            "line": 85,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 86,
            "name": "I enable mock for partner api call with scenario discordGetLinkInfoSdkNegativeWithExpiredLink",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 108,
              "status": "passed"
            },
            "line": 87,
            "name": "PSN account testPsnAccount has expired link to discord account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 88,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectAccount:s2s.discord.link.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 89,
            "name": "I make a getAccountLinkSdk.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 90
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 92
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 93
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 94
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 95,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 96
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 97
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 98
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1064968"
                ],
                "line": 99
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 100
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 81,
            "name": "@discord"
          },
          {
            "line": 82,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 121,
        "name": "Get partner link info sdk for restricted partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-for-restricted-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 104,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 105,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 106
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a getAccountLinkSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 110
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 111
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 112,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 113
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 114
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 115
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 117
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 102,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getPartnerLinkSdk"
          }
        ]
      },
      {
        "line": 126,
        "name": "Get partner link info sdk for restricted partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-for-restricted-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 433,
              "status": "passed"
            },
            "line": 104,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 105,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 106
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a getAccountLinkSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 110
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 111
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 113
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 114
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 115
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 117
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 102,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getPartnerLinkSdk"
          }
        ]
      },
      {
        "line": 131,
        "name": "Get partner link info sdk for restricted partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-link-info-sdk---negative-scenarios;get-partner-link-info-sdk-for-restricted-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 433,
              "status": "passed"
            },
            "line": 104,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 105,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 106
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 107,
            "name": "I make a getAccountLinkSdk.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 108
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 110
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 111
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 113
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 114
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 115
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "1065004"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 117
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@readLink"
          },
          {
            "line": 102,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@getPartnerLinkSdk"
          }
        ]
      }
    ],
    "name": "Get Partner Link Info Sdk - negative scenarios",
    "description": "",
    "id": "get-partner-link-info-sdk---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/read/oauth2/getLinkInfoSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getPartnerLinkSdk"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 17,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link when there is no other link to the partner account",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-when-there-is-no-other-link-to-the-partner-account;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149,
              "status": "passed"
            },
            "line": 11,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 12,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 22,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link when there is no other link to the partner account",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-when-there-is-no-other-link-to-the-partner-account;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 180,
              "status": "passed"
            },
            "line": 11,
            "name": "I can link firstPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 65,
              "status": "passed"
            },
            "line": 12,
            "name": "I can delete firstPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 41,
        "name": "Partner Oauth2 Authorization Code Sdk Api for testbidirectionalpartner - Can create a link when there is no other link to the partner account",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api-for-testbidirectionalpartner---can-create-a-link-when-there-is-no-other-link-to-the-partner-account;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I have a random testbidirectionalpartner partner account testBiDirectionalPartnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 348,
              "status": "passed"
            },
            "line": 28,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 126,
              "status": "passed"
            },
            "line": 29,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 30,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 99,
              "status": "passed"
            },
            "line": 31,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139,
              "status": "passed"
            },
            "line": 32,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I save conf(\u0027testbidirectionalpartnerRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I get valid mock auth code from testbidirectionalpartner for testBiDirectionalPartnerAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 132,
              "status": "passed"
            },
            "line": 36,
            "name": "I can link psnAccount to testbidirectionalpartner account testBiDirectionalPartnerAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 37,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testBiDirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 38,
            "name": "I can delete psnAccount link for partner testbidirectionalpartner",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 25,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 24,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 42,
        "name": "Partner Oauth2 Authorization Code Sdk Api for testbidirectionalpartner - Can create a link when there is no other link to the partner account",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api-for-testbidirectionalpartner---can-create-a-link-when-there-is-no-other-link-to-the-partner-account;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I have a random testbidirectionalpartner partner account testBiDirectionalPartnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 490,
              "status": "passed"
            },
            "line": 28,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 119,
              "status": "passed"
            },
            "line": 29,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 30,
            "name": "I save me as accountId",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 109,
              "status": "passed"
            },
            "line": 31,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164,
              "status": "passed"
            },
            "line": 32,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 33,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I save conf(\u0027testbidirectionalpartnerRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I get valid mock auth code from testbidirectionalpartner for testBiDirectionalPartnerAccount for psn account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 129,
              "status": "passed"
            },
            "line": 36,
            "name": "I can link psnAccount to testbidirectionalpartner account testBiDirectionalPartnerAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 37,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testBiDirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 78,
              "status": "passed"
            },
            "line": 38,
            "name": "I can delete psnAccount link for partner testbidirectionalpartner",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 25,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 24,
            "name": "@getLinkUrlApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 57,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link to the same PSN account when the existing link has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 45,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 466,
              "status": "passed"
            },
            "line": 46,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 48,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 183,
              "status": "passed"
            },
            "line": 51,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 67,
              "status": "passed"
            },
            "line": 52,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 62,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link to the same PSN account when the existing link has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 45,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 658,
              "status": "passed"
            },
            "line": 46,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 48,
            "name": "PSN account firstPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 49,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 50,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145,
              "status": "passed"
            },
            "line": 51,
            "name": "I can link firstPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 64,
              "status": "passed"
            },
            "line": 52,
            "name": "I can delete firstPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 77,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link to the same PSN account when the existing link has not expired (without a valid access token cached)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(without-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 506,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 68,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 187,
              "status": "passed"
            },
            "line": 71,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 72,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 82,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link to the same PSN account when the existing link has not expired (without a valid access token cached)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(without-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 375,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 68,
            "name": "PSN account firstPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 70,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 187,
              "status": "passed"
            },
            "line": 71,
            "name": "I can link firstPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 77,
              "status": "passed"
            },
            "line": 72,
            "name": "I can delete firstPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 97,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link to the same PSN account when the existing link has expired (without a valid access token cached and non refreshable token)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-expired-(without-a-valid-access-token-cached-and-non-refreshable-token);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 85,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 86,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 87,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 88,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135,
              "status": "passed"
            },
            "line": 91,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 79,
              "status": "passed"
            },
            "line": 92,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 102,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link to the same PSN account when the existing link has expired (without a valid access token cached and non refreshable token)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-expired-(without-a-valid-access-token-cached-and-non-refreshable-token);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 85,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 390,
              "status": "passed"
            },
            "line": 86,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 87,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 88,
            "name": "PSN account firstPsnAccount has valid link to discord account testDiscordAccount with invalid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 230,
              "status": "passed"
            },
            "line": 91,
            "name": "I can link firstPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 94,
              "status": "passed"
            },
            "line": 92,
            "name": "I can delete firstPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 119,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link when the other link to the partner account has expired",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-when-the-other-link-to-the-partner-account-has-expired;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 363,
              "status": "passed"
            },
            "line": 106,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 107,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 112,
              "status": "passed"
            },
            "line": 109,
            "name": "PSN account firstPsnAccount has expired link to spotify account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 110,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145,
              "status": "passed"
            },
            "line": 112,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 113,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 124,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link when the other link to the partner account has expired",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-when-the-other-link-to-the-partner-account-has-expired;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 106,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 464,
              "status": "passed"
            },
            "line": 107,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 108,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 111,
              "status": "passed"
            },
            "line": 109,
            "name": "PSN account firstPsnAccount has expired link to discord account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 110,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 128,
              "status": "passed"
            },
            "line": 112,
            "name": "I can link secondPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 65,
              "status": "passed"
            },
            "line": 113,
            "name": "I can delete secondPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 141,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link when the other link to that partner account has not expired but cannot be refreshed",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-when-the-other-link-to-that-partner-account-has-not-expired-but-cannot-be-refreshed;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 127,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 494,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 398,
              "status": "passed"
            },
            "line": 129,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 130,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 131,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 132,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151,
              "status": "passed"
            },
            "line": 134,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 135,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 146,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link when the other link to that partner account has not expired but cannot be refreshed",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-when-the-other-link-to-that-partner-account-has-not-expired-but-cannot-be-refreshed;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 127,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 366,
              "status": "passed"
            },
            "line": 128,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 352,
              "status": "passed"
            },
            "line": 129,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 130,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 131,
            "name": "PSN account firstPsnAccount has valid link to discord account testDiscordAccount with valid access token that cannot be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 132,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 163,
              "status": "passed"
            },
            "line": 134,
            "name": "I can link secondPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 135,
            "name": "I can delete secondPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 162,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link for overWriteExistingLinks partner when the other link to the partner account has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-for-overwriteexistinglinks-partner-when-the-other-link-to-the-partner-account-has-not-expired-(with-a-valid-access-token-cached);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 149,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 460,
              "status": "passed"
            },
            "line": 150,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 458,
              "status": "passed"
            },
            "line": 151,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 152,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 153,
            "name": "PSN account firstPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 154,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 155,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 137,
              "status": "passed"
            },
            "line": 156,
            "name": "I can link secondPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 67,
              "status": "passed"
            },
            "line": 157,
            "name": "I can delete secondPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 178,
        "name": "Partner Oauth2 Authorization Code Sdk Api - Can create a link for overWriteExistingLinks partner when the other link to the partner account has not expired (without a valid access token cached but with a refreshable token)",
        "description": "",
        "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios;partner-oauth2-authorization-code-sdk-api---can-create-a-link-for-overwriteexistinglinks-partner-when-the-other-link-to-the-partner-account-has-not-expired-(without-a-valid-access-token-cached-but-with-a-refreshable-token);;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 165,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 417,
              "status": "passed"
            },
            "line": 166,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 167,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 168,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 169,
            "name": "PSN account firstPsnAccount has valid link to discord account testDiscordAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 170,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 171,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151,
              "status": "passed"
            },
            "line": 172,
            "name": "I can link secondPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 76,
              "status": "passed"
            },
            "line": 173,
            "name": "I can delete secondPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "Create Link With Partner Oauth2 Authorization Code Sdk Api - positive scenarios",
    "description": "",
    "id": "create-link-with-partner-oauth2-authorization-code-sdk-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/create.oauth2/createLinkWithPartnerOauth2AuthorizationCodeSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@createLinkWithPartnerOauth2AuthorizationCodeSdkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 5,
        "name": "Create Passive Link SDK - I cannot create a Link when one already exists",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---i-cannot-create-a-link-when-one-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "I have a random steam partner account firstSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 492,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 8,
            "name": "I can link testPsnAccount to steam account firstSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I have a random steam partner account secondSteamAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save ctx(\u0027secondSteamAccount.partnerAccountId\u0027) as partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a sdkCreatePassiveLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065006"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Link to partner already exists"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 18,
        "name": "Create Passive Link SDK - I cannot link multiple accounts to same steam account",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---i-cannot-link-multiple-accounts-to-same-steam-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 20,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 21,
            "name": "I can link firstPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 355,
              "status": "passed"
            },
            "line": 22,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 23,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.steam.link.create"
                ],
                "line": 24
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 25,
            "name": "I make a sdkCreatePassiveLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 26
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064975"
                ],
                "line": 28
              },
              {
                "cells": [
                  "message",
                  "Multiple accounts can not be linked to same partner account"
                ],
                "line": 29
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 32,
        "name": "Create Passive Link SDK - Cannot create link with Incorrect Scope",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---cannot-create-link-with-incorrect-scope",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 33,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 407,
              "status": "passed"
            },
            "line": 34,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 35,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.steam.link.query"
                ],
                "line": 36
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 37,
            "name": "I save ctx(\u0027testSteamAccount.partnerAccountId\u0027) as partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a sdkCreatePassiveLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 45,
        "name": "Create Passive Link SDK - Cannot Create link with Client Credentials token",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---cannot-create-link-with-client-credentials-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 46,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 486,
              "status": "passed"
            },
            "line": 47,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 48,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:s2s.steam.link.create"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "I save ctx(\u0027testSteamAccount.partnerAccountId\u0027) as partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkCreatePassiveLink.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 52
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 53,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 54
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 55
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 56
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 58,
        "name": "Create Passive Link SDK - Cannot create link with invalid partnerAccountID",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---cannot-create-link-with-invalid-partneraccountid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 514,
              "status": "passed"
            },
            "line": 59,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 60,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.steam.link.create"
                ],
                "line": 61
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 62,
            "name": "I make a sdkCreatePassiveLink.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 63
              },
              {
                "cells": [
                  "partnerAccountId",
                  ""
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 66
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 67
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 70,
        "name": "Create Passive Link SDK - Cannot create link with null partnerAccountID",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---cannot-create-link-with-null-partneraccountid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 358,
              "status": "passed"
            },
            "line": 71,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 72,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.steam.link.create"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 74,
            "name": "I make a sdkCreatePassiveLinkNullPartnerAccountId.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 75
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 77
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 78
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 79
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 81,
        "name": "Create Passive Link SDK - Cannot create link with missing partnerAccountID",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk---cannot-create-link-with-missing-partneraccountid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 413,
              "status": "passed"
            },
            "line": 82,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 83,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.steam.link.create"
                ],
                "line": 84
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 85,
            "name": "I make a sdkCreatePassiveLinkMissingPartnerAccountId.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 86
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 87,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 88
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 89
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 90
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 104,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 105,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 442,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 106,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 374,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 107,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 402,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 108,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 417,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 109,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 392,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 110,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 426,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      },
      {
        "line": 111,
        "name": "Create Passive Link SDK API for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "create-passive-link-sdk-api---negative-scenarios;create-passive-link-sdk-api-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 416,
              "status": "passed"
            },
            "line": 94,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 95,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 97,
            "name": "I make a sdkCreatePassiveLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 98
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 100
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 92,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 2,
            "name": "@createPassiveLinkWithPartnerSdkApi"
          }
        ]
      }
    ],
    "name": "Create Passive Link SDK API - negative scenarios",
    "description": "",
    "id": "create-passive-link-sdk-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/create/createPassiveLinkSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@steam"
      },
      {
        "line": 2,
        "name": "@createPassiveLinkWithPartnerSdkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 5,
        "name": "Create Passive Link SDK - I can create a passive link for steam",
        "description": "",
        "id": "create-passive-link-sdk-api---positive-scenarios;create-passive-link-sdk---i-can-create-a-passive-link-for-steam",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 6,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "line": 7,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 71,
              "status": "passed"
            },
            "line": 8,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 10,
        "name": "Create Passive Link SDK - I can create Link with Minor Account",
        "description": "",
        "id": "create-passive-link-sdk-api---positive-scenarios;create-passive-link-sdk---i-can-create-link-with-minor-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 803,
              "status": "passed"
            },
            "line": 11,
            "name": "I have created a new PSN minor subAccount testMinorPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 83,
              "status": "passed"
            },
            "line": 13,
            "name": "I can link testMinorPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Create Passive Link SDK API - positive scenarios",
    "description": "",
    "id": "create-passive-link-sdk-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/create/createPassiveLinkSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@steam"
      },
      {
        "line": 2,
        "name": "@createPassiveLinkWithPartnerSdkApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 21,
        "name": "Delete a link that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 408,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 9,
            "name": "I get a password token for the account",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.delete"
                ],
                "line": 10
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 26,
        "name": "Delete a link that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 351,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 9,
            "name": "I get a password token for the account",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:s2s.discord.link.delete"
                ],
                "line": 10
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 31,
        "name": "Delete a link that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 383,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 9,
            "name": "I get a password token for the account",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:amazon.link.delete"
                ],
                "line": 10
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 48,
        "name": "Delete a link using scope for different partner id - should return a 403 invalid authorization",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-scope-for-different-partner-id---should-return-a-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 493,
              "status": "passed"
            },
            "line": 35,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:youtube.link.delete"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a sdkDeleteAccountLink.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 53,
        "name": "Delete a link using scope for different partner id - should return a 403 invalid authorization",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-scope-for-different-partner-id---should-return-a-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 416,
              "status": "passed"
            },
            "line": 35,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:youtube.link.delete"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a sdkDeleteAccountLink.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 58,
        "name": "Delete a link using scope for different partner id - should return a 403 invalid authorization",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-scope-for-different-partner-id---should-return-a-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 457,
              "status": "passed"
            },
            "line": 35,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:youtube.link.delete"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a sdkDeleteAccountLink.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 41
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 42
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 76,
        "name": "Delete a link using client credentials token - should return a 403 invalid token type",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-client-credentials-token---should-return-a-403-invalid-token-type;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 61,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 378,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 63,
            "name": "I get a client credentials token",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:spotify.link.delete"
                ],
                "line": 64
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a sdkDeleteAccountLink.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 69
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 70
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 81,
        "name": "Delete a link using client credentials token - should return a 403 invalid token type",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-client-credentials-token---should-return-a-403-invalid-token-type;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 61,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 411,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 63,
            "name": "I get a client credentials token",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:discord.link.delete"
                ],
                "line": 64
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a sdkDeleteAccountLink.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 69
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 70
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 86,
        "name": "Delete a link using client credentials token - should return a 403 invalid token type",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-client-credentials-token---should-return-a-403-invalid-token-type;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 61,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 422,
              "status": "passed"
            },
            "line": 62,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 63,
            "name": "I get a client credentials token",
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:amazon.link.delete"
                ],
                "line": 64
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a sdkDeleteAccountLink.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 67
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 69
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 70
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 71
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 102,
        "name": "Delete a link using invalid access token - should return a 401 unauthorized access",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-invalid-access-token---should-return-a-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 428,
              "status": "passed"
            },
            "line": 90,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 92,
            "name": "I make a sdkDeleteAccountLink.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 93
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 95
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 96
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 97
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 107,
        "name": "Delete a link using invalid access token - should return a 401 unauthorized access",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-invalid-access-token---should-return-a-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 398,
              "status": "passed"
            },
            "line": 90,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 92,
            "name": "I make a sdkDeleteAccountLink.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 93
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 95
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 96
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 97
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 112,
        "name": "Delete a link using invalid access token - should return a 401 unauthorized access",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-using-invalid-access-token---should-return-a-401-unauthorized-access;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 351,
              "status": "passed"
            },
            "line": 90,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 92,
            "name": "I make a sdkDeleteAccountLink.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 93
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 95
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 96
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 97
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 125,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 126,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 449,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 127,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 439,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 128,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 129,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 368,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 130,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 135,
        "name": "Delete a link for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;delete-a-link-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 420,
              "status": "passed"
            },
            "line": 116,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a sdkDeleteAccountLink.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 118
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 120
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@negative"
          },
          {
            "line": 114,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 138,
        "name": "Call Delete Link SDK with the skipPartnerTokenRevocation parameter set to false when the revocation call fails - should return a 500 error",
        "description": "",
        "id": "delete-link-using-sdk-api---negative-scenarios;call-delete-link-sdk-with-the-skippartnertokenrevocation-parameter-set-to-false-when-the-revocation-call-fails---should-return-a-500-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 365,
              "status": "passed"
            },
            "line": 139,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I have a random discord partner account testPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 141,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 142,
            "name": "I enable mock for partner api call with scenario discordDeleteAccountLinkWithoutRevokingToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72,
              "status": "passed"
            },
            "line": 143,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 144,
            "name": "I get a jwt user access token for the account psnAccount with scope connectAccount:s2s.discord.link.delete",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 145,
            "name": "I make a sdkDeleteAccountLink.json request expecting 500 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 146
              },
              {
                "cells": [
                  "skipPartnerTokenRevocation",
                  "false"
                ],
                "line": 147
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 148,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 149
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 150
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 137,
            "name": "@discord"
          }
        ]
      }
    ],
    "name": "Delete link using SDK API - negative scenarios",
    "description": "",
    "id": "delete-link-using-sdk-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/delete/oauth2/deleteLinkSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@negative"
      },
      {
        "line": 3,
        "name": "@deleteLinkSdkApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 26,
        "name": "Get Spotify Token SDK - should return partner token",
        "description": "",
        "id": "get-partner-token-sdk-api---positive-scenarios;get-spotify-token-sdk---should-return-partner-token;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 441,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 96,
              "status": "passed"
            },
            "line": 14,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 15
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a sdkGetPartnerToken.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 17
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "true"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that body.tokenType in response matches Bearer",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that body.accessToken in response contains mockSpotifyAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 21,
            "name": "I verify that body.scopes in response contains mockSpotifyScope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I verify that body.expiresIn in response is an integer close to 3600 within 100 offset",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 27,
        "name": "Get Spotify Token SDK - should return partner token",
        "description": "",
        "id": "get-partner-token-sdk-api---positive-scenarios;get-spotify-token-sdk---should-return-partner-token;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 378,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 14,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 15
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a sdkGetPartnerToken.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 17
              },
              {
                "cells": [
                  "deepTokenVerification",
                  "false"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that body.tokenType in response matches Bearer",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that body.accessToken in response contains mockSpotifyAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 21,
            "name": "I verify that body.scopes in response contains mockSpotifyScope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I verify that body.expiresIn in response is an integer close to 3600 within 100 offset",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 28,
        "name": "Get Spotify Token SDK - should return partner token",
        "description": "",
        "id": "get-partner-token-sdk-api---positive-scenarios;get-spotify-token-sdk---should-return-partner-token;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 14,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 15
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a sdkGetPartnerToken.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 17
              },
              {
                "cells": [
                  "deepTokenVerification",
                  ""
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that body.tokenType in response matches Bearer",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify that body.accessToken in response contains mockSpotifyAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 21,
            "name": "I verify that body.scopes in response contains mockSpotifyScope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I verify that body.expiresIn in response is an integer close to 3600 within 100 offset",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "Get Partner Token Sdk Api - positive scenarios",
    "description": "",
    "id": "get-partner-token-sdk-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/read/oauth2/getTokenSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@readLink"
      },
      {
        "line": 3,
        "name": "@getTokenSdkApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 7,
        "name": "Get PSN Account List from Partner Account - returns list of PSN account IDs linked to a specific partner account ID",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---positive-scenarios;get-psn-account-list-from-partner-account---returns-list-of-psn-account-ids-linked-to-a-specific-partner-account-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 444,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 10,
            "name": "I can link testPsnAccount to steam account testSteamAccount using createPassiveLinkWithPartnerSdk",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 11,
            "name": "I can verify testPsnAccount link to partner steam account testSteamAccount using queryPsnAccountByPartnerAccountSdk",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@clientCredentials"
          }
        ]
      }
    ],
    "name": "Query PSN Account By Partner Account SDK API - positive scenarios",
    "description": "",
    "id": "query-psn-account-by-partner-account-sdk-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/read/queryPsnAccountByPartnerAccountSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@steam"
      },
      {
        "line": 2,
        "name": "@readLink"
      },
      {
        "line": 3,
        "name": "@queryPsnAccountByPartnerAccountSdkApi"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 7,
        "name": "Get a partner token that is not linked to a partner - should return a 404 account not linked to partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-that-is-not-linked-to-a-partner---should-return-a-404-account-not-linked-to-partner",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 9,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 368,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 11,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 12
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 15,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064968"
                ],
                "line": 16
              },
              {
                "cells": [
                  "message",
                  "Account is not linked with partner"
                ],
                "line": 17
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 21,
        "name": "Get a partner token using scope for different partner id - should return a 403 invalid authorization",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-using-scope-for-different-partner-id---should-return-a-403-invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 23,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 369,
              "status": "passed"
            },
            "line": 24,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 25,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:youtube.link.token.get"
                ],
                "line": 26
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 28,
            "name": "I make a sdkGetPartnerToken.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 29
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 31
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 32
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 33
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 20,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 36,
        "name": "Get a partner token using client credentials token - should return a 403 invalid token type",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-using-client-credentials-token---should-return-a-403-invalid-token-type",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 37,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 38,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 424,
              "status": "passed"
            },
            "line": 39,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 40,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 42,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 43,
            "name": "I make a sdkGetPartnerToken.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 44
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 45,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 46
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 47
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 48
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 35,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get a partner token using invalid token - should return a 401 unauthorized access",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-using-invalid-token---should-return-a-401-unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 53,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 54,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 55,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 56,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 57,
            "name": "I make a sdkGetPartnerToken.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 58
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 60
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 61
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 62
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 50,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 77,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "12"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 78,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 79,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 408,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 80,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 376,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 81,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 82,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 397,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 83,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 487,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 88,
        "name": "Get a partner token for restricted or invalid partner - should return a 404 unsupported partner",
        "description": "",
        "id": "get-partner-token-sdk-api---negative-scenarios;get-a-partner-token-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 399,
              "status": "passed"
            },
            "line": 66,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25,
              "status": "passed"
            },
            "line": 67,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 70,
            "name": "I make a sdkGetPartnerToken.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 71
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 72,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 73
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 64,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 3,
            "name": "@getTokenSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "Get Partner Token Sdk Api - negative scenarios",
    "description": "",
    "id": "get-partner-token-sdk-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/read/oauth2/getTokenSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@readLink"
      },
      {
        "line": 3,
        "name": "@getTokenSdkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 8,
        "name": "Get partner link info sdk with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info-sdk---positive-scenarios;get-partner-link-info-sdk-with-password-token---should-return-partner-link-info",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 424,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I enable mock for partner api call with scenario discordGetLinkInfoSdkPositiveWithValidRefreshToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 12,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 13,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectAccount:s2s.discord.link.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a getAccountLinkSdk.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 17
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 18
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 19
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@wiremock"
          },
          {
            "line": 6,
            "name": "@discord"
          },
          {
            "line": 7,
            "name": "@userToken"
          }
        ]
      },
      {
        "line": 24,
        "name": "Get partner link info sdk with password token - should return partner link info",
        "description": "",
        "id": "get-partner-link-info-sdk---positive-scenarios;get-partner-link-info-sdk-with-password-token---should-return-partner-link-info",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 351,
              "status": "passed"
            },
            "line": 25,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 121,
              "status": "passed"
            },
            "line": 26,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "I save ctx(\u0027accountId\u0027) as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 101,
              "status": "passed"
            },
            "line": 28,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 208,
              "status": "passed"
            },
            "line": 29,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 30,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 31,
            "name": "I make a getPartnerAuthorizeUrlWithPsnAuthValues.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 32
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 33
              },
              {
                "cells": [
                  "redirectUrl",
                  "conf(\u0027testbidirectionalpartnerRedirectUrl\u0027)"
                ],
                "line": 34
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 120,
              "status": "passed"
            },
            "line": 36,
            "name": "I get the auth code from testbidirectionalpartner authorize endpoint for partner account testBiDirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133,
              "status": "passed"
            },
            "line": 37,
            "name": "I can link psnAccount to testbidirectionalpartner account testBiDirectionalPartnerAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 38,
            "name": "I get a jwt user access token for the account psnAccount with scope connectAccount:s2s.testbidirectionalpartner.link.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 39,
            "name": "I make a getAccountLinkSdk.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 40
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 42
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 43
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 101,
              "status": "passed"
            },
            "line": 45,
            "name": "I can delete psnAccount link using sdk api for partner testbidirectionalpartner",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 21,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 22,
            "name": "@userToken"
          },
          {
            "line": 23,
            "name": "@deleteLinkSdkApi"
          }
        ]
      }
    ],
    "name": "Get Partner Link Info Sdk - positive scenarios",
    "description": "",
    "id": "get-partner-link-info-sdk---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/read/oauth2/getLinkInfoSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@readLink"
      },
      {
        "line": 2,
        "name": "@getPartnerLinkSdk"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 6,
        "name": "Get PSN Account List from Partner Account - Unauthorized access",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---unauthorized-access",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 471,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I save someAccountId as partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I save invalidToken as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 401 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 12
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 13
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 15
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 16
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 17
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 19,
        "name": "Get PSN Account List from Partner Account - Invalid authorization",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---invalid-authorization",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 20,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 504,
              "status": "passed"
            },
            "line": 21,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 22,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:s2s.partner.link.account.manage"
                ],
                "line": 23
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "I save ctx(\u0027testSteamAccount.partnerAccountId\u0027) as partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 25,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 26
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 27
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 29
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 30
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 33,
        "name": "Get PSN Account List from Partner Account - Link not found for partner account",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---link-not-found-for-partner-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I have a random steam partner account testSteamAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 35,
            "name": "I save ctx(\u0027testSteamAccount.partnerAccountId\u0027) as partnerAccountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 36,
            "name": "I get a client credentials token",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:s2s.steam.link.query"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 38,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 39
              },
              {
                "cells": [
                  "partnerAccountId",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 40
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 41,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065011"
                ],
                "line": 42
              },
              {
                "cells": [
                  "message",
                  "Link not found for partner account"
                ],
                "line": 43
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 59,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 470,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testpartner"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 60,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 360,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 94,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "a"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 61,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 382,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "abcdefghijklmnopq"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 62,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 493,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam2"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 63,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 438,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "$MISSING"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 64,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 479,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 65,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 413,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 372,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 420,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 68,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 69,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 373,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get PSN Account List from Partner Account - Restricted or invalid partner",
        "description": "",
        "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios;get-psn-account-list-from-partner-account---restricted-or-invalid-partner;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 48,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 49,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 51,
            "name": "I make a sdkQueryPsnAccountByPartnerAccount.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 52
              },
              {
                "cells": [
                  "partnerAccountId",
                  "anyPartnerAccountId"
                ],
                "line": 53
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 54,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 55
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@steam"
          },
          {
            "line": 2,
            "name": "@readLink"
          },
          {
            "line": 3,
            "name": "@queryPsnAccountByPartnerAccountSdkApi"
          },
          {
            "line": 46,
            "name": "@apiFilterByPartner"
          }
        ]
      }
    ],
    "name": "Query PSN Account By Partner Account SDK API - negative scenarios",
    "description": "",
    "id": "query-psn-account-by-partner-account-sdk-api---negative-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/read/queryPsnAccountByPartnerAccountSdkNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@steam"
      },
      {
        "line": 2,
        "name": "@readLink"
      },
      {
        "line": 3,
        "name": "@queryPsnAccountByPartnerAccountSdkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 101,
        "name": "Get partner authorize url with state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-with-state;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 83,
            "name": "I remove existing links for spotify test account",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 420,
              "status": "passed"
            },
            "line": 84,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 85,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 86
              },
              {
                "cells": [
                  "format",
                  "opaque"
                ],
                "line": 87
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 88,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 89
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 90
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 93,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 95
              },
              {
                "cells": [
                  "state\u003d1234567890"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I verify that body.state in response contains:",
            "rows": [
              {
                "cells": [
                  "1234567890"
                ],
                "line": 98
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@spotify"
          },
          {
            "line": 80,
            "name": "@selenium"
          },
          {
            "line": 81,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 102,
        "name": "Get partner authorize url with state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-with-state;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 83,
            "name": "I remove existing links for spotify test account",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 387,
              "status": "passed"
            },
            "line": 84,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 85,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 86
              },
              {
                "cells": [
                  "format",
                  "jwt"
                ],
                "line": 87
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 88,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 89
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 90
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 93,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 95
              },
              {
                "cells": [
                  "state\u003d1234567890"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I verify that body.state in response contains:",
            "rows": [
              {
                "cells": [
                  "1234567890"
                ],
                "line": 98
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@spotify"
          },
          {
            "line": 80,
            "name": "@selenium"
          },
          {
            "line": 81,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 104,
        "name": "Get partner authorize url without state",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-without-state",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1222,
              "status": "passed"
            },
            "line": 105,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 106,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 107
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 108,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 109
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 110,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 114
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 115,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ]
      },
      {
        "line": 117,
        "name": "Get partner authorize url with Android duid",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-with-android-duid",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 891,
              "status": "passed"
            },
            "line": 118,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 119,
            "name": "I save 00000007000801a800000000000000a4d40aa82a3dfd043a20202020476f6f676c653a416e64726f696420534400000000000000000000000000000000 as duid",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 120,
            "name": "I get a password token for the account with a device id",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 121
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 122,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 123
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 124,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 125,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 126,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 127,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 128
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 129,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ]
      },
      {
        "line": 148,
        "name": "Get partner authorize url with console tokens",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-with-console-tokens;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 811,
              "status": "passed"
            },
            "line": 132,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I save eyJhbGciOiJSUzI1NiJ9.eyJhIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFFQT09IiwidmVyIjoxLCJiIjoicTJxMWhHRVpRc1wvNzFDQXUydjdWZEU2VGljQjdsRGgySE1IR3pPaVJ0NVk9Iiwic3YiOiIwLjgwMC4wMDAiLCJhdCI6MSwiYyI6Ikk3OTZSdlBMM01FRG5tSityWHpvRVRJNHZWTTRDMndnckNrTnhreDl2RmxKZVU5K3RSME05VlU2VlE1N2dGXC9LIiwiZCI6IkNnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvPSIsInBmIjoicHM0IiwibnBlbnYiOiJlMS1ucCIsImV4cCI6MzE4NjcwNjI2NiwicHJuIjoiY3QiLCJpYXQiOjE2MDk5MDYyNjZ9.ZFEvtir0S03KmgJuSwz9PzlMWuzw5gdW0GsCLC__VsLWoNnELD-52tWqUs21fnmjUO66Gk-tC7LKp59yItfo_J9nGqgg6XULUMs-9IdoIrdOw5N2V0H6VO459_lGAmLPHUxgQMr_PDG5SGghfxJ5HsvXecxsjRfr24FJh7DUi9zRVXhszH4y6XbDKkQoyisMwXWnA7dkvqXKFVL9zrue9GfZpUS7uaH2S121yohJ14LQbGXqhrlY58z74aWhrf43J2ufkgLaUg35D8p6w7L_qoAs67oWZqSxuNEJb_2tKsRQqYTsStKMhwMJTUrkD3tXoPxc4whRbn6oWVILCJiQ-Q as console_token",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 73,
              "status": "passed"
            },
            "line": 134,
            "name": "I get a password token for the account with a console token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 135
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 136,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 137
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 140,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3,
              "status": "passed"
            },
            "line": 141,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 142
              },
              {
                "cells": [
                  "referral\u003dplaystation-ppr-ps4-web"
                ],
                "line": 143
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 144,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 149,
        "name": "Get partner authorize url with console tokens",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-with-console-tokens;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1352,
              "status": "passed"
            },
            "line": 132,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I save eyJhbGciOiJSUzI1NiJ9.eyJhIjoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09IiwidmVyIjoxLCJiIjoidFBnTStkeGl0bWdCN2pNOG8xUmNnUT09Iiwic3YiOiIxLjUwMC4wMCIsImF0IjoxLCJjIjoiOVBDVExvbUY4cHFRZFU0M2ZkT1FvS1l6SDd3SXlmYXFJQ1hVTCtOemZ5VmR3VnRUczlUWEoycTYwWXR4MUNieCIsImQiOiJtb1hyYmtDb2tLT1lcLzZMbXlGM2JMY2Zpd1NDTnROV25ob2FNOFN3UHZwTkpZbnU2aDVESVluOWZSZUJLckZRQUFBQUFBd0FBQUFBQUFBQUFBQUFBQU5vTURwcEp4Q1dXK2VJQTZUWkRvV2Y0Y2huZ2RHVGUzeW4yd011U0ZtaFQ5eXdYM3ZBbmJQdUY3UlpuZHlFM0ZWQ1VhYkhrN3hUTXhjRmNodndwZDNscWZVaFpPQnVBSmg1WGhaRDJldjJKN1Q3cmF5U2tnYnpQTWR6WFwvZ2dsTE9COTBPaFcwdWdYUDdQRURKdjI2YVNEWGJlOVZUb09YS01wT0x6XC85VWZCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVCQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBZ2lDUVF6cXJWN2RiK2JFOEN1UVVYcStxMmVDWWVYNjNDVFljMFBCNWFlb0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0iLCJwZiI6InBzNSIsIm5wZW52IjoiZTEtbnAiLCJleHAiOjE3NTkyNzY4MDAsInBybiI6ImN0IiwiaWF0IjoxNjEwNDkyMDU2fQ.DuVmL8jEefXkhpUaVa6T-hKH1Exy0poe27nyflxThAaU8PJ40F50-v8GKcAbXeKKjeflrZv8WE57LOgTeOnsOVh8O5r7x6zcttXOtrfGI6HUOYoe1bO4BPSEnL7ioEh_Blm5TO8t_mScs9SsiM22XJ5_MC-3UWq_b2_cOpQVjoVMA6sZhF1ZDHMZpMTOu2uyC4DkBzlG08KsIPFyyCYrIpYZS5reu67se6wCNZVMiiikUWTxss5grLihzdCdvUFL2qocurG1Sp0F_159WPyk05OfuZF95N3SXBSyGKQBjv77UufNQNWnEBeku7071MrH6Mnow7jN3Z4XY5eOgbzAvA as console_token",
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 134,
            "name": "I get a password token for the account with a console token",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 135
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 136,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 137
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 141,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fid.e1-np.sonyentertainmentnetwork.com%2Fid%2Fps4%2Fv2%2Faccounts%2F"
                ],
                "line": 142
              },
              {
                "cells": [
                  "referral\u003dplaystation-ppr-ps5-web"
                ],
                "line": 143
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 144,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 151,
        "name": "Get partner authorize url with redirect url overwrite",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-with-redirect-url-overwrite",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1454,
              "status": "passed"
            },
            "line": 152,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 153,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get"
                ],
                "line": 154
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 155,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 156
              },
              {
                "cells": [
                  "redirectUri",
                  "https://example.com"
                ],
                "line": 157
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 158,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 159,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 160,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "redirect_uri\u003dhttps%3A%2F%2Fexample.com"
                ],
                "line": 162
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "line": 183,
        "name": "Get partner authorize url for different clients",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-for-different-clients;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1225,
              "status": "passed"
            },
            "line": 165,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 166,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 167
              },
              {
                "cells": [
                  "oauth_client_id",
                  "vault(\u0027oauth_client_id_redirect_test\u0027)"
                ],
                "line": 168
              },
              {
                "cells": [
                  "oauth_client_secret",
                  "vault(\u0027oauth_client_secret_redirect_test\u0027)"
                ],
                "line": 169
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 170,
            "name": "I url encode conf(\u0027testRedirectUrl\u0027) and save as urlEncodedRedirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 171,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 172
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 173,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 174,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 175,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 176,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "\u0027redirect_uri\u003d\u0027ctx(\u0027urlEncodedRedirectUrl\u0027)"
                ],
                "line": 177
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 178,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "referral\u003dplaystation-ppr-web"
                ],
                "line": 179
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 180,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@spotify"
          }
        ]
      },
      {
        "line": 184,
        "name": "Get partner authorize url for different clients",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-spotify;get-partner-authorize-url-for-different-clients;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1463,
              "status": "passed"
            },
            "line": 165,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 166,
            "name": "I get a password token for the account",
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 167
              },
              {
                "cells": [
                  "oauth_client_id",
                  "vault(\u0027oauth_client_id\u0027)"
                ],
                "line": 168
              },
              {
                "cells": [
                  "oauth_client_secret",
                  "vault(\u0027oauth_client_secret\u0027)"
                ],
                "line": 169
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 170,
            "name": "I url encode conf(\u0027deathStarRedirectUrl\u0027) and save as urlEncodedRedirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 171,
            "name": "I make a getPartnerAuthorizeUrl.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 172
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 173,
            "name": "I verify that headers.Cache-Control in response matches no-store",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 174,
            "name": "I verify that statusCode in response matches 200",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 175,
            "name": "I verify that body.partnerAuthorizeUrl in response is not empty",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 176,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "\u0027redirect_uri\u003d\u0027ctx(\u0027urlEncodedRedirectUrl\u0027)"
                ],
                "line": 177
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 178,
            "name": "I verify that body.partnerAuthorizeUrl in response contains:",
            "rows": [
              {
                "cells": [
                  "referral\u003dplaystation-ppr-web"
                ],
                "line": 179
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 180,
            "name": "I verify that body.state in response is not empty",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 2,
            "name": "@spotify"
          }
        ]
      }
    ],
    "name": "account link - positive scenarios for account linking with Spotify",
    "description": "",
    "id": "account-link---positive-scenarios-for-account-linking-with-spotify",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_spotify.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@spotify"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 7,
        "name": "Delete a link created using createLinkWithWebFlow - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-created-using-createlinkwithwebflow---should-remove-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 344,
              "status": "passed"
            },
            "line": 9,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144,
              "status": "passed"
            },
            "line": 13,
            "name": "I can link testPsnAccount to discord account testDiscordAccount using createLinkWithWebFlow",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 319,
              "status": "passed"
            },
            "line": 15,
            "name": "I can delete testPsnAccount link using sdk api for partner discord",
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@discord"
          }
        ]
      },
      {
        "line": 27,
        "name": "Delete a link created using device code flow via sdk API - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-created-using-device-code-flow-via-sdk-api---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 19,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 20,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 21,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169,
              "status": "passed"
            },
            "line": 22,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 92,
              "status": "passed"
            },
            "line": 23,
            "name": "I can delete firstPsnAccount link using sdk api for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 47,
        "name": "Delete a link created using createLinkWithOauth2AuthCodeSdk via sdk API - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-created-using-createlinkwithoauth2authcodesdk-via-sdk-api---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 37,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I save conf(\u0027spotifyRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I get valid mock auth code from spotify for testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133,
              "status": "passed"
            },
            "line": 41,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 110,
              "status": "passed"
            },
            "line": 42,
            "name": "I can delete firstPsnAccount link using sdk api for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 52,
        "name": "Delete a link created using createLinkWithOauth2AuthCodeSdk via sdk API - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-created-using-createlinkwithoauth2authcodesdk-via-sdk-api---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 36,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 37,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 38,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 39,
            "name": "I save conf(\u0027discordRedirectUrl\u0027) as redirectUrl",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I get valid mock auth code from discord for testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160,
              "status": "passed"
            },
            "line": 41,
            "name": "I can link firstPsnAccount to discord account testDiscordAccount using createLinkWithPartnerOauth2AuthorizationCodeSdk",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 107,
              "status": "passed"
            },
            "line": 42,
            "name": "I can delete firstPsnAccount link using sdk api for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 65,
        "name": "Delete a link created using createLinkWithQuickLink - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-created-using-createlinkwithquicklink---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 55,
            "name": "I have a random amazon partner account testAmazonAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 436,
              "status": "passed"
            },
            "line": 56,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 57,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 58,
            "name": "PSN account testPsnAccount has valid link to amazon account testAmazonAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 84,
              "status": "passed"
            },
            "line": 60,
            "name": "I can delete testPsnAccount link using sdk api for partner amazon",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 70,
        "name": "Delete a link created using createLinkWithQuickLink - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-created-using-createlinkwithquicklink---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 55,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 56,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 57,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 58,
            "name": "PSN account testPsnAccount has valid link to discord account testDiscordAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I disable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 290,
              "status": "passed"
            },
            "line": 60,
            "name": "I can delete testPsnAccount link using sdk api for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 83,
        "name": "Delete a link that has expired - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-that-has-expired---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 73,
            "name": "I have a random spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 74,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 346,
              "status": "passed"
            },
            "line": 75,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 102,
              "status": "passed"
            },
            "line": 77,
            "name": "PSN account firstPsnAccount has expired link to spotify account testSpotifyAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "error_message": "java.lang.AssertionError: json path statusCode value 404 doesn\u0027t match 204\n\tat com.sony.sie.rex.cucumber.steps.assertion.JsonPathSteps.assertJsonPathMatches(JsonPathSteps.java:135)\n\tat com.sony.sie.rex.cucumber.steps.assertion.JsonPathSteps.lambda$verifyJsonPathMatches$3(JsonPathSteps.java:78)\n\tat com.sony.sie.rex.rx.Rx.lambda$create$1(Rx.java:68)\n\tat io.reactivex.internal.operators.observable.ObservableCreate.subscribeActual(ObservableCreate.java:40)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable.subscribeActual(ObservableScalarXMap.java:166)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable.subscribeActual(ObservableScalarXMap.java:166)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap.subscribeActual(ObservableFlatMap.java:55)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap.subscribeActual(ObservableFlatMap.java:55)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.subscribeInner(ObservableFlatMap.java:162)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.onNext(ObservableFlatMap.java:139)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.tryEmit(ObservableFlatMap.java:262)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.onNext(ObservableFlatMap.java:559)\n\tat io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.onNext(ObservableSubscribeOn.java:58)\n\tat io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.drainNormal(ObservableObserveOn.java:200)\n\tat io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.run(ObservableObserveOn.java:252)\n\tat io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:61)\n\tat io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:52)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 78,
            "name": "I can delete firstPsnAccount link using sdk api for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 88,
        "name": "Delete a link that has expired - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-that-has-expired---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 73,
            "name": "I have a random discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 74,
            "name": "I remove existing link for discord partner account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 361,
              "status": "passed"
            },
            "line": 75,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 76,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 95,
              "status": "passed"
            },
            "line": 77,
            "name": "PSN account firstPsnAccount has expired link to discord account testDiscordAccount",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "error_message": "java.lang.AssertionError: json path statusCode value 404 doesn\u0027t match 204\n\tat com.sony.sie.rex.cucumber.steps.assertion.JsonPathSteps.assertJsonPathMatches(JsonPathSteps.java:135)\n\tat com.sony.sie.rex.cucumber.steps.assertion.JsonPathSteps.lambda$verifyJsonPathMatches$3(JsonPathSteps.java:78)\n\tat com.sony.sie.rex.rx.Rx.lambda$create$1(Rx.java:68)\n\tat io.reactivex.internal.operators.observable.ObservableCreate.subscribeActual(ObservableCreate.java:40)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable.subscribeActual(ObservableScalarXMap.java:166)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable.subscribeActual(ObservableScalarXMap.java:166)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap.subscribeActual(ObservableFlatMap.java:55)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap.subscribeActual(ObservableFlatMap.java:55)\n\tat io.reactivex.Observable.subscribe(Observable.java:10903)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.subscribeInner(ObservableFlatMap.java:162)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.onNext(ObservableFlatMap.java:139)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.tryEmit(ObservableFlatMap.java:262)\n\tat io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.onNext(ObservableFlatMap.java:559)\n\tat io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.onNext(ObservableSubscribeOn.java:58)\n\tat io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.drainNormal(ObservableObserveOn.java:200)\n\tat io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.run(ObservableObserveOn.java:252)\n\tat io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:61)\n\tat io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:52)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 78,
            "name": "I can delete firstPsnAccount link using sdk api for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 105,
        "name": "Delete a link using sdk endpoint created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-using-sdk-endpoint-created-using-quick-link-flow---should-remove-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 453,
              "status": "passed"
            },
            "line": 96,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 100,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 113,
              "status": "passed"
            },
            "line": 101,
            "name": "I can delete psnAccount link using sdk api for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 102,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 92,
            "name": "@spotify"
          },
          {
            "line": 91,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 90,
            "name": "@discord"
          },
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 94,
            "name": "@quickLinkApi"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 93,
            "name": "@deleteLinkSdk"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 106,
        "name": "Delete a link using sdk endpoint created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-using-sdk-endpoint-created-using-quick-link-flow---should-remove-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 430,
              "status": "passed"
            },
            "line": 96,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I have a random spotify partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account psnAccount has valid link to spotify account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 100,
            "name": "I can verify psnAccount link to partner spotify account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 94,
              "status": "passed"
            },
            "line": 101,
            "name": "I can delete psnAccount link using sdk api for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 102,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 92,
            "name": "@spotify"
          },
          {
            "line": 91,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 90,
            "name": "@discord"
          },
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 94,
            "name": "@quickLinkApi"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 93,
            "name": "@deleteLinkSdk"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 107,
        "name": "Delete a link using sdk endpoint created using quick link flow - should remove link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;delete-a-link-using-sdk-endpoint-created-using-quick-link-flow---should-remove-link;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 367,
              "status": "passed"
            },
            "line": 96,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I have a random testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account psnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 99,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 100,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 111,
              "status": "passed"
            },
            "line": 101,
            "name": "I can delete psnAccount link using sdk api for partner testbidirectionalpartner",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9,
              "status": "passed"
            },
            "line": 102,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 92,
            "name": "@spotify"
          },
          {
            "line": 91,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 90,
            "name": "@discord"
          },
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 94,
            "name": "@quickLinkApi"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 93,
            "name": "@deleteLinkSdk"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 120,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 404,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 93,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner testbidirectionalpartner with true skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 121,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 396,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 118,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner testbidirectionalpartner with missing skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 122,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 368,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner testbidirectionalpartner with invalid skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 127,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random spotify partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to spotify account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 64,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner spotify account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 94,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner spotify with true skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 128,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 364,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random spotify partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to spotify account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner spotify account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 118,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner spotify with missing skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 129,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 354,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random spotify partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to spotify account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 66,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner spotify account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 86,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner spotify with invalid skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 134,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 366,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 68,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 85,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner discord with true skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 135,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 499,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 102,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner discord with missing skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 136,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 390,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 90,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner discord with invalid skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 137,
        "name": "Call Delete Link SDK with and without the skipPartnerTokenRevocation parameter - should remove the link",
        "description": "",
        "id": "delete-link-using-sdk-api---positive-scenarios;call-delete-link-sdk-with-and-without-the-skippartnertokenrevocation-parameter---should-remove-the-link;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 379,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I have a random discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account psnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I enable mock for partner api call with scenario discordDeleteAccountLinkWithoutRevokingToken",
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 114,
            "name": "I can verify psnAccount link to partner discord account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 86,
              "status": "passed"
            },
            "line": 115,
            "name": "I can delete psnAccount link using sdk api for partner discord with true skipPartnerTokenRevocation parameter",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 116,
            "name": "I make a getAccountLink.json request expecting 404 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 2,
            "name": "@positive"
          },
          {
            "line": 3,
            "name": "@deleteLinkSdkApi"
          },
          {
            "line": 1,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "Delete link using SDK API - positive scenarios",
    "description": "",
    "id": "delete-link-using-sdk-api---positive-scenarios",
    "keyword": "Feature",
    "uri": "sdk/link/delete/oauth2/deleteLinkSdkPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@wiremock"
      },
      {
        "line": 2,
        "name": "@positive"
      },
      {
        "line": 3,
        "name": "@deleteLinkSdkApi"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 7,
        "name": "I cannot create a PSN sub-account link to a Twitch account",
        "description": "",
        "id": "account-link---negative-scenarios-for-account-linking-with-twitch;i-cannot-create-a-psn-sub-account-link-to-a-twitch-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I enable mock for partner api call",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 9,
            "name": "I remove existing links for twitch test account",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 386,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I generate a random SIGNIN_ID as signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 394,
              "status": "passed"
            },
            "line": 12,
            "name": "I make a createPsnAdultSubAccount.json request",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 13,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 14
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a getPartnerDeviceCode.json request:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 16
              },
              {
                "cells": [
                  "state",
                  "1234567890"
                ],
                "line": 17
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 19
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 20
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@wiremock"
          },
          {
            "line": 6,
            "name": "@Serialize"
          }
        ]
      }
    ],
    "name": "account link - negative scenarios for account linking with Twitch",
    "description": "",
    "id": "account-link---negative-scenarios-for-account-linking-with-twitch",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_twitch_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@twitch"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "line": 7,
        "name": "I can link my PSN account to YouTube",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-youtube-mock;i-can-link-my-psn-account-to-youtube",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 365,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 9,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 10
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save conf(\u0027youtubeRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I get mock auth code for a partner",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 14,
            "name": "I make a createAccountLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 16,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 18
              },
              {
                "cells": [
                  "partnerAccountId",
                  "mockYoutubeUserId[0-9]{0,40}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 20
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 21,
            "name": "I make a getPartnerAccountToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 22,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 23
              },
              {
                "cells": [
                  "accessToken",
                  "mockAccessToken[0-9]{0,40}"
                ],
                "line": 24
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify that body.scopes in response contains:",
            "rows": [
              {
                "cells": [
                  "https://www.googleapis.com/auth/userinfo.email"
                ],
                "line": 26
              },
              {
                "cells": [
                  "https://www.googleapis.com/auth/userinfo.profile"
                ],
                "line": 27
              },
              {
                "cells": [
                  "https://www.googleapis.com/auth/youtube"
                ],
                "line": 28
              },
              {
                "cells": [
                  "https://www.googleapis.com/auth/youtube.upload"
                ],
                "line": 29
              },
              {
                "cells": [
                  "https://www.googleapis.com/auth/youtubepartner"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 31,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 103,
        "name": "I can get the account link information with the display name for a YouTube account",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-youtube-mock;i-can-get-the-account-link-information-with-the-display-name-for-a-youtube-account;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 338,
              "status": "passed"
            },
            "line": 85,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 86,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 87
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 88,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I get mock auth code for a partner",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I save conf(\u0027youtubeRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 91,
            "name": "I make a createAccountLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 92
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 93,
            "name": "I make a getAccountLink.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "returnProfile",
                  "true"
                ],
                "line": 94
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 95,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 96
              },
              {
                "cells": [
                  "partnerAccountId",
                  "mockYoutubeUserId[0-9]{0,40}"
                ],
                "line": 97
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 98
              },
              {
                "cells": [
                  "displayName",
                  "(.*)@chainletters.com"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 100,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@youtube"
          },
          {
            "line": 83,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 104,
        "name": "I can get the account link information with the display name for a YouTube account",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-youtube-mock;i-can-get-the-account-link-information-with-the-display-name-for-a-youtube-account;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 378,
              "status": "passed"
            },
            "line": 85,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 86,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 87
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 88,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 89,
            "name": "I get mock auth code for a partner",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 90,
            "name": "I save conf(\u0027youtubeRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 91,
            "name": "I make a createAccountLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 92
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 93,
            "name": "I make a getAccountLink.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "returnProfile",
                  "false"
                ],
                "line": 94
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 95,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 96
              },
              {
                "cells": [
                  "partnerAccountId",
                  "mockYoutubeUserId[0-9]{0,40}"
                ],
                "line": 97
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 98
              },
              {
                "cells": [
                  "displayName",
                  "$MISSING"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 100,
            "name": "I make a deleteAccountLink.json request expecting 204 status",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@accountLink"
          },
          {
            "line": 3,
            "name": "@mock"
          },
          {
            "line": 2,
            "name": "@youtube"
          },
          {
            "line": 83,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 108,
        "name": "I can request a proxy auth access token with a link to a YouTube account",
        "description": "",
        "id": "account-link---positive-scenarios-for-account-linking-with-youtube-mock;i-can-request-a-proxy-auth-access-token-with-a-link-to-a-youtube-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 374,
              "status": "passed"
            },
            "line": 109,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 110,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.get connectedIdentity:partner.link.account.manage"
                ],
                "line": 111
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 112,
            "name": "I save true as mockFlag",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 113,
            "name": "I get mock auth code for a partner",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 114,
            "name": "I save conf(\u0027youtubeRedirectUrl\u0027) as redirectUrl",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 115,
            "name": "I make a createAccountLink.json request expecting 204 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 116
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 117,
            "name": "I make a getAccountLink.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 118,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 119
              },
              {
                "cells": [
                  "partnerAccountId",
                  "mockYoutubeUserId[0-9]{0,40}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 122,
            "name": "I make a getPartnerAccountToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 123,
            "name": "I save body.accessToken from response as parentAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 124,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 125
              },
              {
                "cells": [
                  "accessToken",
                  "mockAccessToken[0-9]{0,40}"
                ],
                "line": 126
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 127,
            "name": "I make a getPartnerAccountTokenWithAppId.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "appId",
                  "861556708454-38hecqssa5p6mpvgq8bknk6bhcstmhu0.apps.googleusercontent.com"
                ],
                "line": 128
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 129,
            "name": "I save body.accessToken from response as proxyAuthAccessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 130,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 131
              },
              {
                "cells": [
                  "accessToken",
                  "mockProxyAuthToken[0-9]{0,40}"
                ],
                "line": 132
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 133,
            "name": "I verify that parentAccessToken and proxyAuthAccessToken are not equal",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 107,
            "name": "@Serialize"
          }
        ]
      }
    ],
    "name": "account link - positive scenarios for account linking with Youtube mock",
    "description": "",
    "id": "account-link---positive-scenarios-for-account-linking-with-youtube-mock",
    "keyword": "Feature",
    "uri": "_legacy/account_link/account_link_youtube_mock.feature",
    "tags": [
      {
        "line": 1,
        "name": "@accountLink"
      },
      {
        "line": 2,
        "name": "@youtube"
      },
      {
        "line": 3,
        "name": "@mock"
      }
    ]
  },
  {
    "line": 5,
    "elements": [
      {
        "line": 31,
        "name": "Lookup psn account id using partner account id for various partners - should return a 200 with one set of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-psn-account-id-using-partner-account-id-for-various-partners---should-return-a-200-with-one-set-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random twitch partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to twitch account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that the json array body.psnAccounts in response has 1 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 17
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 20
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 22
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "$MISSING"
                ],
                "line": 23
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 24
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 25
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 73,
              "status": "passed"
            },
            "line": 26,
            "name": "I can delete firstPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 36,
        "name": "Lookup psn account id using partner account id for various partners - should return a 200 with one set of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-psn-account-id-using-partner-account-id-for-various-partners---should-return-a-200-with-one-set-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random spotify partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 452,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to spotify account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that the json array body.psnAccounts in response has 1 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 17
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 20
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 22
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "$MISSING"
                ],
                "line": 23
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 24
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 25
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 64,
              "status": "passed"
            },
            "line": 26,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 41,
        "name": "Lookup psn account id using partner account id for various partners - should return a 200 with one set of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-psn-account-id-using-partner-account-id-for-various-partners---should-return-a-200-with-one-set-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random apple partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 458,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that the json array body.psnAccounts in response has 1 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 17
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 20
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 22
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "$MISSING"
                ],
                "line": 23
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 24
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 25
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 26,
            "name": "I can delete firstPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 46,
        "name": "Lookup psn account id using partner account id for various partners - should return a 200 with one set of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-psn-account-id-using-partner-account-id-for-various-partners---should-return-a-200-with-one-set-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 8,
            "name": "I have a random testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 10,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 11,
            "name": "PSN account firstPsnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 12,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 13,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 15,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 16,
            "name": "I verify that the json array body.psnAccounts in response has 1 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 17
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027accountId\u0027)"
                ],
                "line": 18
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 19,
            "name": "I verify that headers in response matches:",
            "rows": [
              {
                "cells": [
                  "Content-Type",
                  "application/json"
                ],
                "line": 20
              },
              {
                "cells": [
                  "X-Psn-Request-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 21
              },
              {
                "cells": [
                  "X-Psn-Correlation-Id",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 22
              },
              {
                "cells": [
                  "X-Psn-Error-Code",
                  "$MISSING"
                ],
                "line": 23
              },
              {
                "cells": [
                  "Cache-Control",
                  "no-store"
                ],
                "line": 24
              },
              {
                "cells": [
                  "X-Content-Type-Options",
                  "$MISSING"
                ],
                "line": 25
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 74,
              "status": "passed"
            },
            "line": 26,
            "name": "I can delete firstPsnAccount link for partner testbidirectionalpartner",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 81,
        "name": "Lookup multiple psn account ids using multiple partner account ids from multiple links for various partners - should return a 200 with 3 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-multiple-psn-account-ids-using-multiple-partner-account-ids-from-multiple-links-for-various-partners---should-return-a-200-with-3-sets-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# create first link"
              }
            ],
            "line": 50,
            "name": "I have a random twitch partner account testPartnerAccount1",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 380,
              "status": "passed"
            },
            "line": 52,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account firstPsnAccount has valid link to twitch account testPartnerAccount1 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 54,
                "value": "# create second link"
              }
            ],
            "line": 55,
            "name": "I have a random twitch partner account testPartnerAccount2",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 476,
              "status": "passed"
            },
            "line": 56,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 57,
            "name": "PSN account secondPsnAccount has valid link to twitch account testPartnerAccount2 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 58,
                "value": "# create third link"
              }
            ],
            "line": 59,
            "name": "I have a random twitch partner account testPartnerAccount3",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 526,
              "status": "passed"
            },
            "line": 60,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 61,
            "name": "PSN account thirdPsnAccount has valid link to twitch account testPartnerAccount3 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I save list testPartnerAccount1.partnerAccountId,testPartnerAccount2.partnerAccountId,testPartnerAccount3.partnerAccountId to partnerAccountIds",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 64,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a bulkGetAccountIdsMultiple.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify that the json array body.psnAccounts in response has 3 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027testPartnerAccount1.partnerAccountId\u0027)"
                ],
                "line": 68
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 69
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027testPartnerAccount2.partnerAccountId\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "partnerAccountId3",
                  "ctx(\u0027testPartnerAccount3.partnerAccountId\u0027)"
                ],
                "line": 72
              },
              {
                "cells": [
                  "accountId3",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 79,
              "status": "passed"
            },
            "line": 74,
            "name": "I can delete firstPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 75,
            "name": "I can delete secondPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 99,
              "status": "passed"
            },
            "line": 76,
            "name": "I can delete thirdPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 86,
        "name": "Lookup multiple psn account ids using multiple partner account ids from multiple links for various partners - should return a 200 with 3 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-multiple-psn-account-ids-using-multiple-partner-account-ids-from-multiple-links-for-various-partners---should-return-a-200-with-3-sets-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# create first link"
              }
            ],
            "line": 50,
            "name": "I have a random spotify partner account testPartnerAccount1",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 406,
              "status": "passed"
            },
            "line": 52,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account firstPsnAccount has valid link to spotify account testPartnerAccount1 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 54,
                "value": "# create second link"
              }
            ],
            "line": 55,
            "name": "I have a random spotify partner account testPartnerAccount2",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 408,
              "status": "passed"
            },
            "line": 56,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 57,
            "name": "PSN account secondPsnAccount has valid link to spotify account testPartnerAccount2 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 58,
                "value": "# create third link"
              }
            ],
            "line": 59,
            "name": "I have a random spotify partner account testPartnerAccount3",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 532,
              "status": "passed"
            },
            "line": 60,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 61,
            "name": "PSN account thirdPsnAccount has valid link to spotify account testPartnerAccount3 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I save list testPartnerAccount1.partnerAccountId,testPartnerAccount2.partnerAccountId,testPartnerAccount3.partnerAccountId to partnerAccountIds",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 64,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a bulkGetAccountIdsMultiple.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify that the json array body.psnAccounts in response has 3 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027testPartnerAccount1.partnerAccountId\u0027)"
                ],
                "line": 68
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 69
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027testPartnerAccount2.partnerAccountId\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "partnerAccountId3",
                  "ctx(\u0027testPartnerAccount3.partnerAccountId\u0027)"
                ],
                "line": 72
              },
              {
                "cells": [
                  "accountId3",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 74,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 74,
              "status": "passed"
            },
            "line": 75,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 76,
            "name": "I can delete thirdPsnAccount link for partner spotify",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 91,
        "name": "Lookup multiple psn account ids using multiple partner account ids from multiple links for various partners - should return a 200 with 3 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-multiple-psn-account-ids-using-multiple-partner-account-ids-from-multiple-links-for-various-partners---should-return-a-200-with-3-sets-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 49,
                "value": "# create first link"
              }
            ],
            "line": 50,
            "name": "I have a random apple partner account testPartnerAccount1",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 445,
              "status": "passed"
            },
            "line": 52,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53,
              "status": "passed"
            },
            "line": 53,
            "name": "PSN account firstPsnAccount has valid link to apple account testPartnerAccount1 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 54,
                "value": "# create second link"
              }
            ],
            "line": 55,
            "name": "I have a random apple partner account testPartnerAccount2",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 388,
              "status": "passed"
            },
            "line": 56,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 57,
            "name": "PSN account secondPsnAccount has valid link to apple account testPartnerAccount2 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 58,
                "value": "# create third link"
              }
            ],
            "line": 59,
            "name": "I have a random apple partner account testPartnerAccount3",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 466,
              "status": "passed"
            },
            "line": 60,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 61,
            "name": "PSN account thirdPsnAccount has valid link to apple account testPartnerAccount3 with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 62,
            "name": "I save list testPartnerAccount1.partnerAccountId,testPartnerAccount2.partnerAccountId,testPartnerAccount3.partnerAccountId to partnerAccountIds",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 63,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 64,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 65,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a bulkGetAccountIdsMultiple.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify that the json array body.psnAccounts in response has 3 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027testPartnerAccount1.partnerAccountId\u0027)"
                ],
                "line": 68
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 69
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027testPartnerAccount2.partnerAccountId\u0027)"
                ],
                "line": 70
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 71
              },
              {
                "cells": [
                  "partnerAccountId3",
                  "ctx(\u0027testPartnerAccount3.partnerAccountId\u0027)"
                ],
                "line": 72
              },
              {
                "cells": [
                  "accountId3",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 107,
              "status": "passed"
            },
            "line": 74,
            "name": "I can delete firstPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72,
              "status": "passed"
            },
            "line": 75,
            "name": "I can delete secondPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 74,
              "status": "passed"
            },
            "line": 76,
            "name": "I can delete thirdPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 123,
        "name": "Lookup multiple psn account ids using partner account id from multiple links for various partners - should return a 200 with 3 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-multiple-psn-account-ids-using-partner-account-id-from-multiple-links-for-various-partners---should-return-a-200-with-3-sets-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 94,
                "value": "# create first link"
              }
            ],
            "line": 95,
            "name": "I have a random twitch partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 96,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 468,
              "status": "passed"
            },
            "line": 97,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account firstPsnAccount has valid link to twitch account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 431,
              "status": "passed"
            },
            "comments": [
              {
                "line": 99,
                "value": "# create second link"
              }
            ],
            "line": 100,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 101,
            "name": "PSN account secondPsnAccount has valid link to twitch account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 536,
              "status": "passed"
            },
            "comments": [
              {
                "line": 102,
                "value": "# create third link"
              }
            ],
            "line": 103,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 104,
            "name": "PSN account thirdPsnAccount has valid link to twitch account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 106,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 107,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 108,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I verify that the json array body.psnAccounts in response has 3 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 110
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 111
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 112
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 113
              },
              {
                "cells": [
                  "partnerAccountId3",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 114
              },
              {
                "cells": [
                  "accountId3",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 115
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 82,
              "status": "passed"
            },
            "line": 116,
            "name": "I can delete firstPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62,
              "status": "passed"
            },
            "line": 117,
            "name": "I can delete secondPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 64,
              "status": "passed"
            },
            "line": 118,
            "name": "I can delete thirdPsnAccount link for partner twitch",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 128,
        "name": "Lookup multiple psn account ids using partner account id from multiple links for various partners - should return a 200 with 3 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-multiple-psn-account-ids-using-partner-account-id-from-multiple-links-for-various-partners---should-return-a-200-with-3-sets-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 94,
                "value": "# create first link"
              }
            ],
            "line": 95,
            "name": "I have a random youtube partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 96,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 376,
              "status": "passed"
            },
            "line": 97,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account firstPsnAccount has valid link to youtube account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 486,
              "status": "passed"
            },
            "comments": [
              {
                "line": 99,
                "value": "# create second link"
              }
            ],
            "line": 100,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 101,
            "name": "PSN account secondPsnAccount has valid link to youtube account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 413,
              "status": "passed"
            },
            "comments": [
              {
                "line": 102,
                "value": "# create third link"
              }
            ],
            "line": 103,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 104,
            "name": "PSN account thirdPsnAccount has valid link to youtube account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 106,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 107,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 108,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I verify that the json array body.psnAccounts in response has 3 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 110
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 111
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 112
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 113
              },
              {
                "cells": [
                  "partnerAccountId3",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 114
              },
              {
                "cells": [
                  "accountId3",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 115
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 116,
            "name": "I can delete firstPsnAccount link for partner youtube",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 66,
              "status": "passed"
            },
            "line": 117,
            "name": "I can delete secondPsnAccount link for partner youtube",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69,
              "status": "passed"
            },
            "line": 118,
            "name": "I can delete thirdPsnAccount link for partner youtube",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 133,
        "name": "Lookup multiple psn account ids using partner account id from multiple links for various partners - should return a 200 with 3 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-multiple-psn-account-ids-using-partner-account-id-from-multiple-links-for-various-partners---should-return-a-200-with-3-sets-of-id-pairs;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 94,
                "value": "# create first link"
              }
            ],
            "line": 95,
            "name": "I have a random apple partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 96,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 526,
              "status": "passed"
            },
            "line": 97,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account firstPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 452,
              "status": "passed"
            },
            "comments": [
              {
                "line": 99,
                "value": "# create second link"
              }
            ],
            "line": 100,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 101,
            "name": "PSN account secondPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 390,
              "status": "passed"
            },
            "comments": [
              {
                "line": 102,
                "value": "# create third link"
              }
            ],
            "line": 103,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 104,
            "name": "PSN account thirdPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 105,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 106,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 107,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 108,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 109,
            "name": "I verify that the json array body.psnAccounts in response has 3 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 110
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 111
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 112
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 113
              },
              {
                "cells": [
                  "partnerAccountId3",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 114
              },
              {
                "cells": [
                  "accountId3",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 115
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 86,
              "status": "passed"
            },
            "line": 116,
            "name": "I can delete firstPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 77,
              "status": "passed"
            },
            "line": 117,
            "name": "I can delete secondPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 98,
              "status": "passed"
            },
            "line": 118,
            "name": "I can delete thirdPsnAccount link for partner apple",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@clientCredentials"
          },
          {
            "line": 3,
            "name": "@readLink"
          },
          {
            "line": 4,
            "name": "@queryPsnAccountByPartnerAccount"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 136,
        "name": "Lookup psn account ids using partner account id for multiple partner links filtering out expired links - should return a 200 with 2 sets of id pairs",
        "description": "",
        "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios;lookup-psn-account-ids-using-partner-account-id-for-multiple-partner-links-filtering-out-expired-links---should-return-a-200-with-2-sets-of-id-pairs",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 137,
            "name": "I have a random apple partner account testPartnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 138,
            "name": "I enable mock for partner api call with scenario appleBulkGetAccountIdsWithTwoExpiredLinks",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 139,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 384,
              "status": "passed"
            },
            "line": 140,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 420,
              "status": "passed"
            },
            "line": 141,
            "name": "I have created a new PSN account thirdPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 401,
              "status": "passed"
            },
            "line": 142,
            "name": "I have created a new PSN account fourthPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "comments": [
              {
                "line": 143,
                "value": "# create 4 valid links"
              }
            ],
            "line": 144,
            "name": "PSN account firstPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 145,
            "name": "PSN account secondPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 146,
            "name": "PSN account thirdPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 147,
            "name": "PSN account fourthPsnAccount has valid link to apple account testPartnerAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 148,
                "value": "# verify get 4 elements in response for the 4 links"
              }
            ],
            "line": 149,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 150,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 151,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 152,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 153,
            "name": "I verify that the json array body.psnAccounts in response has 4 elements",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 108,
              "status": "passed"
            },
            "comments": [
              {
                "line": 154,
                "value": "# expire 2 of the links"
              }
            ],
            "line": 155,
            "name": "PSN account secondPsnAccount has expired link to apple account testPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 112,
              "status": "passed"
            },
            "line": 156,
            "name": "PSN account fourthPsnAccount has expired link to apple account testPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 157,
                "value": "# verify only get 2 elements in response for the 2 non-expired links"
              }
            ],
            "line": 158,
            "name": "I save connectedIdentity:s2s.partner.link.account.get as scope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 159,
            "name": "I make a getClientCredentialsToken.json request expecting 200 status",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 160,
            "name": "I save body.access_token from response as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 161,
            "name": "I make a bulkGetAccountIds.json request expecting 200 status",
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 162,
            "name": "I verify that the json array body.psnAccounts in response has 2 elements and contains:",
            "rows": [
              {
                "cells": [
                  "partnerAccountId1",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 163
              },
              {
                "cells": [
                  "accountId1",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 164
              },
              {
                "cells": [
                  "partnerAccountId2",
                  "ctx(\u0027partnerAccountId\u0027)"
                ],
                "line": 165
              },
              {
                "cells": [
                  "accountId2",
                  "ctx(\u0027thirdPsnAccount.accountId\u0027)"
                ],
                "line": 166
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 68,
              "status": "passed"
            },
            "line": 167,
            "name": "I can delete firstPsnAccount link for partner apple",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 44,
              "error_message": "java.lang.AssertionError: Unexpected HTTP response received expected\u003d204 actual\u003d404 \n request: RequestHolder{request\u003dRequestDefinition{method\u003dDELETE, url\u003d\u0027http://connected-identity.e1-np-eib.navcloud.sonynei.net/api/connectAccount/v2/users/1693532237269310478/partners/apple/link\u0027, headers\u003d{content-type\u003dapplication/json, Authorization\u003dBearer eyJraWQiOiJucF8xIiwiYWxnIjoiUlMyNTYifQ.eyJhY2NvdW50X2lkIjoiMTY5MzUzMjIzNzI2OTMxMDQ3OCIsImFjY291bnRfdXVpZCI6IjhhMzRjMzFlLTgxMzItNGY1Ni1iNTRjLTY0YzFmNzM5NzIxOSIsImFnZSI6NTIsImF1dGh6X2MiOiJlTnFyVmlwT3ppOUlWYkpTU3M3UHkwdE5Ma2xOOFV4SnpTdkpMS20wS2tnc0tzbExMZExMeWN6TDFrdE1UczR2elN2UnkwM01TMHhQVmFvRkFHdjVGWlkiLCJjbGllbnRfaWQiOiIzNGM1MWFhMC03ZDU2LTRhOWUtOWI0Yi00N2Y0NjkwYjFhZjUiLCJkY2ltX2lkIjoiY2UyZmU4MmQtMmM5ZS00YjU4LTljYmYtYzU5ZmMzYTg2ZTQ1IiwiZW52X2lzc19pZCI6IjQiLCJleHAiOjE2Nzg0NTM5NjgsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsImlhdCI6MTY3ODQ1Mjc2OCwiaXNfY2hpbGQiOmZhbHNlLCJpc3MiOiJodHRwczovL2F1dGguYWNjb3VudC5zb255LmNvbS8iLCJqdGkiOiIxZGRkODIwNy1kMDhmLTRiMTMtYmU0NS0yYzYzNDBlMWEzNjAiLCJsZWdhbF9jb3VudHJ5IjoiVVMiLCJsb2NhbGUiOiJlbi1VUyIsInVzZXJfZGV2aWNlX2lwIjoiMTAuMjQyLjIzMC4xNTEiLCJ2ZXIiOiIyIn0.WLf2tb-WUTIhxRIAKNL0-F6kZPAWMYSYjQKvETwdMM3xw3pCxE_hPHBnUpZzzsfUR1y5SxbW_7-rkJC8GyvOVyx6huWbte3StkFc2FeQNmThqGqPWSgWXMuSWULRhWJuhjMt2FublVNrQpIUTlCJe1dTwmkQ18lBG9GKYGy6PkCN3vweShFAv-NkwTvy7Rk_U-cm_FqaVXm7zJ9fPRpHPKkScWlxN42rlJqvw48tmSVqwKX6ND_nReA0LV-uULNVjSnEgjsRbsVjkqxF_mR8oORSseRAJh3WjRZ0310xw_p5ZkPtx31Xlcin9Dk78883JbW3RWvAz7IoynkgW-KGAXTvXbxFt2y8Xypo8Ppy_fJvF8bWTV92ds6uork5vLioynrDmzmapxCdZRdmqnxqR43L-fCnPEuqp01WeI0RiSJsLwUkgdLA-5_KqfxFJ2NbK0mZOSTcfFWLqcEEXLGXRhefHeZAnpn7WpCF51BNXZ0p9r9iIykcWmbW4E27bEIF, X-Cis-Mock-Partner\u003dtrue}, formParams\u003dnull, queryParams\u003dnull, cookies\u003dnull, body\u003dnull}, metadata\u003d{expectedStatusCode\u003d204}, responseExtraction\u003dnull} \n response: ResponseHolder{statusCode\u003d404, statusText\u003d\u0027\u0027, body\u003d{\"error\":{\"code\":1064968,\"message\":\"Account is not linked with partner\",\"referenceId\":\"448c5724-340f-419f-8c57-24340f919ffe\",\"validationErrors\":[]}}, contentType\u003d\u0027application/json\u0027, headers\u003d{X-Psn-Request-Id\u003d448c5724-340f-419f-8c57-24340f919ffe, Access-Control-Expose-Headers\u003dAccess-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Max-Age,Content-Length,Location,Retry-After,Strict-Transport-Security,X-Content-Type-Options,X-Psn-Correlation-Id,X-Psn-Error-Code,X-Psn-Experiment-Id,X-Psn-Request-Id, X-Psn-Error-Code\u003d1064968, Server\u003dnginx, Cache-Control\u003dno-store, Access-Control-Allow-Credentials\u003dtrue, Connection\u003dkeep-alive, Content-Length\u003d148, X-Psn-Correlation-Id\u003d3a2530ff-8e9d-45e0-a530-ff8e9d55e091, Access-Control-Max-Age\u003d86400, Date\u003dFri, 10 Mar 2023 12:52:48 GMT, Content-Type\u003dapplication/json}, cookies\u003d[]}\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.assertStatusCode(AsyncHttpSteps.java:112)\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.lambda$commonExecuteRequest$0(AsyncHttpSteps.java:88)\n\tat io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:59)\n\tat io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:67)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:23)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:12)\n\tat org.asynchttpclient.AsyncCompletionHandler.onCompleted(AsyncCompletionHandler.java:66)\n\tat org.asynchttpclient.netty.NettyResponseFuture.loadContent(NettyResponseFuture.java:222)\n\tat org.asynchttpclient.netty.NettyResponseFuture.done(NettyResponseFuture.java:257)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.finishUpdate(AsyncHttpClientHandler.java:241)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleChunk(HttpHandler.java:114)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleRead(HttpHandler.java:143)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.channelRead(AsyncHttpClientHandler.java:78)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 168,
            "name": "I can delete secondPsnAccount link for partner apple",
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 169,
            "name": "I can delete thirdPsnAccount link for partner apple",
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 170,
            "name": "I can delete fourthPsnAccount link for partner apple",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 135,
            "name": "@apple"
          }
        ]
      }
    ],
    "name": "Look up psn account ids for given partner account ids - positive scenarios",
    "description": "",
    "id": "look-up-psn-account-ids-for-given-partner-account-ids---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/read/queryPsnAccountByPartnerAccountPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@clientCredentials"
      },
      {
        "line": 2,
        "name": "@wiremock"
      },
      {
        "line": 3,
        "name": "@readLink"
      },
      {
        "line": 4,
        "name": "@queryPsnAccountByPartnerAccount"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 7,
        "name": "I cannot get the partner token for partner A using partner B\u0027s partner ID",
        "description": "",
        "id": "sdk---negative-scenarios-for-sdk-apis;i-cannot-get-the-partner-token-for-partner-a-using-partner-b\u0027s-partner-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 365,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 9,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectAccount:youtube.link.token.get"
                ],
                "line": 10
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 11,
            "name": "I make a sdkGetPartnerToken.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 12
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 14
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 15
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@selenium"
          },
          {
            "line": 6,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 20,
        "name": "I cannot access the SDK APIs using client credentials token",
        "description": "",
        "id": "sdk---negative-scenarios-for-sdk-apis;i-cannot-access-the-sdk-apis-using-client-credentials-token",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 358,
              "status": "passed"
            },
            "line": 21,
            "name": "I have created a new PSN account with scope",
            "rows": [
              {
                "cells": [
                  "scope",
                  "connectAccount:spotify.link.token.get"
                ],
                "line": 22
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 23,
            "name": "I make a sdkGetPartnerToken.json request expecting 403 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 24
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 26
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 27
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 28
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 18,
            "name": "@selenium"
          },
          {
            "line": 19,
            "name": "@Serialize"
          }
        ]
      }
    ],
    "name": "SDK - negative scenarios for SDK APIs",
    "description": "",
    "id": "sdk---negative-scenarios-for-sdk-apis",
    "keyword": "Feature",
    "uri": "_legacy/connected_accounts/connected_accounts_negative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@sdk"
      },
      {
        "line": 2,
        "name": "@negative"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "line": 6,
        "name": "Linking via device code flow - should return readable link",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;linking-via-device-code-flow---should-return-readable-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 7,
            "name": "I have a twitch partner account testTwitchAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 862,
              "status": "passed"
            },
            "line": 8,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 9,
            "name": "I enable mock for partner api call",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 10,
            "name": "I have a twitch device code for firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 11,
            "name": "I claim the code for twitch using testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 12,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 13
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027firstPsnAccount.accountId\u0027)"
                ],
                "line": 14
              },
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027firstPsnAccount.accessToken\u0027)"
                ],
                "line": 15
              },
              {
                "cells": [
                  "code",
                  "ctx(\u0027code\u0027)"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 17,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "mockTwitchAccessToken(.*)"
                ],
                "line": 18
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 19
              },
              {
                "cells": [
                  "expiresIn",
                  "2592000"
                ],
                "line": 20
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 21,
            "name": "I verify that body.scopes array in response contains mockTwitchScope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55,
              "status": "passed"
            },
            "line": 22,
            "name": "I can verify firstPsnAccount link to partner twitch account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 23,
            "name": "I can read firstPsnAccount token for partner twitch",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63,
              "status": "passed"
            },
            "line": 24,
            "name": "I can delete firstPsnAccount link for partner twitch",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@pollDeviceCodeApi"
          }
        ]
      },
      {
        "line": 27,
        "name": "Link multiple accounts using device code flow - should return multiple readable links",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;link-multiple-accounts-using-device-code-flow---should-return-multiple-readable-links",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "I have a twitch partner account testTwitchAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 29,
            "name": "I enable mock for partner api call",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 449,
              "status": "passed"
            },
            "line": 30,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 224,
              "status": "passed"
            },
            "line": 31,
            "name": "I have linked firstPsnAccount to twitch account testTwitchAccount using device code flow",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 448,
              "status": "passed"
            },
            "line": 32,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 47,
              "status": "passed"
            },
            "line": 33,
            "name": "I have a twitch device code for secondPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 34,
            "name": "I claim the code for twitch using testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 35,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 36
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027secondPsnAccount.accountId\u0027)"
                ],
                "line": 37
              },
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027secondPsnAccount.accessToken\u0027)"
                ],
                "line": 38
              },
              {
                "cells": [
                  "code",
                  "ctx(\u0027code\u0027)"
                ],
                "line": 39
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "mockTwitchAccessToken(.*)"
                ],
                "line": 41
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 42
              },
              {
                "cells": [
                  "expiresIn",
                  "2592000"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify that body.scopes array in response contains mockTwitchScope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 66,
              "status": "passed"
            },
            "line": 45,
            "name": "I can verify secondPsnAccount link to partner twitch account testTwitchAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55,
              "status": "passed"
            },
            "line": 46,
            "name": "I can read secondPsnAccount token for partner twitch",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify that firstPsnAccount.accountId and secondPsnAccount.accountId are not equal",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 79,
              "status": "passed"
            },
            "line": 48,
            "name": "I can delete firstPsnAccount link for partner twitch",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70,
              "status": "passed"
            },
            "line": 49,
            "name": "I can delete secondPsnAccount link for partner twitch",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 26,
            "name": "@pollDeviceCodeApi"
          }
        ]
      },
      {
        "line": 55,
        "name": "Multi-link check - Can create a link when there is no other link to the partner account",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-when-there-is-no-other-link-to-the-partner-account",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 56,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 57,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 444,
              "status": "passed"
            },
            "line": 58,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 59,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 163,
              "status": "passed"
            },
            "line": 60,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 61,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 51,
            "name": "@spotify"
          },
          {
            "line": 52,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 53,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 54,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 67,
        "name": "Multi-link check - Can create a link to the same PSN account when the existing link has not expired (with a valid access token cached)",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(with-a-valid-access-token-cached)",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 68,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 69,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 371,
              "status": "passed"
            },
            "line": 70,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 71,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 72,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 183,
              "status": "passed"
            },
            "line": 73,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 74,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 63,
            "name": "@spotify"
          },
          {
            "line": 64,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 65,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 66,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 80,
        "name": "Multi-link check - Can create a link to the same PSN account when the existing link has not expired (without a valid access token cached)",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-not-expired-(without-a-valid-access-token-cached)",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 81,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 20,
              "status": "passed"
            },
            "line": 82,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 349,
              "status": "passed"
            },
            "line": 83,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 84,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 85,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 182,
              "status": "passed"
            },
            "line": 86,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 87,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 76,
            "name": "@spotify"
          },
          {
            "line": 77,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 78,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 79,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 93,
        "name": "Multi-link check - Can create a link to the same PSN account when the existing link has expired (without a valid access token cached and non refreshable token)",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-to-the-same-psn-account-when-the-existing-link-has-expired-(without-a-valid-access-token-cached-and-non-refreshable-token)",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 94,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 95,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 351,
              "status": "passed"
            },
            "line": 96,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 97,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 98,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173,
              "status": "passed"
            },
            "line": 99,
            "name": "I can link firstPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 100,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 89,
            "name": "@spotify"
          },
          {
            "line": 90,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 91,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 92,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 106,
        "name": "Multi-link check - Can create a link when the other link to the partner account has expired",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-when-the-other-link-to-the-partner-account-has-expired",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 107,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 108,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 109,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 110,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 111,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 121,
              "status": "passed"
            },
            "line": 112,
            "name": "PSN account firstPsnAccount has expired link to spotify account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141,
              "status": "passed"
            },
            "line": 113,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 50,
              "status": "passed"
            },
            "line": 114,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 102,
            "name": "@spotify"
          },
          {
            "line": 103,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 104,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 105,
            "name": "@Serialize"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 115,
            "value": "#   Deletion of firstPsnAccount link is not needed as the expired link gets deleted in multi link validator"
          }
        ],
        "line": 121,
        "name": "Multi-link check - Can create a link when the other link to that partner account has not expired but cannot be refreshed",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-when-the-other-link-to-that-partner-account-has-not-expired-but-cannot-be-refreshed",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 122,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 123,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 413,
              "status": "passed"
            },
            "line": 124,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 345,
              "status": "passed"
            },
            "line": 125,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 126,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 127,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that cannot be refreshed",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 170,
              "status": "passed"
            },
            "line": 128,
            "name": "I can link secondPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 60,
              "status": "passed"
            },
            "line": 129,
            "name": "I can delete secondPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 117,
            "name": "@spotify"
          },
          {
            "line": 118,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 119,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 120,
            "name": "@Serialize"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 130,
            "value": "#   Deletion of firstPsnAccount link is not needed as the expired link gets deleted in multi link validator"
          }
        ],
        "line": 135,
        "name": "Linking Via Device Code Flow for discord isBidirectional\u003dfalse - should create link",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;linking-via-device-code-flow-for-discord-isbidirectional\u003dfalse---should-create-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 136,
            "name": "I have a random discord partner account testDiscordAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 402,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 139
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 140,
            "name": "I enable mock for partner api call with scenario discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 141,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 142
              },
              {
                "cells": [
                  "psnAuthCode",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive-mockPsnAuthCode"
                ],
                "line": 143
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 144,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "deviceCode",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive-mockDiscordDeviceCode(.*)"
                ],
                "line": 145
              },
              {
                "cells": [
                  "userCode",
                  "mockDiscordUserCode(.*)"
                ],
                "line": 146
              },
              {
                "cells": [
                  "verificationUri",
                  "https://discord.com/activate"
                ],
                "line": 147
              },
              {
                "cells": [
                  "verificationUriPrefilled",
                  "https://discord.com/activate(.*)"
                ],
                "line": 148
              },
              {
                "cells": [
                  "expiresIn",
                  "604800"
                ],
                "line": 149
              },
              {
                "cells": [
                  "pollingInterval",
                  "5"
                ],
                "line": 150
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 151,
            "name": "I claim the code for discord using testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58,
              "status": "passed"
            },
            "line": 152,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 153
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027psnAccount.accountId\u0027)"
                ],
                "line": 154
              },
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027psnAccount.accessToken\u0027)"
                ],
                "line": 155
              },
              {
                "cells": [
                  "code",
                  "ctx(\u0027code\u0027)"
                ],
                "line": 156
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 157,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive-mockDiscordAccessToken(.*)"
                ],
                "line": 158
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 159
              },
              {
                "cells": [
                  "expiresIn",
                  "604800"
                ],
                "line": 160
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 161,
            "name": "I verify that body.scopes array in response contains guilds",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 162,
            "name": "I verify that body.scopes array in response contains dm_channels.read",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 163,
            "name": "I verify that body.scopes array in response contains guilds.members.read",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 164,
            "name": "I verify that body.scopes array in response contains identify",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 165,
            "name": "I verify that body.scopes array in response contains voice",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 166,
            "name": "I can verify psnAccount link to partner discord account testDiscordAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 167,
            "name": "I can delete psnAccount link for partner discord",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 132,
            "name": "@discord"
          },
          {
            "line": 133,
            "name": "@createLink"
          },
          {
            "line": 134,
            "name": "@Serialize"
          }
        ]
      },
      {
        "line": 174,
        "name": "Linking via device code flow for testbidirectionalpartner - should return readable link",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;linking-via-device-code-flow-for-testbidirectionalpartner---should-return-readable-link",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 175,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 111,
              "status": "passed"
            },
            "line": 176,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 117,
              "status": "passed"
            },
            "line": 177,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 204,
              "status": "passed"
            },
            "line": 178,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57,
              "status": "passed"
            },
            "line": 179,
            "name": "I get and claim a device code for psnAccount with PSN auth code for testbidirectionalpartner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 180,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "deviceCode",
                  "mockTestBidirectionalPartnerDeviceCode(.*)"
                ],
                "line": 181
              },
              {
                "cells": [
                  "userCode",
                  "[0-9]{6}"
                ],
                "line": 182
              },
              {
                "cells": [
                  "verificationUri",
                  "https://www.testbidirectionalpartner.com/activate(.*)"
                ],
                "line": 183
              },
              {
                "cells": [
                  "verificationUriPrefilled",
                  "https://www.testbidirectionalpartner.com/activate(.*)"
                ],
                "line": 184
              },
              {
                "cells": [
                  "expiresIn",
                  "[0-9]{1,}"
                ],
                "line": 185
              },
              {
                "cells": [
                  "pollingInterval",
                  "[0-9]{1,}"
                ],
                "line": 186
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 187,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 188
              },
              {
                "cells": [
                  "accountId",
                  "ctx(\u0027psnAccount.accountId\u0027)"
                ],
                "line": 189
              },
              {
                "cells": [
                  "accessToken",
                  "ctx(\u0027psnAccount.accessToken\u0027)"
                ],
                "line": 190
              },
              {
                "cells": [
                  "code",
                  "ctx(\u0027code\u0027)"
                ],
                "line": 191
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 192,
            "name": "I verify that body in response matches:",
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "mockTestBidirectionalPartnerAccessToken(.*)"
                ],
                "line": 193
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 194
              },
              {
                "cells": [
                  "expiresIn",
                  "2592000"
                ],
                "line": 195
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 196,
            "name": "I verify that body.scopes array in response contains mockTestBidirectionalPartnerScope",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 197,
            "name": "I can verify psnAccount link to partner testbidirectionalpartner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 198,
            "name": "I can read psnAccount token for partner testbidirectionalpartner",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 81,
              "status": "passed"
            },
            "line": 199,
            "name": "I can delete psnAccount link for partner testbidirectionalpartner",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 170,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 171,
            "name": "@getDeviceCodeApi"
          },
          {
            "line": 172,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 173,
            "name": "@Serialize"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 230,
            "value": "# valid access token cached"
          }
        ],
        "line": 231,
        "name": "Multi-link check - Can create a link using device code flow with psn auth code for partner supporting link overwrite",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-using-device-code-flow-with-psn-auth-code-for-partner-supporting-link-overwrite;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 204,
            "name": "I have a discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 205,
            "name": "I remove existing link for discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 206,
            "name": "I enable mock for partner api call with scenario discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 404,
              "status": "passed"
            },
            "line": 207,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 878,
              "status": "passed"
            },
            "line": 208,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 77,
              "status": "passed"
            },
            "comments": [
              {
                "line": 209,
                "value": "# link first account"
              }
            ],
            "line": 210,
            "name": "PSN account firstPsnAccount has valid link to discord account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "comments": [
              {
                "line": 211,
                "value": "# need user token for secondPsnAccount and need to set accountId and accessToken for secondPsnAccount"
              }
            ],
            "line": 212,
            "name": "I get a jwt user access token for the account secondPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 213,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 214,
            "name": "I save ctx(\u0027secondPsnAccount.accessToken\u0027) as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 215,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 200 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 216
              },
              {
                "cells": [
                  "psnAuthCode",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive-mockPsnAuthCode"
                ],
                "line": 217
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 218,
            "name": "I claim the code for discord using testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 219,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 220
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 221,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive(.*)"
                ],
                "line": 222
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 223
              },
              {
                "cells": [
                  "expiresIn",
                  "604800"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 177,
              "status": "passed"
            },
            "line": 225,
            "name": "I can delete secondPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 202,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 201,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 232,
            "value": "# without a valid access token cached but with a refreshable token"
          }
        ],
        "line": 233,
        "name": "Multi-link check - Can create a link using device code flow with psn auth code for partner supporting link overwrite",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-using-device-code-flow-with-psn-auth-code-for-partner-supporting-link-overwrite;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 204,
            "name": "I have a discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 26,
              "status": "passed"
            },
            "line": 205,
            "name": "I remove existing link for discord partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 206,
            "name": "I enable mock for partner api call with scenario discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 207,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 473,
              "status": "passed"
            },
            "line": 208,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "comments": [
              {
                "line": 209,
                "value": "# link first account"
              }
            ],
            "line": 210,
            "name": "PSN account firstPsnAccount has valid link to discord account testPartnerAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "comments": [
              {
                "line": 211,
                "value": "# need user token for secondPsnAccount and need to set accountId and accessToken for secondPsnAccount"
              }
            ],
            "line": 212,
            "name": "I get a jwt user access token for the account secondPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 213,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 214,
            "name": "I save ctx(\u0027secondPsnAccount.accessToken\u0027) as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 215,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 200 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 216
              },
              {
                "cells": [
                  "psnAuthCode",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive-mockPsnAuthCode"
                ],
                "line": 217
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 218,
            "name": "I claim the code for discord using testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 219,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 220
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 221,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "discordCreateLinkWithPartnerDeviceCodePsnLinkExistsPositive(.*)"
                ],
                "line": 222
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 223
              },
              {
                "cells": [
                  "expiresIn",
                  "604800"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 225,
            "name": "I can delete secondPsnAccount link for partner discord",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 202,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 201,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 238,
            "value": "# valid access token cached"
          }
        ],
        "line": 239,
        "name": "Multi-link check - Can create a link using device code flow with psn auth code for partner supporting link overwrite",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-using-device-code-flow-with-psn-auth-code-for-partner-supporting-link-overwrite;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 204,
            "name": "I have a testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 205,
            "name": "I remove existing link for testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 206,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 207,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 348,
              "status": "passed"
            },
            "line": 208,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "comments": [
              {
                "line": 209,
                "value": "# link first account"
              }
            ],
            "line": 210,
            "name": "PSN account firstPsnAccount has valid link to testbidirectionalpartner account testPartnerAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "comments": [
              {
                "line": 211,
                "value": "# need user token for secondPsnAccount and need to set accountId and accessToken for secondPsnAccount"
              }
            ],
            "line": 212,
            "name": "I get a jwt user access token for the account secondPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 213,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 214,
            "name": "I save ctx(\u0027secondPsnAccount.accessToken\u0027) as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 215,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 200 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 216
              },
              {
                "cells": [
                  "psnAuthCode",
                  "v3.mockPsnAuthCode"
                ],
                "line": 217
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 218,
            "name": "I claim the code for testbidirectionalpartner using testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61,
              "status": "passed"
            },
            "line": 219,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 220
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 221,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "mockTestBidirectionalPartnerAccessToken(.*)"
                ],
                "line": 222
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 223
              },
              {
                "cells": [
                  "expiresIn",
                  "2592000"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 73,
              "status": "passed"
            },
            "line": 225,
            "name": "I can delete secondPsnAccount link for partner testbidirectionalpartner",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 202,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 201,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 240,
            "value": "# without a valid access token cached but with a refreshable token"
          }
        ],
        "line": 241,
        "name": "Multi-link check - Can create a link using device code flow with psn auth code for partner supporting link overwrite",
        "description": "",
        "id": "create-link-using-device-code-flow---positive-scenarios;multi-link-check---can-create-a-link-using-device-code-flow-with-psn-auth-code-for-partner-supporting-link-overwrite;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 204,
            "name": "I have a testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 51,
              "status": "passed"
            },
            "line": 205,
            "name": "I remove existing link for testbidirectionalpartner partner account testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 206,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              3
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 394,
              "status": "passed"
            },
            "line": 207,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 808,
              "status": "passed"
            },
            "line": 208,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "comments": [
              {
                "line": 209,
                "value": "# link first account"
              }
            ],
            "line": 210,
            "name": "PSN account firstPsnAccount has valid link to testbidirectionalpartner account testPartnerAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "comments": [
              {
                "line": 211,
                "value": "# need user token for secondPsnAccount and need to set accountId and accessToken for secondPsnAccount"
              }
            ],
            "line": 212,
            "name": "I get a jwt user access token for the account secondPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 213,
            "name": "I save ctx(\u0027secondPsnAccount.accountId\u0027) as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 214,
            "name": "I save ctx(\u0027secondPsnAccount.accessToken\u0027) as accessToken",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 215,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 200 status:",
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 216
              },
              {
                "cells": [
                  "psnAuthCode",
                  "v3.mockPsnAuthCode"
                ],
                "line": 217
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 218,
            "name": "I claim the code for testbidirectionalpartner using testPartnerAccount",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 94,
              "status": "passed"
            },
            "line": 219,
            "name": "I make a pollPartnerDeviceCode.json request expecting 200 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 220
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 221,
            "name": "I verify that body in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "accessToken",
                  "mockTestBidirectionalPartnerAccessToken(.*)"
                ],
                "line": 222
              },
              {
                "cells": [
                  "tokenType",
                  "Bearer"
                ],
                "line": 223
              },
              {
                "cells": [
                  "expiresIn",
                  "2592000"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 73,
              "status": "passed"
            },
            "line": 225,
            "name": "I can delete secondPsnAccount link for partner testbidirectionalpartner",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 202,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 201,
            "name": "@getDeviceCodeApi"
          }
        ]
      }
    ],
    "name": "Create link using device code flow - positive scenarios",
    "description": "",
    "id": "create-link-using-device-code-flow---positive-scenarios",
    "keyword": "Feature",
    "uri": "link/create/oauth2/createLinkWithDeviceCodeFlowPositive.feature",
    "tags": [
      {
        "line": 1,
        "name": "@deviceCodeFlow"
      },
      {
        "line": 2,
        "name": "@wiremock"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "comments": [
          {
            "line": 20,
            "value": "# valid access token cached"
          }
        ],
        "line": 21,
        "name": "Multi-link check - Cannot create a link using device code flow without psn auth code when the other link to the partner account has not expired",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;multi-link-check---cannot-create-a-link-using-device-code-flow-without-psn-auth-code-when-the-other-link-to-the-partner-account-has-not-expired;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 11,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 538,
              "status": "passed"
            },
            "line": 12,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 558,
              "status": "passed"
            },
            "line": 13,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72,
              "status": "passed"
            },
            "line": 15,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with valid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 137,
              "status": "passed"
            },
            "line": 16,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 66,
              "status": "passed"
            },
            "line": 17,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 8,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 7,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 22,
            "value": "# without a valid access token cached but with a refreshable token"
          }
        ],
        "line": 23,
        "name": "Multi-link check - Cannot create a link using device code flow without psn auth code when the other link to the partner account has not expired",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;multi-link-check---cannot-create-a-link-using-device-code-flow-without-psn-auth-code-when-the-other-link-to-the-partner-account-has-not-expired;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 10,
            "name": "I have a spotify partner account testSpotifyAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 59,
              "status": "passed"
            },
            "line": 11,
            "name": "I remove existing link for spotify partner account testSpotifyAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 466,
              "status": "passed"
            },
            "line": 12,
            "name": "I have created a new PSN account firstPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 590,
              "status": "passed"
            },
            "line": 13,
            "name": "I have created a new PSN account secondPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 14,
            "name": "I enable mock for partner api call",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 15,
            "name": "PSN account firstPsnAccount has valid link to spotify account testSpotifyAccount with invalid access token that can be refreshed",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 92,
              "status": "passed"
            },
            "line": 16,
            "name": "I cannot multilink secondPsnAccount to spotify account testSpotifyAccount using createLinkWithDeviceCodeFlow",
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 93,
              "status": "passed"
            },
            "line": 17,
            "name": "I can delete firstPsnAccount link for partner spotify",
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@spotify"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 8,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 7,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 40,
        "name": "Get Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 867,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 30
              },
              {
                "cells": [
                  "psnAuthCode",
                  "$MISSING"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 34
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 25,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 45,
        "name": "Get Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 380,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 30
              },
              {
                "cells": [
                  "psnAuthCode",
                  "$MISSING"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 34
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 25,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 50,
        "name": "Get Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 462,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 30
              },
              {
                "cells": [
                  "psnAuthCode",
                  "$MISSING"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 34
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 25,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 815,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 30
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 34
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 25,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 60,
        "name": "Get Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 810,
              "status": "passed"
            },
            "line": 27,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 28,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 29,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 30
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 33
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 34
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 25,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 77,
        "name": "Get Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 463,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 65,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 67
              },
              {
                "cells": [
                  "psnAuthCode",
                  "$MISSING"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 70
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 71
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 62,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 82,
        "name": "Get Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 858,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 65,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 67
              },
              {
                "cells": [
                  "psnAuthCode",
                  "$MISSING"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 70
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 71
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 62,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 87,
        "name": "Get Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 457,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 65,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 67
              },
              {
                "cells": [
                  "psnAuthCode",
                  "$MISSING"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 70
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 71
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 62,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 92,
        "name": "Get Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 882,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 65,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 67
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 70
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 71
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 62,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 97,
        "name": "Get Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 328,
              "status": "passed"
            },
            "line": 64,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 65,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 66,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 403 status:",
            "matchedColumns": [
              0,
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 67
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 69,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 70
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 71
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 62,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 113,
        "name": "Get Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 887,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 103,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 104,
            "name": "I make a getPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "invalidPart"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 107
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 108
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 100,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 99,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 118,
        "name": "Get Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 469,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 103,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 104,
            "name": "I make a getPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 107
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 108
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 100,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 99,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 123,
        "name": "Get Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 501,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 103,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 104,
            "name": "I make a getPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 107
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 108
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 100,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 99,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 128,
        "name": "Get Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 43,
              "status": "passed"
            },
            "line": 103,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 104,
            "name": "I make a getPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 107
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 108
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 100,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 99,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 133,
        "name": "Get Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 582,
              "status": "passed"
            },
            "line": 102,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56,
              "status": "passed"
            },
            "line": 103,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 104,
            "name": "I make a getPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 105
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 106,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 107
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 108
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 100,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 99,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 150,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 450,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidPsnAuthCode"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 151,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 461,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidClientId"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 152,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 478,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidClientSecret"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 153,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 479,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidGrant"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064994"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Get partner token by auth code failed"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 154,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 566,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "unauthorizedClient"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 155,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 423,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 44,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 226,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "unsupportedGrantType"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 156,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 449,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidScope"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 157,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 460,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "generic400error"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 158,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 427,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "unexpectedError"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064995"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Partner error"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 163,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 577,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidPsnAuthCode"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 164,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 585,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidClientId"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 165,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 480,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidClientSecret"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 166,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 381,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidGrant"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064994"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Get partner token by auth code failed"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 167,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 455,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "unauthorizedClient"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 168,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 675,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "unsupportedGrantType"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 169,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 385,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "invalidScope"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 170,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 452,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "generic400error"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 171,
        "name": "Get Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-returns-error---should-return-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 486,
              "status": "passed"
            },
            "line": 137,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 138,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 139,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29,
              "status": "passed"
            },
            "line": 140,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 141
              },
              {
                "cells": [
                  "psnAuthCode",
                  "unexpectedError"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 143,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064995"
                ],
                "line": 144
              },
              {
                "cells": [
                  "message",
                  "Partner Error"
                ],
                "line": 145
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 135,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 185,
        "name": "Get Partner Device Code when partner API times out - should get timeout error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-times-out---should-get-timeout-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 442,
              "status": "passed"
            },
            "line": 175,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 176,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 177,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5034,
              "status": "passed"
            },
            "line": 178,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting a timeout:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 179
              },
              {
                "cells": [
                  "psnAuthCode",
                  "timeout"
                ],
                "line": 180
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 173,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 190,
        "name": "Get Partner Device Code when partner API times out - should get timeout error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-when-partner-api-times-out---should-get-timeout-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 332,
              "status": "passed"
            },
            "line": 175,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 176,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 177,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5059,
              "status": "passed"
            },
            "line": 178,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting a timeout:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 179
              },
              {
                "cells": [
                  "psnAuthCode",
                  "timeout"
                ],
                "line": 180
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 173,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 206,
        "name": "Get Partner Device Code with invalid request parameter - should return 400 BAD_REQUEST_PARAMETER error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-request-parameter---should-return-400-bad-request-parameter-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 442,
              "status": "passed"
            },
            "line": 194,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 195,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 196,
            "name": "I save invalid as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 197,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 198
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 199,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 200
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 201
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 192,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 211,
        "name": "Get Partner Device Code with invalid request parameter - should return 400 BAD_REQUEST_PARAMETER error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-invalid-request-parameter---should-return-400-bad-request-parameter-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 194,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 195,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 196,
            "name": "I save invalid as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 197,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 198
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 199,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 200
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 201
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 192,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 215,
        "name": "Get Partner Device Code with no PSN auth code and bidirectional true - should return 400 psnAuthCode required error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-no-psn-auth-code-and-bidirectional-true---should-return-400-psnauthcode-required-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 438,
              "status": "passed"
            },
            "line": 216,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 217,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 218,
            "name": "I make a getPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 219
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 220,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065010"
                ],
                "line": 221
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 222,
            "name": "I verify that body.error.message in response contains:",
            "rows": [
              {
                "cells": [
                  "psnAuthCode required"
                ],
                "line": 223
              },
              {
                "cells": [
                  "bi-directional partner"
                ],
                "line": 224
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 213,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 214,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 239,
        "name": "Get Partner Device Code with missing token - should return 403 Invalid authorization error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-missing-token---should-return-403-invalid-authorization-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 230
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 231
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 232,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 233
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 234
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 226,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 244,
        "name": "Get Partner Device Code with missing token - should return 403 Invalid authorization error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-missing-token---should-return-403-invalid-authorization-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 424,
              "status": "passed"
            },
            "line": 228,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 229,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 230
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 231
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 232,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 233
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 234
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 226,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 260,
            "value": "# old token from 11/29/2022"
          }
        ],
        "line": 261,
        "name": "Get Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 380,
              "status": "passed"
            },
            "line": 248,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 249,
            "name": "I save ced0f74c-2a01-4acc-aa27-af72c5039faa as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 250,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 251
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 252
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 253,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 254
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 255
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 246,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 262,
            "value": "# invalid"
          }
        ],
        "line": 263,
        "name": "Get Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 423,
              "status": "passed"
            },
            "line": 248,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 249,
            "name": "I save invalidToken as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 250,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 251
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 252
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 253,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 254
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 255
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 246,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 268,
            "value": "# older token (08/29/2022)"
          }
        ],
        "line": 269,
        "name": "Get Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 419,
              "status": "passed"
            },
            "line": 248,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 249,
            "name": "I save 4635257f-e9c1-46ab-90ff-3be5276bbf7a as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 250,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 251
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 252
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 253,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 254
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 255
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 246,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 270,
            "value": "# proper format but not valid"
          }
        ],
        "line": 271,
        "name": "Get Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 248,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 249,
            "name": "I save 12345678-0000-0000-0000-000000000000 as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 250,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 251
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 252
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 253,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 254
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 255
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 246,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 290,
        "name": "Get Partner Device Code with child account - should return 400 Minor account is not permitted to link error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-child-account---should-return-400-minor-account-is-not-permitted-to-link-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 405,
              "status": "passed"
            },
            "line": 275,
            "name": "I have created a new PSN account psnOwnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 276,
            "name": "I add child+ as a prefix to signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 277,
            "name": "I make a createPsnMinorAccount.json request",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 278,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 279
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 280,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 281
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 282
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 283,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 284
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 285
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 273,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 295,
        "name": "Get Partner Device Code with child account - should return 400 Minor account is not permitted to link error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-child-account---should-return-400-minor-account-is-not-permitted-to-link-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 451,
              "status": "passed"
            },
            "line": 275,
            "name": "I have created a new PSN account psnOwnerAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 276,
            "name": "I add child+ as a prefix to signinId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 417,
              "status": "passed"
            },
            "line": 277,
            "name": "I make a createPsnMinorAccount.json request",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 278,
            "name": "I get a password token for the account",
            "rows": [
              {
                "cells": [
                  "tokenScopes",
                  "connectedIdentity:partner.link.account.manage"
                ],
                "line": 279
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 280,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 281
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 282
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 283,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064960"
                ],
                "line": 284
              },
              {
                "cells": [
                  "message",
                  "Minor account is not permitted to link"
                ],
                "line": 285
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          },
          {
            "line": 273,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 298,
        "name": "Get Partner Device Code with unsupported partner for country - should return 400 Partner not supported by country error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;get-partner-device-code-with-unsupported-partner-for-country---should-return-400-partner-not-supported-by-country-error",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 535,
              "status": "passed"
            },
            "line": 299,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 52,
              "status": "passed"
            },
            "line": 300,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 301,
            "name": "I make a getPartnerDeviceCodeWithPsnAuthCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "nicolive"
                ],
                "line": 302
              },
              {
                "cells": [
                  "psnAuthCode",
                  "mockPsnAuthCode"
                ],
                "line": 303
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 304,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064967"
                ],
                "line": 305
              },
              {
                "cells": [
                  "message",
                  "Partner not supported by country"
                ],
                "line": 306
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 297,
            "name": "@getDeviceCodeApi"
          }
        ]
      },
      {
        "line": 322,
        "name": "Poll Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 508,
              "status": "passed"
            },
            "line": 310,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 311,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 312,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 313
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 314,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 315
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 316
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 317
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 308,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 327,
        "name": "Poll Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 310,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 311,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 312,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 313
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 314,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 315
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 316
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 317
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 308,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 332,
        "name": "Poll Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 310,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 311,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 312,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 313
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 314,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 315
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 316
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 317
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 308,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 337,
        "name": "Poll Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 344,
              "status": "passed"
            },
            "line": 310,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 311,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 312,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 313
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 314,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 315
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 316
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 317
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 308,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 342,
        "name": "Poll Partner Device Code with invalid scope - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-scope---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 310,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 311,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.get",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 312,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 313
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 314,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 315
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 316
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 317
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 308,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 358,
        "name": "Poll Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 346,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 347,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 348,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "spotify"
                ],
                "line": 349
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 350,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 351
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 352
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 353
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 344,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 363,
        "name": "Poll Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 358,
              "status": "passed"
            },
            "line": 346,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 347,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 348,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitch"
                ],
                "line": 349
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 350,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 351
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 352
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 353
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 344,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 368,
        "name": "Poll Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 432,
              "status": "passed"
            },
            "line": 346,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 347,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 348,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "apple"
                ],
                "line": 349
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 350,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 351
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 352
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 353
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 344,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 373,
        "name": "Poll Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 373,
              "status": "passed"
            },
            "line": 346,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 347,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 348,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 349
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 350,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 351
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 352
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 353
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 344,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 378,
        "name": "Poll Partner Device Code with client credentials token - should return 403 Invalid authorization",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-client-credentials-token---should-return-403-invalid-authorization;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 487,
              "status": "passed"
            },
            "line": 346,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 347,
            "name": "I get a jwt client credentials access token with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 348,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 349
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 350,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 351
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 352
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 353
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 344,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 394,
        "name": "Poll Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 459,
              "status": "passed"
            },
            "line": 383,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 384,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 385,
            "name": "I make a pollPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "invalidPart"
                ],
                "line": 386
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 387,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 388
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 389
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 381,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 380,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 399,
        "name": "Poll Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 393,
              "status": "passed"
            },
            "line": 383,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 384,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8,
              "status": "passed"
            },
            "line": 385,
            "name": "I make a pollPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "amazon"
                ],
                "line": 386
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 387,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 388
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 389
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 381,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 380,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 404,
        "name": "Poll Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 489,
              "status": "passed"
            },
            "line": 383,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 384,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 385,
            "name": "I make a pollPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "twitter"
                ],
                "line": 386
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 387,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 388
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 389
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 381,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 380,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 409,
        "name": "Poll Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 364,
              "status": "passed"
            },
            "line": 383,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 384,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7,
              "status": "passed"
            },
            "line": 385,
            "name": "I make a pollPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "youtube"
                ],
                "line": 386
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 387,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 388
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 389
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 381,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 380,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 414,
        "name": "Poll Partner Device Code for restricted or invalid partner - should return a 404 Unsupported partner",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-for-restricted-or-invalid-partner---should-return-a-404-unsupported-partner;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 579,
              "status": "passed"
            },
            "line": 383,
            "name": "I have created a new PSN account testPsnAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42,
              "status": "passed"
            },
            "line": 384,
            "name": "I get a jwt user access token for the account testPsnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4,
              "status": "passed"
            },
            "line": 385,
            "name": "I make a pollPartnerDeviceCode.json request expecting 404 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "steam"
                ],
                "line": 386
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 387,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1065004"
                ],
                "line": 388
              },
              {
                "cells": [
                  "message",
                  "Unsupported partner"
                ],
                "line": 389
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 381,
            "name": "@apiFilterByPartner"
          },
          {
            "line": 380,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 431,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 507,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "invalidClientId"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 432,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 411,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "invalidClientSecret"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 433,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 412,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "invalidDeviceCode"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 434,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 407,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 49,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "authorizationPending"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 435,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 430,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "accessDenied"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064990"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Invalid device code"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 436,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 414,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "expiredToken"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064987"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Device code has expired"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 437,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "tooFast"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064988"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Device is polling too frequently"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 438,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 521,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19,
              "error_message": "java.lang.AssertionError: Unexpected HTTP response received expected\u003d500 actual\u003d400 \n request: RequestHolder{request\u003dRequestDefinition{method\u003dPOST, url\u003d\u0027http://connected-identity.e1-np-eib.navcloud.sonynei.net/api/connectAccount/v2/users/7948338822657369462/partners/discord/device/token\u0027, headers\u003d{content-type\u003dapplication/json, Authorization\u003dBearer eyJraWQiOiJucF8xIiwiYWxnIjoiUlMyNTYifQ.eyJhY2NvdW50X2lkIjoiNzk0ODMzODgyMjY1NzM2OTQ2MiIsImFjY291bnRfdXVpZCI6IjJhYWQ4MTBjLTU5OWQtNGZmMC1iZjg0LTg5M2M5MDNkM2MwNiIsImFnZSI6NTIsImF1dGh6X2MiOiJlTnFyVmlwT3ppOUlWYkpTU3M3UHkwdE5Ma2xOOFV4SnpTdkpMS20wS2tnc0tzbExMZExMeWN6TDFrdE1UczR2elN2UnkwM01TMHhQVmFvRkFHdjVGWlkiLCJjbGllbnRfaWQiOiIzNGM1MWFhMC03ZDU2LTRhOWUtOWI0Yi00N2Y0NjkwYjFhZjUiLCJkY2ltX2lkIjoiY2UyZmU4MmQtMmM5ZS00YjU4LTljYmYtYzU5ZmMzYTg2ZTQ1IiwiZW52X2lzc19pZCI6IjQiLCJleHAiOjE2Nzg0NTM5NjMsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsImlhdCI6MTY3ODQ1Mjc2MywiaXNfY2hpbGQiOmZhbHNlLCJpc3MiOiJodHRwczovL2F1dGguYWNjb3VudC5zb255LmNvbS8iLCJqdGkiOiI4ZDAxNjAwOC0wODhiLTQ5MTctYWE5Yy00YzY0MjdhMTQ4YWUiLCJsZWdhbF9jb3VudHJ5IjoiVVMiLCJsb2NhbGUiOiJlbi1VUyIsInVzZXJfZGV2aWNlX2lwIjoiMTAuMjQyLjIzMC4xNTEiLCJ2ZXIiOiIyIn0.mxd6cH1WzQD7mbzyTRcO1SfA4ugExEv8gsDfvkF0UcUnFkBdWWvlxnpPoL-EzkQ8cSf3Wi_kB1nZ1dvGcaCj88jDADcnmF3NJ3CeONHdmZS24p4uBSMeK-mF7SDlqfm2HJUd7l9FoLNooHitKeKEnxn89BeQZCN6Rxhf7JZCoXbD-Pof4R9hnAcjBk-PtseiCDizjGAzSZjtTLxuc2y373M0n8I9KDYuDxmr9Ow5NZVrCLd8hA22dHoTaf33mL2nLgy1LtpuE29FyfnYhDtIGVSRUZbULdD6ojGgY7M94NXEGM8xWeb8oB0FBpvvglfCF86rva8NvUuZ6cqv-rJScbkTMxCy4jYO58cvL7BHhQ1A8U_uo4-315bA--4w7ww2p4VF0Jj6pS12MyC1ZtvJOW5jQF4sOWwmQgYbm2gE2632Enl-lvTho0uK2qtuwqCWtqGtBoK9eQQ06BHh2IC79rt0xhRqs1BMENHeU3nn6SOffRSgFZz9fIuAd28Lbux9, X-Cis-Mock-Partner\u003dtrue}, formParams\u003dnull, queryParams\u003dnull, cookies\u003dnull, body\u003d{deviceCode\u003dtwoWayLinkError}}, metadata\u003dnull, responseExtraction\u003dnull} \n response: ResponseHolder{statusCode\u003d400, statusText\u003d\u0027\u0027, body\u003d{\"error\":{\"code\":1064995,\"message\":\"Partner error\",\"referenceId\":\"453ae992-f6aa-44e5-bae9-92f6aa44e5dc\",\"validationErrors\":[]}}, contentType\u003d\u0027application/json\u0027, headers\u003d{X-Psn-Request-Id\u003d453ae992-f6aa-44e5-bae9-92f6aa44e5dc, Access-Control-Expose-Headers\u003dAccess-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Max-Age,Content-Length,Location,Retry-After,Strict-Transport-Security,X-Content-Type-Options,X-Psn-Correlation-Id,X-Psn-Error-Code,X-Psn-Experiment-Id,X-Psn-Request-Id, X-Psn-Error-Code\u003d1064995, Server\u003dnginx, Cache-Control\u003dno-store, Access-Control-Allow-Credentials\u003dtrue, Connection\u003dkeep-alive, Content-Length\u003d127, X-Psn-Correlation-Id\u003d2d0489e1-fa53-4dae-8489-e1fa535dae99, Access-Control-Max-Age\u003d86400, Date\u003dFri, 10 Mar 2023 12:52:44 GMT, Content-Type\u003dapplication/json}, cookies\u003d[]}\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.assertStatusCode(AsyncHttpSteps.java:112)\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.lambda$commonExecuteRequest$0(AsyncHttpSteps.java:85)\n\tat io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:59)\n\tat io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:67)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:23)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:12)\n\tat org.asynchttpclient.AsyncCompletionHandler.onCompleted(AsyncCompletionHandler.java:66)\n\tat org.asynchttpclient.netty.NettyResponseFuture.loadContent(NettyResponseFuture.java:222)\n\tat org.asynchttpclient.netty.NettyResponseFuture.done(NettyResponseFuture.java:257)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.finishUpdate(AsyncHttpClientHandler.java:241)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleChunk(HttpHandler.java:114)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleRead(HttpHandler.java:143)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.channelRead(AsyncHttpClientHandler.java:78)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "twoWayLinkError"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 439,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 485,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "generic400error"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 440,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 437,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "unexpectedError"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064995"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Partner error"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 445,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 400,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "invalidClientId"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 446,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 396,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "invalidClientSecret"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 447,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 41,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "invalidDeviceCode"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Bad request parameter or header"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 448,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 453,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "authorizationPending"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064986"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Pending user authorization"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 449,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 413,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "accessDenied"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064990"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Invalid device code"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 450,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 450,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "expiredToken"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064987"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Device code has expired"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 451,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 392,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "tooFast"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064988"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Device is polling too frequently"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 452,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 374,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 33,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18,
              "error_message": "java.lang.AssertionError: Unexpected HTTP response received expected\u003d500 actual\u003d400 \n request: RequestHolder{request\u003dRequestDefinition{method\u003dPOST, url\u003d\u0027http://connected-identity.e1-np-eib.navcloud.sonynei.net/api/connectAccount/v2/users/8203072150025030942/partners/testbidirectionalpartner/device/token\u0027, headers\u003d{content-type\u003dapplication/json, Authorization\u003dBearer eyJraWQiOiJucF8xIiwiYWxnIjoiUlMyNTYifQ.eyJhY2NvdW50X2lkIjoiODIwMzA3MjE1MDAyNTAzMDk0MiIsImFjY291bnRfdXVpZCI6IjE5NjQ4ZWJiLTc3MTktNDE0NS04NDYyLWY4ODc3MmIzYThjMiIsImFnZSI6NTIsImF1dGh6X2MiOiJlTnFyVmlwT3ppOUlWYkpTU3M3UHkwdE5Ma2xOOFV4SnpTdkpMS20wS2tnc0tzbExMZExMeWN6TDFrdE1UczR2elN2UnkwM01TMHhQVmFvRkFHdjVGWlkiLCJjbGllbnRfaWQiOiIzNGM1MWFhMC03ZDU2LTRhOWUtOWI0Yi00N2Y0NjkwYjFhZjUiLCJkY2ltX2lkIjoiY2UyZmU4MmQtMmM5ZS00YjU4LTljYmYtYzU5ZmMzYTg2ZTQ1IiwiZW52X2lzc19pZCI6IjQiLCJleHAiOjE2Nzg0NTM5NjQsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsImlhdCI6MTY3ODQ1Mjc2NCwiaXNfY2hpbGQiOmZhbHNlLCJpc3MiOiJodHRwczovL2F1dGguYWNjb3VudC5zb255LmNvbS8iLCJqdGkiOiIwOGM4ZGE0MS05YWM1LTQ3YjYtYjVlNi03OGI2ZDZlN2U5OGMiLCJsZWdhbF9jb3VudHJ5IjoiVVMiLCJsb2NhbGUiOiJlbi1VUyIsInVzZXJfZGV2aWNlX2lwIjoiMTAuMjQyLjIzMC4xNTEiLCJ2ZXIiOiIyIn0.GTX_tMWu4ad9-dVqorfT1msauAMl195VRkFyY3GjoVDWldayqEWY3HoglZQP962biH4IlhgZVpgK_L-cjR9tY_tBUAYqgaUnFwaSH_pswy2FfzJGLyXtQg3PBZLzO8Sc9xzkDfO10lttwp3Cd_HPDUgN1DoJt8DCKfK_9wBBjI0xCCsOeDcS03NzHAfxNsiF7lqe2OkRCWAoxhTBqn69_zwsfqabtTqsfKrGeT9KzoslDvp4-pTI6GghWH2c7en80EB8DCPXbOGZ6b-pQSFcE06Hv5clY0vGSXEcSMFfg3rmftvtvSalzpxTIEGPxr7NVrtByK_RFGo7MeEwlixh49q7VtJJb03bUWGqpvcklrC6_mK70cX_vw_5i0E3SWC9c3kTpvHt-8t_CGuY_BEBxebjkpWTzQEK5H4hwQoMkC_PCQFbfX4zknuJoXcsNCvq2YzXOVzQU4BcmvWTDu0UIZmh5iNmscEpWsDCItCCB5DVL1pmg-ww8ELzKGMhM18M, X-Cis-Mock-Partner\u003dfalse}, formParams\u003dnull, queryParams\u003dnull, cookies\u003dnull, body\u003d{deviceCode\u003dtwoWayLinkError}}, metadata\u003dnull, responseExtraction\u003dnull} \n response: ResponseHolder{statusCode\u003d400, statusText\u003d\u0027\u0027, body\u003d{\"error\":{\"code\":1064995,\"message\":\"Partner error\",\"referenceId\":\"91f849ed-34ca-4d70-b849-ed34ca2d7024\",\"validationErrors\":[]}}, contentType\u003d\u0027application/json\u0027, headers\u003d{X-Psn-Request-Id\u003d91f849ed-34ca-4d70-b849-ed34ca2d7024, Access-Control-Expose-Headers\u003dAccess-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Max-Age,Content-Length,Location,Retry-After,Strict-Transport-Security,X-Content-Type-Options,X-Psn-Correlation-Id,X-Psn-Error-Code,X-Psn-Experiment-Id,X-Psn-Request-Id, X-Psn-Error-Code\u003d1064995, Server\u003dnginx, Cache-Control\u003dno-store, Access-Control-Allow-Credentials\u003dtrue, Connection\u003dkeep-alive, Content-Length\u003d127, X-Psn-Correlation-Id\u003dab0fcdab-6b18-4eb7-8fcd-ab6b184eb7a3, Access-Control-Max-Age\u003d86400, Date\u003dFri, 10 Mar 2023 12:52:44 GMT, Content-Type\u003dapplication/json}, cookies\u003d[]}\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.assertStatusCode(AsyncHttpSteps.java:112)\n\tat com.sony.sie.rex.cucumber.steps.http.AsyncHttpSteps.lambda$commonExecuteRequest$0(AsyncHttpSteps.java:85)\n\tat io.reactivex.internal.operators.observable.ObservableMap$MapObserver.onNext(ObservableMap.java:59)\n\tat io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:67)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:23)\n\tat com.sony.sie.rex.http.util.RxResponseCompletionHandler.onCompleted(RxResponseCompletionHandler.java:12)\n\tat org.asynchttpclient.AsyncCompletionHandler.onCompleted(AsyncCompletionHandler.java:66)\n\tat org.asynchttpclient.netty.NettyResponseFuture.loadContent(NettyResponseFuture.java:222)\n\tat org.asynchttpclient.netty.NettyResponseFuture.done(NettyResponseFuture.java:257)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.finishUpdate(AsyncHttpClientHandler.java:241)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleChunk(HttpHandler.java:114)\n\tat org.asynchttpclient.netty.handler.HttpHandler.handleRead(HttpHandler.java:143)\n\tat org.asynchttpclient.netty.handler.AsyncHttpClientHandler.channelRead(AsyncHttpClientHandler.java:78)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)\n",
              "status": "failed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "twoWayLinkError"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 453,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 343,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 500 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "generic400error"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064997"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Unknown error occurred"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 454,
        "name": "Poll Partner Device Code when partner API returns error - should return error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-returns-error---should-return-error;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 430,
              "status": "passed"
            },
            "line": 418,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 419,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 420,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16,
              "status": "passed"
            },
            "line": 421,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              1,
              2,
              3
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 422
              },
              {
                "cells": [
                  "code",
                  "unexpectedError"
                ],
                "line": 423
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 424,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              4,
              5
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1064995"
                ],
                "line": 425
              },
              {
                "cells": [
                  "message",
                  "Partner error"
                ],
                "line": 426
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 416,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 468,
        "name": "Poll Partner Device Code when partner API times out - should get timeout error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-times-out---should-get-timeout-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 410,
              "status": "passed"
            },
            "line": 458,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35,
              "status": "passed"
            },
            "line": 459,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 460,
            "name": "I enable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 461,
            "name": "I save timeout as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5083,
              "status": "passed"
            },
            "line": 462,
            "name": "I make a pollPartnerDeviceCode.json request expecting a timeout:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 463
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 456,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 473,
        "name": "Poll Partner Device Code when partner API times out - should get timeout error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-when-partner-api-times-out---should-get-timeout-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 458,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 459,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 460,
            "name": "I disable mock for partner api call",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 461,
            "name": "I save timeout as code",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5028,
              "status": "passed"
            },
            "line": 462,
            "name": "I make a pollPartnerDeviceCode.json request expecting a timeout:",
            "matchedColumns": [
              1
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 463
              }
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 456,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 488,
        "name": "Poll Partner Device Code with missing required parameters - should return 400 JSON_VALIDATION_ERROR error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-missing-required-parameters---should-return-400-json-validation-error-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 403,
              "status": "passed"
            },
            "line": 477,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30,
              "status": "passed"
            },
            "line": 478,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 479,
            "name": "I make a pollPartnerDeviceCodeNoBody.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 480
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 481,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 482
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 483
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 475,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 493,
        "name": "Poll Partner Device Code with missing required parameters - should return 400 JSON_VALIDATION_ERROR error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-missing-required-parameters---should-return-400-json-validation-error-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 391,
              "status": "passed"
            },
            "line": 477,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38,
              "status": "passed"
            },
            "line": 478,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 479,
            "name": "I make a pollPartnerDeviceCodeNoBody.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 480
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 481,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048705"
                ],
                "line": 482
              },
              {
                "cells": [
                  "message",
                  "JSON_VALIDATION_ERROR"
                ],
                "line": 483
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 475,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 509,
        "name": "Poll Partner Device Code with invalid request parameter - should return 400 BAD_REQUEST_PARAMETER error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-request-parameter---should-return-400-bad-request-parameter-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 428,
              "status": "passed"
            },
            "line": 497,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32,
              "status": "passed"
            },
            "line": 498,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 499,
            "name": "I save invalid as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5,
              "status": "passed"
            },
            "line": 500,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 501
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 502,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 503
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 504
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 495,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 514,
        "name": "Poll Partner Device Code with invalid request parameter - should return 400 BAD_REQUEST_PARAMETER error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-invalid-request-parameter---should-return-400-bad-request-parameter-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 379,
              "status": "passed"
            },
            "line": 497,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39,
              "status": "passed"
            },
            "line": 498,
            "name": "I get a jwt user access token for the account psnAccount with scope connectedIdentity:partner.link.account.manage",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 499,
            "name": "I save invalid as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6,
              "status": "passed"
            },
            "line": 500,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 501
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 502,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1048706"
                ],
                "line": 503
              },
              {
                "cells": [
                  "message",
                  "BAD_REQUEST_PARAMETER"
                ],
                "line": 504
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 495,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 528,
        "name": "Poll Partner Device Code with missing token - should return 403 Invalid authorization error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-missing-token---should-return-403-invalid-authorization-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 418,
              "status": "passed"
            },
            "line": 518,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17,
              "status": "passed"
            },
            "line": 519,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 520
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 521,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 522
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 523
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 516,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 533,
        "name": "Poll Partner Device Code with missing token - should return 403 Invalid authorization error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-missing-token---should-return-403-invalid-authorization-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 379,
              "status": "passed"
            },
            "line": 518,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15,
              "status": "passed"
            },
            "line": 519,
            "name": "I make a pollPartnerDeviceCode.json request expecting 403 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 520
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 521,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1098102"
                ],
                "line": 522
              },
              {
                "cells": [
                  "message",
                  "Invalid authorization"
                ],
                "line": 523
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 516,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 548,
            "value": "# old token from 11/29/2022"
          }
        ],
        "line": 549,
        "name": "Poll Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 428,
              "status": "passed"
            },
            "line": 537,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 538,
            "name": "I save ced0f74c-2a01-4acc-aa27-af72c5039faa as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11,
              "status": "passed"
            },
            "line": 539,
            "name": "I make a pollPartnerDeviceCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 540
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 541,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 542
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 543
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 535,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 550,
            "value": "# invalid"
          }
        ],
        "line": 551,
        "name": "Poll Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 495,
              "status": "passed"
            },
            "line": 537,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 538,
            "name": "I save invalidToken as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 539,
            "name": "I make a pollPartnerDeviceCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "discord"
                ],
                "line": 540
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 541,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 542
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 543
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 535,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 556,
            "value": "# older token (08/29/2022)"
          }
        ],
        "line": 557,
        "name": "Poll Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 358,
              "status": "passed"
            },
            "line": 537,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 538,
            "name": "I save 4635257f-e9c1-46ab-90ff-3be5276bbf7a as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10,
              "status": "passed"
            },
            "line": 539,
            "name": "I make a pollPartnerDeviceCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 540
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 541,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 542
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 543
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 535,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 558,
            "value": "# proper format but not valid"
          }
        ],
        "line": 559,
        "name": "Poll Partner Device Code with expired or invalid token - should return 401 Unauthorized access error",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-partner-device-code-with-expired-or-invalid-token---should-return-401-unauthorized-access-error;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 360,
              "status": "passed"
            },
            "line": 537,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 538,
            "name": "I save 12345678-0000-0000-0000-000000000000 as accessToken",
            "matchedColumns": [
              1
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 539,
            "name": "I make a pollPartnerDeviceCode.json request expecting 401 status:",
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 540
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 541,
            "name": "I verify that body.error in response matches:",
            "rows": [
              {
                "cells": [
                  "code",
                  "1064978"
                ],
                "line": 542
              },
              {
                "cells": [
                  "message",
                  "Unauthorized access"
                ],
                "line": 543
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 535,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 619,
        "name": "Poll the device code for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-the-device-code-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 410,
              "status": "passed"
            },
            "line": 603,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 127,
              "status": "passed"
            },
            "line": 604,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 605,
            "name": "I save \u003caccountId\u003e as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 98,
              "status": "passed"
            },
            "line": 606,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 607,
            "name": "I disable mock for partner api call with scenario testbidirectionalpartnerCreateLinkWithPartnerDeviceCodeNoPsnLinksNegative",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162,
              "status": "passed"
            },
            "line": 608,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46,
              "status": "passed"
            },
            "line": 609,
            "name": "I get and claim a device code for psnAccount with PSN auth code for testbidirectionalpartner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13,
              "status": "passed"
            },
            "line": 610,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 611
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 612,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065007"
                ],
                "line": 613
              },
              {
                "cells": [
                  "message",
                  "A link to the PSN account not been created in partner"
                ],
                "line": 614
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 615
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 600,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 601,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 620,
        "name": "Poll the device code for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-the-device-code-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 337,
              "status": "passed"
            },
            "line": 603,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 121,
              "status": "passed"
            },
            "line": 604,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 605,
            "name": "I save \u003caccountId\u003e as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 93,
              "status": "passed"
            },
            "line": 606,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 607,
            "name": "I disable mock for partner api call with scenario testbidirectionalpartnerCreateLinkWithPartnerDeviceCodeTwoPsnLinksNegative",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 163,
              "status": "passed"
            },
            "line": 608,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 609,
            "name": "I get and claim a device code for psnAccount with PSN auth code for testbidirectionalpartner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12,
              "status": "passed"
            },
            "line": 610,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 611
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 612,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065008"
                ],
                "line": 613
              },
              {
                "cells": [
                  "message",
                  "Multiple links to PSN accounts exist in partner"
                ],
                "line": 614
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 615
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 600,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 601,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      },
      {
        "line": 621,
        "name": "Poll the device code for bidirectional partner with link issue - should return 400 with expected code and message",
        "description": "",
        "id": "create-link-using-device-code-flow---negative-scenarios;poll-the-device-code-for-bidirectional-partner-with-link-issue---should-return-400-with-expected-code-and-message;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 364,
              "status": "passed"
            },
            "line": 603,
            "name": "I have created a new PSN account psnAccount",
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 130,
              "status": "passed"
            },
            "line": 604,
            "name": "I update emailVerificationStatus for PSN Account",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 605,
            "name": "I save \u003caccountId\u003e as accountId",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 85,
              "status": "passed"
            },
            "line": 606,
            "name": "I grant consent for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 607,
            "name": "I disable mock for partner api call with scenario testbidirectionalpartnerCreateLinkWithPartnerDeviceCodeWrongPsnLinkNegative",
            "matchedColumns": [
              0
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 153,
              "status": "passed"
            },
            "line": 608,
            "name": "I get testbidirectionalpartner auth code for PSN account psnAccount for client id abcd1111-8237-4efc-a278-0119372e188e",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45,
              "status": "passed"
            },
            "line": 609,
            "name": "I get and claim a device code for psnAccount with PSN auth code for testbidirectionalpartner account testBidirectionalPartnerAccount",
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14,
              "status": "passed"
            },
            "line": 610,
            "name": "I make a pollPartnerDeviceCode.json request expecting 400 status:",
            "rows": [
              {
                "cells": [
                  "partnerId",
                  "testbidirectionalpartner"
                ],
                "line": 611
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 612,
            "name": "I verify that body.error in response matches:",
            "matchedColumns": [
              1,
              2
            ],
            "rows": [
              {
                "cells": [
                  "code",
                  "1065009"
                ],
                "line": 613
              },
              {
                "cells": [
                  "message",
                  "A link to a different PSN account exists"
                ],
                "line": 614
              },
              {
                "cells": [
                  "referenceId",
                  "conf(\u0027formatUUID\u0027)"
                ],
                "line": 615
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 600,
            "name": "@testbidirectionalpartner"
          },
          {
            "line": 3,
            "name": "@negative"
          },
          {
            "line": 601,
            "name": "@pollDeviceCodeApi"
          },
          {
            "line": 1,
            "name": "@deviceCodeFlow"
          },
          {
            "line": 2,
            "name": "@wiremock"
          }
        ]
      }
    ],
    "name": "Create link using device code flow - negative scenarios",
    "description": "",
    "id": "create-link-using-device-code-flow---negative-scenarios",
    "keyword": "Feature",
    "uri": "link/create/oauth2/createLinkWithDeviceCodeFlowNegative.feature",
    "tags": [
      {
        "line": 1,
        "name": "@deviceCodeFlow"
      },
      {
        "line": 2,
        "name": "@wiremock"
      },
      {
        "line": 3,
        "name": "@negative"
      }
    ]
  }
]
